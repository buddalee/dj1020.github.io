<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[閃亮亮大師之路]]></title>
  <subtitle><![CDATA[程式學習心得筆記]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.dj1020.net/"/>
  <updated>2016-07-22T02:36:20.000Z</updated>
  <id>http://blog.dj1020.net/</id>
  
  <author>
    <name><![CDATA[閃亮亮dj]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #26 - REST API 與前端整合之踩雷心得@RickySu]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89day-26_REST_API_%E8%88%87%E5%89%8D%E7%AB%AF%E6%95%B4%E5%90%88%E4%B9%8B%E8%B8%A9%E9%9B%B7%E5%BF%83%E5%BE%97/"/>
    <id>http://blog.dj1020.net/PHP也有day-26_REST_API_與前端整合之踩雷心得/</id>
    <published>2016-07-21T11:30:34.000Z</published>
    <updated>2016-07-22T02:36:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="REST_API_Design"><a href="#REST_API_Design" class="headerlink" title="REST API Design"></a>REST API Design</h2><h3 id="Representational_State_Transfer_API"><a href="#Representational_State_Transfer_API" class="headerlink" title="Representational State Transfer API"></a>Representational State Transfer API</h3><ul>
<li>要求(建議風格)：<ul>
<li>Client-Server (Request-Response) 一個請求一個回應</li>
<li>Stateless 通信狀態全部由客戶端維護</li>
<li>Cache 快取，可以在過程中被 Cache 起來</li>
<li>Uniform Interface 統一接口相互通信，提高交互的可見性</li>
<li>Layered System 將架構分解為若干等級的 layer</li>
<li>Code-On-Demand (optional) 可以傳送程式碼給客戶端執行</li>
</ul>
</li>
</ul>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><pre><code>- POST 新增資料
- GET 讀取資料
- PUT 更新資料
- DELETE 刪除資料
</code></pre><ul>
<li>GET<ul>
<li>沒有寫入動作</li>
<li>idempotent 可以重複呼叫，不影響結果。其實 delete 也應該可以被重複呼叫。</li>
</ul>
</li>
<li><p>POST</p>
<ul>
<li>沒有 idempotent，所以每次要求會新增一筆資料</li>
</ul>
</li>
<li><p>Ex1:</p>
<ul>
<li>單一接口 <a href="http://api.example.com/products" target="_blank" rel="external">http://api.example.com/products</a></li>
<li>以複數表示所有產品</li>
<li>GET <a href="http://api.example.com/products" target="_blank" rel="external">http://api.example.com/products</a> 表示取得所有產品資訊</li>
</ul>
</li>
<li><p>Ex1:</p>
<ul>
<li>單一接口 <a href="http://api.example.com/order" target="_blank" rel="external">http://api.example.com/order</a></li>
<li>以複數表示所有產品 ???</li>
<li>POST <a href="http://api.example.com/order" target="_blank" rel="external">http://api.example.com/order</a></li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;"<span class="attribute">item_id</span>": <span class="value"><span class="number">1</span></span>,  "<span class="attribute">qty</span>": <span class="value"><span class="number">3</span></span>, "<span class="attribute">price</span>": <span class="value"><span class="number">100</span></span>&#125;,</span><br><span class="line">    &#123;"<span class="attribute">item_id</span>": <span class="value"><span class="number">3</span></span>,  "<span class="attribute">qty</span>": <span class="value"><span class="number">1</span></span>, "<span class="attribute">price</span>": <span class="value"><span class="number">100</span></span>&#125;,</span><br><span class="line">    &#123;"<span class="attribute">item_id</span>": <span class="value"><span class="number">10</span></span>, "<span class="attribute">qty</span>": <span class="value"><span class="number">3</span></span>, "<span class="attribute">price</span>": <span class="value"><span class="number">100</span></span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="GET__u50B3_u905E_u53C3_u6578_u6642_u7684_u5730_u96F7_uFF01"><a href="#GET__u50B3_u905E_u53C3_u6578_u6642_u7684_u5730_u96F7_uFF01" class="headerlink" title="GET 傳遞參數時的地雷！"></a>GET 傳遞參數時的地雷！</h3><ul>
<li>RFC 沒有禁止 GET 不能傳送 Request Body</li>
<li>jQuery $.ajax 不支援</li>
<li>Proxy Server 可能會幫你過濾掉</li>
<li>會影響 Cache 建立</li>
</ul>
<blockquote>
<p>改用 Query String 來傳遞參數，不要放在 Request Body</p>
</blockquote>
<h3 id="u5982_u4F55_u5B9A_u7FA9_u56DE_u50B3_u503C_u72C0_u614B__28_u6210_u529F/_u5931_u6557/_u932F_u8AA4_u4EE3_u78BC_u7B49_29"><a href="#u5982_u4F55_u5B9A_u7FA9_u56DE_u50B3_u503C_u72C0_u614B__28_u6210_u529F/_u5931_u6557/_u932F_u8AA4_u4EE3_u78BC_u7B49_29" class="headerlink" title="如何定義回傳值狀態 (成功/失敗/錯誤代碼等)"></a>如何定義回傳值狀態 (成功/失敗/錯誤代碼等)</h3><ul>
<li>反例 Ex:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Success</span><br><span class="line">&#123;</span><br><span class="line">    "status" : true,</span><br><span class="line">    "data" : ""</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Error</span><br><span class="line">&#123;</span><br><span class="line">    "status" : false,</span><br><span class="line">    "msg" : ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因為 $.ajax 時，success 的 callback 還要判斷是否成功的執行 request</li>
</ul>
<blockquote>
<p>建議使用 HTTP Status Code 做為回傳 Error 的方式</p>
</blockquote>
<ul>
<li>可以參考 <a href="https://www.cheatography.com/kstep/cheat-sheets/http-status-codes/" target="_blank" rel="external">狀態碼小抄</a></li>
</ul>
<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><ul>
<li><p>Server Side Render</p>
<ul>
<li>Ex: SPA (Single Page Application)</li>
<li>搜尋引擎爬不到 javascript 執行後才 render 出來的 content</li>
<li>Google 最近聽說有辦法爬，但其他的如 FB, Twitter, 或其他搜尋引擎就不見得了</li>
</ul>
</li>
<li><p>Ajax Crawling (Google 提出)</p>
<ul>
<li>有 <code>#!</code> 的 url</li>
<li>會被置換成 … 見<a href="https://docs.google.com/presentation/d/1l8O_5UpWGvfe2lhPjSa8CUbCFIPkFohV0HiJGUqAzec/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">投影片</a></li>
<li>寫一個 url rewrite 導向到一個 SSR 的 entry point, 如：<a href="http://example.com/crawler.php" target="_blank" rel="external">http://example.com/crawler.php</a></li>
<li>專門給 Search Engine 抓網站用的</li>
</ul>
</li>
<li><p><code>&lt;meta name=&quot;fragment&quot; content=&quot;!&quot;&gt;</code> 會置換 url 去爬網站</p>
</li>
</ul>
<h3 id="SPA_SEO_Services"><a href="#SPA_SEO_Services" class="headerlink" title="SPA SEO Services"></a>SPA SEO Services</h3><ul>
<li>Prerender.io (付費)</li>
<li>Brombone (付費)</li>
<li>SEO.js (付費)</li>
<li>PhantomJS (免費) - 請他把頁面 render 出來後送給 Search Engine</li>
</ul>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><h3 id="Same_Origin_Policy__28_u540C_u6E90_u653F_u7B56_29"><a href="#Same_Origin_Policy__28_u540C_u6E90_u653F_u7B56_29" class="headerlink" title="Same Origin Policy (同源政策)"></a>Same Origin Policy (同源政策)</h3><ul>
<li>協定 http, https 要相同</li>
<li>Port 要相同</li>
<li>Host 要相同，包含 subdomain</li>
</ul>
<blockquote>
<p>前後端網址總是不同，Ex: CDN</p>
</blockquote>
<h3 id="CORS-1"><a href="#CORS-1" class="headerlink" title="CORS"></a>CORS</h3><blockquote>
<p>Cross Origin Resource Sharing</p>
</blockquote>
<ul>
<li>Simple Request<ul>
<li>只允許 GET, POST, HEAD</li>
<li>Header 只允許 <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code></li>
<li><code>Content-Type</code> 只允許<ul>
<li><code>application/x-www-form-urlencoded</code></li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
<li><code>application/json</code> <strong>-&gt; 雷！不行</strong></li>
</ul>
</li>
<li>不能自訂 header (ex: x-xss-protection)，不然就不是 Simple Request</li>
</ul>
</li>
</ul>
<h3 id="u70BA_u4F55_u53EA_u5141_u8A31_u9019_3__u7A2E_methods"><a href="#u70BA_u4F55_u53EA_u5141_u8A31_u9019_3__u7A2E_methods" class="headerlink" title="為何只允許這 3 種 methods"></a>為何只允許這 3 種 methods</h3><ul>
<li>怕 iframe 嵌入一個表單 … 太快來不及記</li>
</ul>
<h3 id="Simple_Request__u600E_u9EBC_u904B_u4F5C_u7684"><a href="#Simple_Request__u600E_u9EBC_u904B_u4F5C_u7684" class="headerlink" title="Simple Request 怎麼運作的"></a>Simple Request 怎麼運作的</h3><blockquote>
<p>以下或後面的例是都是跨網域送 CORS</p>
</blockquote>
<ol>
<li><p>送出 Request 時</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>瀏覽器會自動加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Server 端要回應：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Controll-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完成！可以送 CORS</p>
</li>
</ol>
<ul>
<li>沒有 Origin 或是回來沒有 Access-Controll-Allow-Origin</li>
<li>如果回應沒有送 <code>Access-Controll-Allow-Origin</code>，實際上請求還是送出去了，只是回來的 response 會被丟棄！</li>
<li>Access-Controll-Allow-Origin 只能放一個網址，要從後端自己判斷後回應</li>
</ul>
<h3 id="u4E0D_u592A_Simple_Request__28_u4E0D_u5C6C_u65BC_Simple_Request_29"><a href="#u4E0D_u592A_Simple_Request__28_u4E0D_u5C6C_u65BC_Simple_Request_29" class="headerlink" title="不太 Simple Request (不屬於 Simple Request)"></a>不太 Simple Request (不屬於 Simple Request)</h3><ul>
<li>Ex1:</li>
</ul>
<ol>
<li><p>以送 PUT Request 為例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="string">http:</span><span class="comment">//a.com</span></span><br><span class="line"><span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>但其實，瀏覽器會先 hold 住不送 Request，先用 OPTION 去 call Server</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTION <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Server 回應 OPTION (稱 <code>Prefight Request</code>)</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Controll-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Server 回應後，瀏覽器才會把 PUT Request 送出</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一樣，Server 回應 PUT 時記得要有，不然 Response 會被 drop</span><br><span class="line">Access-Controll-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//a.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CORS 完成！可以送</p>
</li>
</ol>
<h3 id="CORS_Request_Header"><a href="#CORS_Request_Header" class="headerlink" title="CORS Request Header"></a>CORS Request Header</h3><ul>
<li><code>Access-Controll-Allow-Origin</code></li>
<li><code>Access-Controll-Allow-Methods</code>，可多個，如 GET, POST, PUT</li>
<li><code>Access-Controll-Allow-Headers</code>，Ex: X-XSS-PROTECTION</li>
<li><code>Access-Control-Max-Age</code> 不會再放 <code>Prefight Request</code>，在 ??? 秒內，不然每次都變成兩個 Request</li>
</ul>
<h4 id="u6709_u96F7_u5C0F_u5FC3_uFF01"><a href="#u6709_u96F7_u5C0F_u5FC3_uFF01" class="headerlink" title="有雷小心！"></a>有雷小心！</h4><blockquote>
<p>Chrome 特別之處，即使沒有同源問題，一樣會送 Origin；<br>Firefox 只有非同源時才會送 Origin header</p>
</blockquote>
<h3 id="Keep_State_Cookie/Session__u5982_u4F55_u5728_u5BA2_u6236_u7AEF_u4FDD_u5B58_u72C0_u614B"><a href="#Keep_State_Cookie/Session__u5982_u4F55_u5728_u5BA2_u6236_u7AEF_u4FDD_u5B58_u72C0_u614B" class="headerlink" title="Keep State Cookie/Session 如何在客戶端保存狀態"></a>Keep State Cookie/Session 如何在客戶端保存狀態</h3><ul>
<li>Why not cookie?<ul>
<li>碰到 CORS 建議不用 Cookie</li>
<li>舉例：以下皆是非同源的狀況</li>
</ul>
</li>
</ul>
<ol>
<li><p>(非 Simple Request)</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="string">http:</span><span class="comment">//a.com</span></span><br><span class="line">prefight request</span><br><span class="line">要特別加 `Access-Controll-Allow-<span class="string">Credentials:</span> <span class="literal">true</span>` 這樣 Server 回傳的 Cookie 才會被接受！！</span><br></pre></td></tr></table></figure>
</li>
<li><p>Simple Request</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">一樣要特別加 `Access-Controll-Allow-Credentials:</span> <span class="literal">true</span><span class="escape">` </span>這樣 Server 回傳的 Cookie 才會被接受！！</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="u5C0F_u5FC3_uFF01_u6709_u96F7"><a href="#u5C0F_u5FC3_uFF01_u6709_u96F7" class="headerlink" title="小心！有雷"></a>小心！有雷</h4><ul>
<li>但 Cookie 一樣有 <code>同源政策</code> –&gt; 只好用 token 來處理，加 <code>Authorization</code> header</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer <span class="function"><span class="title">custom_token</span><span class="params">(token自訂)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Server 端也要回應 <code>Access-Controll-Allow-Headers: Authorization</code> 才會生效</li>
<li>token 就不會受同源政策引響，所以建議用 <code>Authorization token</code> 取代 <code>Cookie</code></li>
</ul>
<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><ul>
<li><p>結構，見<a href="https://docs.google.com/presentation/d/1l8O_5UpWGvfe2lhPjSa8CUbCFIPkFohV0HiJGUqAzec/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">投影片</a></p>
<ul>
<li>Header : 加密法，類別</li>
<li>Payload : Request Body</li>
<li>Verify : 由 Server 端驗證，認 token 來執行 request，裡面帶有 secret key</li>
</ul>
</li>
<li><p>Payload 欄位</p>
<ul>
<li>iss - issuer - 通常是放 API 網址</li>
<li>aud - audience - 通常是放前端網址 ( <code>Header 的 Origin</code> ) 重要！才能識別當初 token 是發給誰！</li>
<li>exp - expiration - 有效期限 1469027330，如給 1 小時時間，一樣很重要！</li>
<li>nbf - not before - 不得早於哪個時間， token 暫時還不生效的意思</li>
<li>iat - issued at - 簽發時間 (時間欄位都是 timestamp 格式)</li>
</ul>
</li>
<li><p>JWT Resource: <a href="https://jwt.io" target="_blank" rel="external">https://jwt.io</a></p>
<ul>
<li>有一個 deubg tool 可以用</li>
<li>有列出很多第三方的 Lib 可以用！！</li>
<li>連前端讀取 token 的 js lib 都有，但較少</li>
</ul>
</li>
</ul>
<h2 id="Serializer__u597D_u795E_u554A_uFF01"><a href="#Serializer__u597D_u795E_u554A_uFF01" class="headerlink" title="Serializer 好神啊！"></a>Serializer 好神啊！</h2><h3 id="u5341_u5927_u60F9_u60F1_u5DE5_u7A0B_u5E2B_u65B9_u5F0F_u4E4B_u4E00"><a href="#u5341_u5927_u60F9_u60F1_u5DE5_u7A0B_u5E2B_u65B9_u5F0F_u4E4B_u4E00" class="headerlink" title="十大惹惱工程師方式之一"></a>十大惹惱工程師方式之一</h3><blockquote>
<p>API 要回傳 JSON -&gt; 回傳 XML 格式也順便做一下！<br>API 要能接收 JSON -&gt; XML 格式也順便來一下吧！</p>
</blockquote>
<h3 id="u6709_u7DF4_u904E_u7684_Ricky__u5927_u5927_u6559_u4F60_u9019_u6A23_u505A_u4F86_u5E73_u606F_u6012_u706B"><a href="#u6709_u7DF4_u904E_u7684_Ricky__u5927_u5927_u6559_u4F60_u9019_u6A23_u505A_u4F86_u5E73_u606F_u6012_u706B" class="headerlink" title="有練過的 Ricky 大大教你這樣做來平息怒火"></a>有練過的 Ricky 大大教你這樣做來平息怒火</h3><ul>
<li>用工具來處理 <code>composer require jms/serializer</code></li>
<li>有 API 需求的話，就先裝 <code>serializer</code> 就對了！</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$serializr</span>-&gt;serialize(<span class="variable">$data</span>, <span class="string">'xml'</span>);</span><br><span class="line"><span class="variable">$serializr</span>-&gt;serialize(<span class="variable">$data</span>, <span class="string">'json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $data 可以丟各種格式進來！自動測！</span></span><br><span class="line"><span class="comment">// 也可以混合格式，有的是 array，有的是 object 都可以解</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$serializr</span>-&gt;deserialize(<span class="variable">$jsonData</span>, <span class="string">'MyNamespace\MyObject'</span>, <span class="string">'json'</span>);</span><br><span class="line"><span class="comment">// 用 Annotations Configure</span></span><br><span class="line"><span class="comment">// 範例見 [投影片] /** @AccessType() */</span></span><br><span class="line"><span class="comment">// 範例見 [投影片] /** @Accessor() */</span></span><br><span class="line"><span class="comment">// 範例見 [投影片] /**</span></span><br><span class="line"><span class="comment">//              * @VirtualProperty</span></span><br><span class="line"><span class="comment">//              * @???</span></span><br><span class="line"><span class="comment">//              */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>實在太神了，又很多實際範例，請看<a href="https://docs.google.com/presentation/d/1l8O_5UpWGvfe2lhPjSa8CUbCFIPkFohV0HiJGUqAzec/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">投影片</a>，有種相見恨晚的 feel 啊，真是非常感謝 Ricky 大大把私家秘技都拿出來分享給大家，講得又超好，請受閃亮亮一拜。</li>
</ul>
<h2 id="High_Performance_Server__28PHP__u6548_u80FD_Server_-_PPM_29"><a href="#High_Performance_Server__28PHP__u6548_u80FD_Server_-_PPM_29" class="headerlink" title="High Performance Server (PHP 效能 Server - PPM)"></a>High Performance Server (PHP 效能 Server - PPM)</h2><ul>
<li>PPM (PHP Process Manager) <a href="https://github.com/php-pm/php-pm" target="_blank" rel="external">https://github.com/php-pm/php-pm</a></li>
<li><p>用 PHP 寫 Process Manager 比  php-fpm 快 15 倍！？ 真的假的</p>
<ul>
<li>Hot Code Reload 偵測異動</li>
<li>最重要：可以 Support HttpKernel (Symfony, Laravel) 可以用，Code 不用改就能用！</li>
</ul>
</li>
<li><p>Installation</p>
<ul>
<li>先把 Laravel/Symfony 專案建起來</li>
<li><code>composer require php-pm/httpkernel-adapter dev-master</code> 就可以了！真的假的！</li>
<li><code>./vendor/bin/ppm start --bootstrap=laravel --app-env=dev --debug=0 --logging=0 --cgi-path=~/bin/php-cgi</code></li>
<li>需要使用 php-cgi 才行，不能用 php-cli (預設)</li>
</ul>
</li>
<li><p>原理：</p>
<ul>
<li>最底層是用 <code>reactphp/http</code> 搜尋 react php 底層是 event driven 的方式</li>
<li>用 PHP 寫 server，non-block 去除瓶頸</li>
<li><a href="http://jarves.io" target="_blank" rel="external">http://jarves.io</a> 專門寫 API 的一個 framework</li>
</ul>
</li>
<li><p>Issues：</p>
<ul>
<li>PHP 有一些 memory leak 的問題，用 Singleton 方式會有問題，但了不起重啟</li>
<li>目前只有針對 Laravel / Symfony 才行</li>
<li>可以用 NGINX 做轉送，設定見<a href="https://docs.google.com/presentation/d/1l8O_5UpWGvfe2lhPjSa8CUbCFIPkFohV0HiJGUqAzec/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">投影片</a></li>
</ul>
</li>
<li><p>Usage:</p>
<ul>
<li>不建議在 Production 下用，還在開發中</li>
<li>官網也列了一些已知問題，但仍是值得密切關注的一個套件！</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="REST_API_Design"><a href="#REST_API_Design" class="headerlink" title="REST API Design"></a>REST API Design</h2><h3 id="Representatio]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner讀書會 - SOLID 原則(5) Dependency Inversion Principle 依頼反轉原則]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(5)-Dependency-Inversion-Principle/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(5)-Dependency-Inversion-Principle/</id>
    <published>2016-07-19T11:30:03.000Z</published>
    <updated>2016-07-19T06:26:38.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F"><a href="#u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F" class="headerlink" title="過程有問題可到 Laravel 台灣臉書社團 發問"></a>過程有問題可到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laravel 台灣臉書社團</a> 發問</h4><h2 id="u4F9D_u8CF4_u53CD_u8F49_u539F_u5247__28DIP_-_Dependency_Inversion_Principle_29"><a href="#u4F9D_u8CF4_u53CD_u8F49_u539F_u5247__28DIP_-_Dependency_Inversion_Principle_29" class="headerlink" title="依賴反轉原則 (DIP - Dependency Inversion Principle)"></a>依賴反轉原則 (DIP - Dependency Inversion Principle)</h2><ul>
<li>節錄自 Laravel: From Apprentice To Artisan - Advanced Architecture With Laravel 4 書中：</li>
</ul>
<blockquote>
<p>Dependency Inversion principle, it states that high-level code should not depend on low-level code. Instead, high-level code should depend on an abstraction layer that serves as a “middle-man” between the high and low-level code.</p>
</blockquote>
<ul>
<li>依賴反轉原則，「高階的」程式碼不應該依賴於「低階的」程式碼，「高階的」程式碼應當依賴於一個「抽象層」做為「高階」程式碼和「低階」程式碼溝通的「中間人」。</li>
</ul>
<blockquote>
<p>Abstractions should not depend upon details, but rather details should depend upon abstractions.</p>
</blockquote>
<ul>
<li>另一種說法是，「抽象」不應當依賴於「實作細節」，反之，「實作細節」應該依賴於「抽象」</li>
</ul>
<p><br><br><br><br><br></p>
<h3 id="u53CD_u4F8B1_uFF1A_u300C_u62BD_u8C61_u300D_u4F9D_u8CF4_u65BC_u300C_u5BE6_u4F5C_u7D30_u7BC0_u300D"><a href="#u53CD_u4F8B1_uFF1A_u300C_u62BD_u8C61_u300D_u4F9D_u8CF4_u65BC_u300C_u5BE6_u4F5C_u7D30_u7BC0_u300D" class="headerlink" title="反例1：「抽象」依賴於「實作細節」"></a>反例1：「抽象」依賴於「實作細節」</h3><ul>
<li>人開跑車 - <a href="http://www.nadaguides.com/Cars/Body-styles" target="_blank" rel="external">http://www.nadaguides.com/Cars/Body-styles</a></li>
<li>人 – 「抽象」</li>
<li>跑車 – 「實作細節」</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">drive</span><span class="params">(SportsCar <span class="variable">$sportCar</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$sportCar</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SportsCar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        var_dump(<span class="string">'Sport car is running.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$someone</span> = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="variable">$someSportCar</span> = <span class="keyword">new</span> SportsCar();</span><br><span class="line"><span class="variable">$someone</span>-&gt;drive(<span class="variable">$someSportCar</span>);</span><br></pre></td></tr></table></figure>
<h4 id="u9055_u53CD_u4E86_DIP__u539F_u5247_uFF0C_u6240_u4EE5_u7A0B_u5F0F_u5931_u53BB_u5F48_u6027_uFF0C_u4EBA__u53EA_u80FD_u5920_u958B__u8DD1_u8ECA_uFF0C_u4E0D_u80FD_u958B_u5176_u4ED6_u7A2E_u8ECA_u3002"><a href="#u9055_u53CD_u4E86_DIP__u539F_u5247_uFF0C_u6240_u4EE5_u7A0B_u5F0F_u5931_u53BB_u5F48_u6027_uFF0C_u4EBA__u53EA_u80FD_u5920_u958B__u8DD1_u8ECA_uFF0C_u4E0D_u80FD_u958B_u5176_u4ED6_u7A2E_u8ECA_u3002" class="headerlink" title="違反了 DIP 原則，所以程式失去彈性，人 只能夠開 跑車，不能開其他種車。"></a>違反了 DIP 原則，所以程式失去彈性，<strong>人</strong> 只能夠開 <strong>跑車</strong>，不能開其他種車。</h4><blockquote>
<p>那魯宅和肥蛇怎麼辦？逃~~</p>
</blockquote>
<ul>
<li>人 – 「高階」、「抽象」</li>
<li>爸爸 – 「低階」、「實作」</li>
<li>跑車 – 「低階」、「實作」</li>
<li>車 – 「高階」、「抽象」</li>
</ul>
<h4 id="u9AD8_u3001_u4F4E_u968E_u662F_u76F8_u5C0D_u6BD4_u8F03_u4F86_u7684"><a href="#u9AD8_u3001_u4F4E_u968E_u662F_u76F8_u5C0D_u6BD4_u8F03_u4F86_u7684" class="headerlink" title="高、低階是相對比較來的"></a>高、低階是相對比較來的</h4><p><br></p>
<blockquote>
<p>不太明白？沒關係，再舉個更常見實戰的例子</p>
</blockquote>
<p><br><br><br><br><br><br><br></p>
<h3 id="u53CD_u4F8B2_uFF1A_u300C_u62BD_u8C61_u300D_u4F9D_u8CF4_u65BC_u300C_u5BE6_u4F5C_u7D30_u7BC0_u300D_u4E4B_u8CFC_u7269_u8ECA_u7BC4_u4F8B"><a href="#u53CD_u4F8B2_uFF1A_u300C_u62BD_u8C61_u300D_u4F9D_u8CF4_u65BC_u300C_u5BE6_u4F5C_u7D30_u7BC0_u300D_u4E4B_u8CFC_u7269_u8ECA_u7BC4_u4F8B" class="headerlink" title="反例2：「抽象」依賴於「實作細節」之購物車範例"></a>反例2：「抽象」依賴於「實作細節」之購物車範例</h3><ul>
<li>購物車結帳，用信用卡付費</li>
<li>購物車 – 「抽象」、「高階」</li>
<li>信用卡 – 「實作」、「低階」</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(CreditCard <span class="variable">$card</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;calculateAmount(<span class="variable">$this</span>-&gt;items);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$card</span>-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(<span class="variable">$amount</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 執行信用卡付款流程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>這個購物車類別，只能使用信用卡結帳。</li>
<li>購物車類別「依賴於」信用卡類別，高階的<code>購物車</code>依賴於低階的<code>信用卡</code>類別。</li>
</ul>
<p><br><br><br><br><br></p>
<h2 id="u5982_u4F55_u300C_u53CD_u8F49_u300D_u4F9D_u8CF4_u95DC_u4FC2_uFF1F"><a href="#u5982_u4F55_u300C_u53CD_u8F49_u300D_u4F9D_u8CF4_u95DC_u4FC2_uFF1F" class="headerlink" title="如何「反轉」依賴關係？"></a>如何「反轉」依賴關係？</h2><ul>
<li>製作一個「抽象層」，讓「高階」、「低階」都依賴於「抽象層」，舉例：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Payment.php 抽象層</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(<span class="variable">$amount</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<ul>
<li>改寫，讓高階程式「購物車類別<code>ShoppingCart</code>」依賴於「抽象層」<code>Payment</code> 類別</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShoppintCart.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(Payment <span class="variable">$payment</span>)</span> </span>&#123;   <span class="comment">// &lt;---- 這裡改寫</span></span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;calculateAmount(<span class="variable">$this</span>-&gt;items);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$payment</span>-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<ul>
<li>改寫，讓低階實作「信用卡類別<code>CreditCard</code>」也依賴於「抽象層」<code>Payment</code> 類別</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CreditCard.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span> <span class="keyword">implements</span> <span class="title">Payment</span> </span>&#123;  <span class="comment">// &lt;---- 這裡改寫</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(<span class="variable">$amount</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 執行信用卡付款流程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="u4F9D_u8CF4_u53CD_u8F49_u5B8C_u6210_uFF01"><a href="#u4F9D_u8CF4_u53CD_u8F49_u5B8C_u6210_uFF01" class="headerlink" title="依賴反轉完成！"></a>依賴反轉完成！</h4><ul>
<li>好處：可以抽換「抽象層」的實作類別，系統彈性 Up! Up!</li>
<li>遵循 DIP 原則，通常同時也會符合「<a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/">OCP 開放封閉原則</a>」，增加一個付款方式，<code>ShoppingCart</code> 中一行程式碼都不用改，生產力倍增。</li>
<li>舉例：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ATMPayment.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATMPayment</span> <span class="keyword">implements</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(<span class="variable">$amount</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 執行 ATM 付款流程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>搭配「簡單工廠」模式來負責產生 <code>Payment</code> 的低階實作物件</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PaymentFactory.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">choose</span><span class="params">(<span class="variable">$paymentType</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$paymentType</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'ATM'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ATMPayment();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Card'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CreditCard();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkout.php</span></span><br><span class="line"><span class="variable">$cart</span> = <span class="keyword">new</span> ShoppingCart();</span><br><span class="line"><span class="variable">$payment</span> = PaymentFactory::choose(<span class="variable">$_POST</span>[<span class="string">'paymentType'</span>]);</span><br><span class="line"><span class="variable">$cart</span>-&gt;checkout(<span class="variable">$payment</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>好處：如果再增加第三種付款方式，<code>ShoppingCart</code> 類別完全不需要修改！只要在工廠中增加一種 case 就可以了。</li>
<li>壞處：如果 interface <code>Payment</code> 定的不好，或是考慮的不夠通用、沒有延展性，之後要修改介面會很麻煩。</li>
</ul>
<p><br><br><br><br><br></p>
<h3 id="u73FE_u5728_u7684_u4F9D_u8CF4_u95DC_u4FC2_u8B8A_u6210_u2026"><a href="#u73FE_u5728_u7684_u4F9D_u8CF4_u95DC_u4FC2_u8B8A_u6210_u2026" class="headerlink" title="現在的依賴關係變成…"></a>現在的依賴關係變成…</h3><ul>
<li><code>ShoppingCart</code>類別 依賴於 <code>Payment</code></li>
<li><code>CreditCard</code>類別 依賴於 <code>Payment</code></li>
<li><code>ATMPayment</code>類別 也依賴於 <code>Payment</code></li>
<li><code>Payment</code> 做為金流付款的抽象層，定義共同的 API，要結帳就要實作 <code>pay</code> 這隻 API。</li>
</ul>
<blockquote>
<p>註： 單一職責原則，不要把「建立物件」的責任交給 ShoppingCart，會讓你好寫非常多！</p>
</blockquote>
<p><br><br><br><br><br><br><br><br><br></p>
<h2 id="u4F86_u628A_u53CD_u4F8B1__u4E5F_u53CD_u8F49_u904E_u4F86_uFF0C_u63DB_u6210_u8907_u96DC_u4E00_u9EDE_u7684_u60C5_u6CC1"><a href="#u4F86_u628A_u53CD_u4F8B1__u4E5F_u53CD_u8F49_u904E_u4F86_uFF0C_u63DB_u6210_u8907_u96DC_u4E00_u9EDE_u7684_u60C5_u6CC1" class="headerlink" title="來把反例1 也反轉過來，換成複雜一點的情況"></a>來把反例1 也反轉過來，換成複雜一點的情況</h2><ul>
<li>並不是家裡每個人都會開車，只有爸爸、媽媽會開，弟弟不會開車…</li>
<li>假設家中有兩台車，一台 <code>Toyota</code>，另一台 <code>Honda</code>，開的方式都一樣</li>
</ul>
<blockquote>
<p>開始反轉吧！</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">(<span class="variable">$food</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 不重要，就是身為一個人會做的事</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>怎麼用程式表達「爸爸」、「媽媽」會開車，「弟弟」不會呢？</li>
<li>只有需要實作 <code>CanDrive</code> 的 <code>Person</code> 才會依賴於 <code>Car</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(<span class="variable">$key</span>)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(<span class="variable">$speed</span>)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turn</span><span class="params">(<span class="variable">$direction</span>)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">park</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanDrive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">drive</span><span class="params">(Car <span class="variable">$car</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">CanDrive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">drive</span><span class="params">(Car <span class="variable">$car</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$car</span>-&gt;boot(<span class="variable">$this</span>-&gt;carKey);</span><br><span class="line">        <span class="variable">$car</span>-&gt;run(<span class="number">100</span>);</span><br><span class="line">        <span class="variable">$car</span>-&gt;run(<span class="number">20</span>);</span><br><span class="line">        <span class="variable">$car</span>-&gt;turn(<span class="string">'left'</span>);</span><br><span class="line">        <span class="variable">$car</span>-&gt;park();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YoungBrother</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 略，沒有 drive 的能力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<ul>
<li>現在來看怎麼讓車子的實作依賴於「抽象」<code>Car</code> 介面</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(<span class="variable">$key</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(<span class="variable">$speed</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turn</span><span class="params">(<span class="variable">$direction</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">park</span><span class="params">()</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Honda</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(<span class="variable">$key</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(<span class="variable">$speed</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turn</span><span class="params">(<span class="variable">$direction</span>)</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">park</span><span class="params">()</span> </span>&#123; <span class="comment">/* 略… */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br><br><br></p>
<ul>
<li>但如果爸爸是回到未來裡的博士，發明的車子可以做時光旅行…</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeTravelCar</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(<span class="variable">$key</span>)</span> </span>&#123; <span class="comment">/* 略... */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(<span class="variable">$speed</span>)</span> </span>&#123; <span class="comment">/* 略... */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turn</span><span class="params">(<span class="variable">$direction</span>)</span> </span>&#123; <span class="comment">/* 略... */</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">park</span><span class="params">()</span> </span>&#123; <span class="comment">/* 略... */</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除了基本功能，還可以做時光旅行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTravel</span><span class="params">(<span class="variable">$year</span>, <span class="variable">$month</span>, <span class="variable">$day</span>, <span class="variable">$time</span>)</span> </span>&#123; <span class="comment">/* 略... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br><br><br></p>
<h3 id="u898B_u4E0B_u65B9_u7A0B_u5F0F_u78BC_uFF0C_u9019_u6A23_u5BEB_u53EF_u4E0D_u53EF_u4EE5_uFF1F"><a href="#u898B_u4E0B_u65B9_u7A0B_u5F0F_u78BC_uFF0C_u9019_u6A23_u5BEB_u53EF_u4E0D_u53EF_u4EE5_uFF1F" class="headerlink" title="見下方程式碼，這樣寫可不可以？"></a>見下方程式碼，這樣寫可不可以？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTravel</span><span class="params">(Car <span class="variable">$timeTravelCar</span>, <span class="variable">$dateObj</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$timeTravelCar</span>-&gt;timeTravel(<span class="variable">$dateObj</span>-&gt;year, <span class="variable">$dateObj</span>-&gt;month, <span class="variable">$dateObj</span>-&gt;day, <span class="variable">$dateObj</span>-&gt;time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$specialCar</span> = <span class="keyword">new</span> TimeTravelCar();</span><br><span class="line"><span class="variable">$father</span> = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="variable">$father</span>-&gt;timeTravel(<span class="variable">$specialCar</span>, <span class="keyword">new</span> MarriageDate(<span class="string">"2013-09-20 12:00:00"</span>));</span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br><br><br></p>
<font size="+2"><br>- 以程式語法上來說是會通過的，但這是因為 PHP 是「弱型別」語言<br>- <strong>試想，如果是「強型別」的語言的話…</strong><br></font>

<p><br><br><br><br><br><br><br><br><br></p>
<h4 id="u9019_u9023_Compile__u90FD_u4E0D_u6703_u904E_uFF0C_u56E0_u70BA_Car__u4ECB_u9762_u4E2D_uFF0C_u4E26_u6C92_u6709_u4E00_u500B_u53EB_timeTravel_28_29__u7684_u65B9_u6CD5_uFF01"><a href="#u9019_u9023_Compile__u90FD_u4E0D_u6703_u904E_uFF0C_u56E0_u70BA_Car__u4ECB_u9762_u4E2D_uFF0C_u4E26_u6C92_u6709_u4E00_u500B_u53EB_timeTravel_28_29__u7684_u65B9_u6CD5_uFF01" class="headerlink" title="這連 Compile 都不會過，因為 Car 介面中，並沒有一個叫 timeTravel() 的方法！"></a>這連 Compile 都不會過，因為 <code>Car</code> 介面中，並沒有一個叫 <code>timeTravel()</code> 的方法！</h4><p><br><br><br><br><br><br><br><br><br></p>
<ul>
<li>那怎麼辦？老爸自己辛苦製造的時光車就不能開了嗎？</li>
<li>解：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CanTimeTravel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTravel</span><span class="params">(TimeTravelCar <span class="variable">$specialCar</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Parent</span> <span class="keyword">implements</span> <span class="title">CanTimeTravel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTravel</span><span class="params">(TimeTravelCar <span class="variable">$specialCar</span>, <span class="variable">$dateObj</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$specialCar</span>-&gt;timeTravel(<span class="variable">$dateObj</span>-&gt;year, <span class="variable">$dateObj</span>-&gt;month, <span class="variable">$dateObj</span>-&gt;day, <span class="variable">$dateObj</span>-&gt;time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>沒錯，這邊「違反了<code>依賴反轉原則</code>」，但我是有個好理由去違反的，<code>TimeTravelCar</code> 這種車是獨一無二的，它在平時和一般車無異，但在進行時光旅行<code>timeTravel</code> 的時候，我百分百肯定這是無法抽換成別的一般車，所以這邊閃亮亮覺得可以不需要再提取 interface。</li>
<li>當然，如果你還是想按照教科書教的方式，給 <code>TimeTravelCar</code> 一個自己的「抽象層」也不是不行，但閃亮亮會覺得這樣就有點「過度設計(over-design)」了</li>
</ul>
<h2 id="u66F8_u4E2D_u7BC4_u4F8B_u89E3_u8AAA"><a href="#u66F8_u4E2D_u7BC4_u4F8B_u89E3_u8AAA" class="headerlink" title="書中範例解說"></a>書中範例解說</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authenticator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(DatabaseConnection <span class="variable">$db</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;db-&gt;exec(<span class="string">'select * from users where id = ?'</span>, <span class="keyword">array</span>(<span class="variable">$id</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">(<span class="variable">$credentials</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Authenticate the user...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>誰是「高階」程式碼？ 誰是「低階」程式碼？</li>
<li>這個範例有符合 DIP 原則嗎？</li>
</ul>
<h3 id="u600E_u9EBC_u89E3_uFF1F__u7576_u56DE_u5BB6_u4F5C_u696D_u7DF4_u7FD2_u770B_u770B_u5427_7E_7E_7E"><a href="#u600E_u9EBC_u89E3_uFF1F__u7576_u56DE_u5BB6_u4F5C_u696D_u7DF4_u7FD2_u770B_u770B_u5427_7E_7E_7E" class="headerlink" title="怎麼解？ 當回家作業練習看看吧~~~"></a>怎麼解？ 當回家作業練習看看吧~~~</h3><ul>
<li>真的拿書來看啊~ 解答就在上面</li>
<li>才兩、三頁而已，練練英文閱讀吧，用字都不難。</li>
</ul>
<p><br><br><br><br><br><br><br><br><br></p>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>到了本書的最後一個章節，總算是把 SOLID 全部介紹完了，如果這次範例的程式碼對你太過「抽象」，沒關係，把 SOLID 的前面 4 式練好，你自然就會練成第 5 式「依賴反轉原則」，詳見星爺電影&lt;&lt;武狀元蘇乞兒&gt;&gt;。閃亮亮覺得遵循 <code>DIP 依賴反轉原則</code>，是最容易寫出具備<code>高度彈性</code>、<code>高可測試性</code>的程式碼，話說回來，也比較麻煩一些。我是指，如果你是新手，對編輯器的操作還不熟，光是開 interface、每個職責建一個 class，在不同檔案間切換的操作等等都是用滑鼠來點擊的話。那我想 DIP 離你還很遠，主要是因為搞這些太累了。先找一個好用的工具，如 <code>PhpStorm</code>、<code>Sublime Text</code> 練熟操作之後再說。</p>
<p>閃亮亮覺得 DIP 原則，是嚴格遵循 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/">OCP 開放封閉原則</a> 會得到的必然結果，平時也沒特別在留意自己的 Code 有沒有符合，但會不斷的檢視自己的 Code 是否能夠在應付變化之下，只要修改一個小小的部份就能支援可能新的需求，也要避免 over design。套一句鐵哥(大澤木小鐵)說的：「為明天的需求設計，但不要為明年的設計」，共勉之~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F"><a href="#u904E_u7A0B_u6709_u55]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test Corner 講座#4 - Proko談Mobile App Testing@極客窩]]></title>
    <link href="http://blog.dj1020.net/Test-Corner-%E8%AC%9B%E5%BA%A7-4-Proko%E8%AB%87Mobile_App_Testing@%E6%A5%B5%E5%AE%A2%E7%AA%A9/"/>
    <id>http://blog.dj1020.net/Test-Corner-講座-4-Proko談Mobile_App_Testing@極客窩/</id>
    <published>2016-06-21T13:15:16.000Z</published>
    <updated>2016-06-21T13:34:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mobile_App_Testing_-_Proko@CloudMosa"><a href="#Mobile_App_Testing_-_Proko@CloudMosa" class="headerlink" title="Mobile App Testing - Proko@CloudMosa"></a>Mobile App Testing - Proko@CloudMosa</h1><ul>
<li>HTC 8年</li>
<li>3 年 CloudMosa</li>
</ul>
<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><ul>
<li>Before Testing: Test Sample</li>
<li>Test Coverage:<ul>
<li>Basic Function</li>
<li>Compatibility</li>
<li>Integration</li>
<li>Stress</li>
<li>Power Consumption</li>
</ul>
</li>
<li>Q&amp;A</li>
</ul>
<h2 id="Before_Testing_-_Test_Sample"><a href="#Before_Testing_-_Test_Sample" class="headerlink" title="Before Testing - Test Sample"></a>Before Testing - Test Sample</h2><ul>
<li>不同 type<ul>
<li>png, jpeg, bmp</li>
<li>mp3, wav, aiff</li>
</ul>
</li>
<li>Different Size<ul>
<li>0 bytes ~ very big size</li>
</ul>
</li>
<li>Different Env<ul>
<li>Camera: yellow light(對著太陽拍就Crash), sparkled item, colorful item(教堂玻璃拍了就Crash)</li>
<li>Internet: metallic box, 2G/3G/4G SIM, VPN account</li>
</ul>
</li>
<li>黑師傅鐵罐可以完全隔訊號</li>
</ul>
<h2 id="Device_Precondition"><a href="#Device_Precondition" class="headerlink" title="Device Precondition"></a>Device Precondition</h2><ul>
<li>Create dates on devices under testing (DUT)<ul>
<li>一定要很多照片</li>
<li>很多 SMS</li>
<li>登入 mail accounts</li>
<li>Messenger: Line, WhatsApp, FB messenger</li>
</ul>
</li>
</ul>
<h2 id="Basic_Function"><a href="#Basic_Function" class="headerlink" title="Basic Function"></a>Basic Function</h2><ul>
<li>UI check</li>
<li>邊界</li>
<li>記憶體釋放</li>
<li>Error Handling</li>
<li>安裝/反安裝，儲存至SD卡(像印度人的一定會買很大的SD卡來裝APP, move to sd, move back from sd)</li>
</ul>
<h3 id="u5B89_u5168_u6027_u975E_u5E38_u76F8_u95DC_uFF0C_u5F71_u97FF_u516C_u53F8_u540D_u8B7D"><a href="#u5B89_u5168_u6027_u975E_u5E38_u76F8_u95DC_uFF0C_u5F71_u97FF_u516C_u53F8_u540D_u8B7D" class="headerlink" title="安全性非常相關，影響公司名譽"></a>安全性非常相關，影響公司名譽</h3><ul>
<li>使用者資料保存(極重要！)</li>
<li>重啟</li>
<li>清除App資料</li>
<li>清除整台機器的資料(資料還是有可能會存著)</li>
</ul>
<h2 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h2><h3 id="Different_Devices"><a href="#Different_Devices" class="headerlink" title="Different Devices"></a>Different Devices</h3><ul>
<li>Device:<ul>
<li>iOS:<ul>
<li>iPad: iPad2</li>
<li>iPad with Retina: iPad3 or iPad4</li>
<li>iPad with split function: iPad air2, iPad Pro</li>
<li>iPhone (特別注意 5 和 5s)</li>
<li>Device with 3D touch</li>
</ul>
</li>
<li>Android<ul>
<li>Tablet / Phone</li>
<li>Device with Pen and Keyboard</li>
</ul>
</li>
</ul>
</li>
<li>Different devices test on Cloud: AWS free 250mins (上傳 ipa 或 apk) 可以測</li>
</ul>
<h3 id="Different_OS_version"><a href="#Different_OS_version" class="headerlink" title="Different OS version"></a>Different OS version</h3><ul>
<li>iOS<ul>
<li>5~6</li>
<li>7 (扁平化)</li>
<li>8~9 (有些7可以跑，8會掛)</li>
<li>10</li>
</ul>
</li>
<li><p>Android</p>
<ul>
<li>4.4</li>
<li>5.0</li>
<li>6.0</li>
</ul>
</li>
<li><p>7月開始會有 beta version test (Jul.~Sep.)</p>
</li>
</ul>
<h2 id="Integration_3A_Internet"><a href="#Integration_3A_Internet" class="headerlink" title="Integration: Internet"></a>Integration: Internet</h2><ul>
<li>Normal connection</li>
<li>Weak signal 電梯裡面測</li>
<li>飛航模式測試</li>
<li>沒訊號的測試 (丟進黑師傅)</li>
<li>VPN</li>
<li>正在 connection, loading 資料時</li>
<li><p>Proxy (ex: auto proxy 的設定值為空時)</p>
</li>
<li><p>Facebook Augmented Traffic Control (ATC):</p>
</li>
<li>iOS Developer Network Link Conditioner (推薦)</li>
</ul>
<h2 id="Integration_3A_Keyboard"><a href="#Integration_3A_Keyboard" class="headerlink" title="Integration: Keyboard"></a>Integration: Keyboard</h2><ul>
<li>自製輸入法要特別測會不會 crash</li>
<li>藍芽鍵盤</li>
<li>Split Keyboard</li>
<li>iOS 8 可以自製輸入法了</li>
</ul>
<h2 id="Integration_3A_Other_Apps_u2019_funcitons"><a href="#Integration_3A_Other_Apps_u2019_funcitons" class="headerlink" title="Integration: Other Apps’ funcitons"></a>Integration: Other Apps’ funcitons</h2><ul>
<li>最重要是測電話進來 App 不能掛</li>
<li>Alarm</li>
<li>Voice Assistant</li>
<li>Album</li>
<li>Camera</li>
</ul>
<p>…</p>
<h2 id="Stress__u58D3_u529B_u6E2C_u8A66"><a href="#Stress__u58D3_u529B_u6E2C_u8A66" class="headerlink" title="Stress 壓力測試"></a>Stress 壓力測試</h2><ul>
<li>MTBF</li>
<li>Monkey Test:<ul>
<li>Monkey script for Android: link ppt</li>
<li>Monkey script for iOS: link in ppt</li>
</ul>
</li>
</ul>
<h2 id="Power_Consumption__u96FB_u529B_u6E2C_u8A66"><a href="#Power_Consumption__u96FB_u529B_u6E2C_u8A66" class="headerlink" title="Power Consumption 電力測試"></a>Power Consumption 電力測試</h2><ul>
<li>純做 App 要測 Power 有點不合成本</li>
<li>和類似的 App 做對比</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mobile_App_Testing_-_Proko@CloudMosa"><a href="#Mobile_App_Testing_-_Proko@CloudMosa" class="headerlink" title="Mobile App Testing -]]>
    </summary>
    
      <category term="Test Corner" scheme="http://blog.dj1020.net/tags/Test-Corner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test Corner 講座#4 - Jersey談Calcbash, Cucumber@極客窩]]></title>
    <link href="http://blog.dj1020.net/Test-Corner-%E8%AC%9B%E5%BA%A7-4-Jersey%E8%AB%87Cucumber@%E6%A5%B5%E5%AE%A2%E7%AA%A9/"/>
    <id>http://blog.dj1020.net/Test-Corner-講座-4-Jersey談Cucumber@極客窩/</id>
    <published>2016-06-21T12:35:16.000Z</published>
    <updated>2016-06-21T13:09:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Calabash_-_Jersey@KKStream"><a href="#Calabash_-_Jersey@KKStream" class="headerlink" title="Calabash - Jersey@KKStream"></a>Calabash - Jersey@KKStream</h1><h2 id="BDD__u548C_TDD__u7684_u4E0D_u540C_u4E4B_u8655"><a href="#BDD__u548C_TDD__u7684_u4E0D_u540C_u4E4B_u8655" class="headerlink" title="BDD 和 TDD 的不同之處"></a>BDD 和 TDD 的不同之處</h2><ul>
<li>BDD 從實際需求層面思考實作</li>
<li><p>TDD 從測試層面思考實作</p>
</li>
<li><p>Matt 談 agile BDD 的影片連結？</p>
</li>
</ul>
<h2 id="Cucumber"><a href="#Cucumber" class="headerlink" title="Cucumber"></a>Cucumber</h2><blockquote>
<p>Simple, human collaboration</p>
<ul>
<li>Cucumber Website</li>
</ul>
</blockquote>
<ul>
<li>目的在促進團隊的溝通合作</li>
<li>被廣泛的錯誤使用，Cucumber 不是只拿來自動化測試用的。</li>
<li>Business Goal &lt;–&gt; User Story &lt;–&gt; Scenario &lt;–&gt; Executable Spec</li>
</ul>
<h3 id="QA__u53EF_u4EE5_u5E6B_u52A9_u4EC0_u9EBC"><a href="#QA__u53EF_u4EE5_u5E6B_u52A9_u4EC0_u9EBC" class="headerlink" title="QA 可以幫助什麼"></a>QA 可以幫助什麼</h3><ul>
<li>驗收標準交給 QA 來寫</li>
<li>寫成 executable spec</li>
</ul>
<h2 id="Calabash"><a href="#Calabash" class="headerlink" title="Calabash"></a>Calabash</h2><ul>
<li>一個 framework 可以使用 Cucumber 格式在 iOS / Android 上跑自動化測試</li>
</ul>
<h2 id="Calabash_+_Cucumber"><a href="#Calabash_+_Cucumber" class="headerlink" title="Calabash + Cucumber"></a>Calabash + Cucumber</h2><ul>
<li>類似 Mink 的做法</li>
</ul>
<h2 id="Q_26amp_3BA"><a href="#Q_26amp_3BA" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul>
<li>如何導入 Cucumber？<ul>
<li>轉換過程大量溝通，使用更 high level 的檢查方式</li>
</ul>
</li>
<li>如何對 Executable Spec 版本控制？<ul>
<li>Git 放 source code 到目標機拉下來打包跑測試</li>
</ul>
</li>
<li>誰寫？ Developer / PM / QA<ul>
<li>目前是 QA 寫全部</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Calabash_-_Jersey@KKStream"><a href="#Calabash_-_Jersey@KKStream" class="headerlink" title="Calabash - Jersey@KKStream"></a>Calabash]]>
    </summary>
    
      <category term="Test Corner" scheme="http://blog.dj1020.net/tags/Test-Corner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test Corner 講座#4 - INTER-APP COMMUNICATIONS AT iCHEF QUALITY ENGINEERING]]></title>
    <link href="http://blog.dj1020.net/Test-Corner-%E8%AC%9B%E5%BA%A7-4-Edward%E8%AB%87INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING@%E6%A5%B5%E5%AE%A2%E7%AA%A9/"/>
    <id>http://blog.dj1020.net/Test-Corner-講座-4-Edward談INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING@極客窩/</id>
    <published>2016-06-21T11:38:16.000Z</published>
    <updated>2016-06-21T12:33:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING_-_Edward"><a href="#INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING_-_Edward" class="headerlink" title="INTER-APP COMMUNICATIONS AT iCHEF QUALITY ENGINEERING - Edward"></a>INTER-APP COMMUNICATIONS AT iCHEF QUALITY ENGINEERING - Edward</h1><h2 id="u8AC7_POS__u7CFB_u7D71_uFF0C_u591A_iPad__u9593_inner-app__u4E92_u52D5"><a href="#u8AC7_POS__u7CFB_u7D71_uFF0C_u591A_iPad__u9593_inner-app__u4E92_u52D5" class="headerlink" title="談 POS 系統，多 iPad 間 inner-app 互動"></a>談 POS 系統，多 iPad 間 inner-app 互動</h2><ul>
<li>多台 iPad 同時測試系統</li>
</ul>
<h2 id="u5982_u4F55_u900F_u904E_u81EA_u52D5_u5316_u4F86_u9032_u884C_u5169_u53F0_iPad__u5404_u81EA_u7684_u52D5_u4F5C"><a href="#u5982_u4F55_u900F_u904E_u81EA_u52D5_u5316_u4F86_u9032_u884C_u5169_u53F0_iPad__u5404_u81EA_u7684_u52D5_u4F5C" class="headerlink" title="如何透過自動化來進行兩台 iPad 各自的動作"></a>如何透過自動化來進行兩台 iPad 各自的動作</h2><ul>
<li>以 login method + 點餐為例</li>
</ul>
<h2 id="u5982_u4F55_u900F_u904E_CI__28Jenkins_29__u9054_u5230_u4E92_u52D5_u5F0F_u6E2C_u8A66"><a href="#u5982_u4F55_u900F_u904E_CI__28Jenkins_29__u9054_u5230_u4E92_u52D5_u5F0F_u6E2C_u8A66" class="headerlink" title="如何透過 CI (Jenkins) 達到互動式測試"></a>如何透過 CI (Jenkins) 達到互動式測試</h2><h2 id="u9047_u5230_u7684_u554F_u984C_u984C_u2026"><a href="#u9047_u5230_u7684_u554F_u984C_u984C_u2026" class="headerlink" title="遇到的問題題…"></a>遇到的問題題…</h2><ul>
<li><p>Server /Client 登入或是換店行為是有順序及規則性的</p>
<ul>
<li>Web 上設定一台 iPad 當 Server 主機</li>
<li>其他 iPad 為 Client</li>
<li>Client 登入 Server</li>
</ul>
</li>
<li><p>Uber Challenge of Cross-Application/Device Testing (flow chart)</p>
<ul>
<li>Driver</li>
<li>Rider</li>
<li>Backend (用 backend 來控制順序)</li>
</ul>
</li>
<li><p>Firebase : 有一個即時 DB 的概念，利用 Firebase 當做 Backend</p>
<ul>
<li>Web Site: 設 iPad A 為主機</li>
<li>A signal B: B 為 client</li>
<li>A …</li>
<li>A request Backend</li>
<li>Backend signal B</li>
</ul>
</li>
<li><p>用 selenium 打 web site 去設定 iPad A 為主機</p>
</li>
<li>iPad A 登入後就知道自己是主機</li>
</ul>
<h2 id="u7528_u5230_u7684_u5DE5_u5177"><a href="#u7528_u5230_u7684_u5DE5_u5177" class="headerlink" title="用到的工具"></a>用到的工具</h2><ul>
<li>Selenium</li>
<li>TestNG -&gt; 控制 trigger 下一隻 test script</li>
<li>Evney??</li>
<li>ExtentReports</li>
<li>TestReal??</li>
</ul>
<h2 id="u5EFA_CI__u5F8C_u5F80_CD__u524D_u9032"><a href="#u5EFA_CI__u5F8C_u5F80_CD__u524D_u9032" class="headerlink" title="建 CI 後往 CD 前進"></a>建 CI 後往 CD 前進</h2><ul>
<li>窮人式的 CD 方式</li>
<li>自動包 .ipa 自動安裝到 device</li>
<li>5月底 TVBS 採訪</li>
<li>Commit stage(compile, unit testing) -&gt; Acceptance Testing -&gt; Non-functional Testing</li>
<li>Non-functional?? 測什麼？<ul>
<li>Monkey Test</li>
<li>12 hours 可以 no crash</li>
<li>Keep crazy</li>
<li>Avoid dead loop</li>
<li>Trigger touch per 500ms</li>
<li>tap, drag, 把權限管理都先關掉</li>
</ul>
</li>
</ul>
<h2 id="u9084_u8981_u52AA_u529B_u7684_u65B9_u5411"><a href="#u9084_u8981_u52AA_u529B_u7684_u65B9_u5411" class="headerlink" title="還要努力的方向"></a>還要努力的方向</h2><ul>
<li>完善的 Pipeline 設計</li>
<li>儘快能交付到 End user 手上</li>
</ul>
<h2 id="u95DC_u9375_Key_Point"><a href="#u95DC_u9375_Key_Point" class="headerlink" title="關鍵 Key Point"></a>關鍵 Key Point</h2><ul>
<li>Someone shoule be notified if test failed !!!</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING_-_Edward"><a href="#INTER-APP_COMMUNICATIONS_AT_iCHEF_QUALITY_ENGINEERING_-_Ed]]>
    </summary>
    
      <category term="Test Corner" scheme="http://blog.dj1020.net/tags/Test-Corner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner讀書會 - SOLID 原則(4) Interface Segregation Principle]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(4)-Interface-Segregation-Principle/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(4)-Interface-Segregation-Principle/</id>
    <published>2016-06-14T11:30:03.000Z</published>
    <updated>2016-06-18T07:12:04.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F"><a href="#u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F" class="headerlink" title="過程有問題可到 Laravel 台灣臉書社團 發問"></a>過程有問題可到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laravel 台灣臉書社團</a> 發問</h4><h2 id="u4ECB_u9762_u9694_u96E2_u539F_u5247__28ISP_-_Interface_Segragation_Principle_29"><a href="#u4ECB_u9762_u9694_u96E2_u539F_u5247__28ISP_-_Interface_Segragation_Principle_29" class="headerlink" title="介面隔離原則 (ISP - Interface Segragation Principle)"></a>介面隔離原則 (ISP - Interface Segragation Principle)</h2><p>ISP, Interface Segregation Principle 介面隔離原則，講的概念很簡單，就是實作該介面的類別，不應該實作「不需要的 API 方法」，什麼情況會造成介面中定義了「不需要的 API 方法」？以書中的例子來說：</p>
<p>Ref: <a href="http://php.net/manual/en/class.sessionhandlerinterface.php" target="_blank" rel="external">http://php.net/manual/en/class.sessionhandlerinterface.php</a></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SessionHandlerInterface &#123;</span><br><span class="line">    <span class="comment">/* API 方法 */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> bool close ( void )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> bool destroy ( string <span class="variable">$session_id</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> bool gc ( int <span class="variable">$maxlifetime</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> bool open ( string <span class="variable">$save_path</span> , string <span class="variable">$name</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> string read ( string <span class="variable">$session_id</span> )</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> bool write ( string <span class="variable">$session_id</span> , string <span class="variable">$session_data</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你試著用 <strong>Memcached</strong> 來實作這個 <code>SessionHandlerInterface</code> 你會發現你有大半的 API 方法都不需要實作，例如你根本不會需要 <code>open</code> 和 <code>close</code>，另外 <strong>Memcached</strong> 會自動丟棄過期的儲存值，所以你也不需要實作 <code>gc</code> 方法，會造成你為了要符合這樣的 interface 設計，你需要做很多個「空實作(stubs)」來滿足語法條件，但其實這些「空實作(stubs)」出來的方法，根本不會被呼叫到，或是就算被呼叫也不需要執行任何指令。如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MemcachedSessionHandler implements SessionHandlerInterface &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span> <span class="params">( void )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 空實作，Just do nothing here.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gc</span> <span class="params">( int <span class="variable">$maxlifetime</span> )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 空實作，Just do nothing here.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span> <span class="params">( string <span class="variable">$save_path</span> , string <span class="variable">$name</span> )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 空實作，Just do nothing here.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 後略…</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此就是違反了 ISP 的原則。</p>
<p><br></p>
<blockquote>
<font size="+2">實作一個 interface 時，每個 API 方法應該都會需要被使用，換句話說，不該有空實作的產生</font>

</blockquote>
<p><br></p>
<h3 id="u600E_u9EBC_u907F_u514D_u300C_u7A7A_u5BE6_u4F5C_u300D_u5462_uFF1F"><a href="#u600E_u9EBC_u907F_u514D_u300C_u7A7A_u5BE6_u4F5C_u300D_u5462_uFF1F" class="headerlink" title="怎麼避免「空實作」呢？"></a>怎麼避免「空實作」呢？</h3><p>避免的方法就是把介面「隔離」出來，所以才叫做「介面隔離原則」。以上面 Memcached 的例子來說，GC (garbage collection 一種記憶體管理回收機制) 是不需要的實作，我們可以讓 <code>gc</code> 方法從 <code>SessionHandlerInterface</code> 中隔離出來成另一個獨立的 interface：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GarbageCollectorInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> gc( int <span class="variable">$maxlifetime</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此，利用 PHP 語言一個類別可以實作多個介面的特性，如果是有需要處理 GC 的實作，才需要實作 <code>GarbageCollectorInterface</code> 這一介面(interface)，做到介面隔離，以符合 ISP 原則。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSessionHandler</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title">SessionHandlerInterface</span>, <span class="title">GarbageCollectorInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gc</span><span class="params">(<span class="variable">$maxlifetime</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略 …</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemcachedSessionHandler</span> <span class="keyword">implements</span> <span class="title">SessionHandlerInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要 gc 方法實作，略 …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ISP__u9055_u53CD_u4E86_u6703_u600E_u6A23_u55CE_uFF1F"><a href="#ISP__u9055_u53CD_u4E86_u6703_u600E_u6A23_u55CE_uFF1F" class="headerlink" title="ISP 違反了會怎樣嗎？"></a>ISP 違反了會怎樣嗎？</h3><p>通常違反了 ISP 就表示你定義的 interface 承擔了太多的職責，也就同時違反了 SRP (單一職責原則)，容易出現萬能類別或是萬能介面。</p>
<pre style="font-size: 1.2em">
* 擁有過多 API 方法的介面易模糊類別的職責，其重用性會變差
* 容易造成類別間的耦合
  * 製造不必要的複雜度，例如我明明呼叫了某個介面方法，結果卻是空實作？
    </pre>

<p>話說好的 API 帶你上天堂，壞的 API 帶你住套房，就是這道理啊~</p>
<h2 id="u6848_u4F8B2_-_PasswordReminder__u5BC4_u5BC6_u78BC_u904E_u671F_u66F4_u63DB_u901A_u77E5_u4FE1"><a href="#u6848_u4F8B2_-_PasswordReminder__u5BC4_u5BC6_u78BC_u904E_u671F_u66F4_u63DB_u901A_u77E5_u4FE1" class="headerlink" title="案例2 - PasswordReminder 寄密碼過期更換通知信"></a>案例2 - PasswordReminder 寄密碼過期更換通知信</h2><p>如果你有一個 <code>Contact</code> 繼承了 <code>Eloquent</code> 類別如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNameAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;attributes[<span class="string">'name'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmailAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;attributes[<span class="string">'email'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，你有一個 <code>PasswordReminder</code> 類別是用來寄送密碼過期更換通知信的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(Contact <span class="variable">$contact</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寄出通知信 Email 給 $contact 代表的聯絡人</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="variable">$contact</span>-&gt;getEmailAttribute(),</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u6848_u4F8B2_u8A0E_u8AD6_3A__u9019_u6A23_u7684_u5BE6_u4F5C_u6709_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#u6848_u4F8B2_u8A0E_u8AD6_3A__u9019_u6A23_u7684_u5BE6_u4F5C_u6709_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="案例2討論: 這樣的實作有什麼問題？"></a>案例2討論: 這樣的實作有什麼問題？</h2><p>不一定單從 ISP 的角度思考，回想 SOILD 中的每個原則。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h4 id="u554F_u984C1_uFF1APasswordReminder__u548C_Eloquent__u7684_u8026_u5408_u554F_u984C"><a href="#u554F_u984C1_uFF1APasswordReminder__u548C_Eloquent__u7684_u8026_u5408_u554F_u984C" class="headerlink" title="問題1：PasswordReminder 和 Eloquent 的耦合問題"></a><strong>問題1</strong>：<code>PasswordReminder</code> 和 <code>Eloquent</code> 的耦合問題</h4><p>這樣的 TypeHinting 會使得用 <code>remind</code> 方法來寄信時，都一定要傳入一個繼承 <code>Eloquent</code> 的 <code>Contact</code> 物件，難道你只有 <code>Contact</code> 需要使用到 <code>PasswordReminder</code> 嗎？你會不會有 <code>User</code> 類別也需要 PasswordReminder 的功能？這裡卻只能傳 <code>Contact</code></p>
<p>又或是，你有另一個 <code>CompanyContact</code> 的實作並不打算使用 <code>Eloquent</code> 做為 ORM，造成你要改 Code 才能讓 <code>remind</code> 方法的 type hinting 才可以同時支援 <code>Contact</code> 及 <code>CompanyContact</code> 兩種類別，這就違反了 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/">OCP 開放封閉原則</a> 造成維護上的困難。<br><br></p>
<h3 id="u554F_u984C2_uFF1A_u66DD_u9732_u904E_u591A_u7D30_u7BC0_28knowledge_29__u7D66_PasswordReminder_uFF0C_u9055_u53CD_u6700_u5C0F_u77E5_u8B58_u539F_u5247__28Law_of_Demeter_29"><a href="#u554F_u984C2_uFF1A_u66DD_u9732_u904E_u591A_u7D30_u7BC0_28knowledge_29__u7D66_PasswordReminder_uFF0C_u9055_u53CD_u6700_u5C0F_u77E5_u8B58_u539F_u5247__28Law_of_Demeter_29" class="headerlink" title="問題2：曝露過多細節(knowledge) 給 PasswordReminder，違反最小知識原則 (Law of Demeter)"></a><strong>問題2</strong>：曝露過多細節(knowledge) 給 <code>PasswordReminder</code>，違反最小知識原則 (Law of Demeter)</h3><p>以這簡單例子來看，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(Contact <span class="variable">$contact</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寄出通知信 Email 給 $contact 代表的聯絡人</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="variable">$contact</span>-&gt;getEmailAttribute(),</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其實 <code>remind</code> 只需要用到 <code>getEmailAttribute()</code> 來取得 Email 而已，卻把整個 <code>Contact</code> 物件傳入，如果你熟悉 eloquent 的使用，可以想想看要是有人在 <code>remind</code> 裡改動 <code>$contact</code> 的屬性還執行了 <code>$contact-&gt;save()</code> 會發生什麼情況 ……</p>
<h4 id="u554F_u984C3_uFF1A_u9055_u53CD_ISP__u539F_u5247_uFF01__u4EC0_u9EBC_uFF1F_u9019_u88E1_u53C8_u6C92_u6709_u5B9A_u7FA9_interface__u600E_u9EBC_u9055_u53CD_ISP_uFF1F"><a href="#u554F_u984C3_uFF1A_u9055_u53CD_ISP__u539F_u5247_uFF01__u4EC0_u9EBC_uFF1F_u9019_u88E1_u53C8_u6C92_u6709_u5B9A_u7FA9_interface__u600E_u9EBC_u9055_u53CD_ISP_uFF1F" class="headerlink" title="問題3：違反 ISP 原則！ 什麼？這裡又沒有定義 interface 怎麼違反 ISP？"></a><strong>問題3</strong>：違反 ISP 原則！ 什麼？這裡又沒有定義 interface 怎麼違反 ISP？</h4><p>請不要把 ISP 原則當成只有使用 interface 時才會碰到，這裡對 <code>PasswordReminder</code> 來說 <code>Contact</code> 這個類別中的所有 public 方法就是一種 interface，你唯一只使用了 <code>Contact</code> 中的 <code>getEmailAttribute()</code> API 來取得 Email，但卻把整個 <code>Contact</code> 的 public 方法群都曝露給 <code>PasswordReminder</code>。</p>
<h2 id="u6848_u4F8B2__u600E_u9EBC_u89E3_uFF1F__u4E4B_u4E00"><a href="#u6848_u4F8B2__u600E_u9EBC_u89E3_uFF1F__u4E4B_u4E00" class="headerlink" title="案例2 怎麼解？ 之一"></a>案例2 怎麼解？ 之一</h2><p>要解決這些問題，有一個很簡單的方法：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 呼叫時直接傳入 Contact 的 Email 就好了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(<span class="variable">$email</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="variable">$email</span>,</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我只是要 Email 而已嘛，幹嘛傳整個 <code>Contact</code> 物件給我？！書上的教的作法只是脫褲子放屁而已嗎？我在呼叫時傳入 Email 不就好了。</p>
<h2 id="u6848_u4F8B2__u600E_u9EBC_u89E3_uFF1F__u4E4B_u4E8C_28_u66F8_u4E2D_u7BC4_u4F8B_29"><a href="#u6848_u4F8B2__u600E_u9EBC_u89E3_uFF1F__u4E4B_u4E8C_28_u66F8_u4E2D_u7BC4_u4F8B_29" class="headerlink" title="案例2 怎麼解？ 之二(書中範例)"></a>案例2 怎麼解？ 之二(書中範例)</h2><p>我們先把唯一一個 <code>PasswordReminder</code> 需要用的 API 方法用介面隔離出來：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RemindableInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderEmail</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>讓 <code>Contact</code> 實作(implements) <code>RemindableInterface</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> <span class="keyword">implements</span> <span class="title">RemindableInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;attributes[<span class="string">'email'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>PasswordReminder</code> 跟著調整成：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(RemindableInterface <span class="variable">$remindable</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="variable">$remindable</span>-&gt;getReminderEmail(),</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此一來，只有 <code>PasswordReminder</code> 需要用到的 RemindableInterface 方法會曝露，你可以不用傳 <code>Eloquent</code> 物件進來，只要有實作 <code>getReminderEmail()</code> 方法的物件都可以傳，提高 <code>PasswordReminder</code> 的重用性。</p>
<p><br></p>
<h4 id="u70BA_u4E86_u8AAA_u660E_u9019_u7A2E_u4F5C_u6CD5_u9084_u662F_u6709_u5B83_u7684_u512A_u9EDE_uFF0C_u6211_u5011_u4F86_u770B_u4E00_u500B_u60C5_u5883_28Scenario_29"><a href="#u70BA_u4E86_u8AAA_u660E_u9019_u7A2E_u4F5C_u6CD5_u9084_u662F_u6709_u5B83_u7684_u512A_u9EDE_uFF0C_u6211_u5011_u4F86_u770B_u4E00_u500B_u60C5_u5883_28Scenario_29" class="headerlink" title="為了說明這種作法還是有它的優點，我們來看一個情境(Scenario)"></a>為了說明這種作法還是有它的優點，我們來看一個情境(Scenario)</h4><p>今天主管發現 <code>PasswordReminder</code> 的 Email 寄出時，都沒有指定收件人的姓名，在追蹤是寄給誰時碰上了困難，如果是用剛剛(之一)的思維邏輯來解，你也許會這樣做：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修改參數列(Signature)，加入 $name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(<span class="variable">$email</span>, <span class="variable">$name</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="string">"$name &lt;$email&gt;"</span>,</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<blockquote>
<p><font size="+2">慘，違反 OCP，所以所有呼叫 remind() 方法的地方都要跟著改！</font><br>這就是 bug 的來源啊，而且你要執行時爆炸才會知道哪裡忘了改<br><br></p>
</blockquote>
<p>如果是用 之二 的解法的話呢？我們可以修改 <code>RemindableInterface</code> 啊，介面有需要還是可以加 API 的！</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RemindableInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderEmail</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> <span class="keyword">implements</span> <span class="title">RemindableInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;attributes[<span class="string">'email'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReminderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;attributes[<span class="string">'name'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remind</span><span class="params">(RemindableInterface <span class="variable">$remindable</span>, <span class="variable">$view</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$name</span>, <span class="variable">$email</span>) = [</span><br><span class="line">            <span class="variable">$remindable</span>-&gt;getReminderName(),</span><br><span class="line">            <span class="variable">$remindable</span>-&gt;getReminderEmail(),</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;mailer-&gt;mailTo(</span><br><span class="line">            <span class="string">"$name &lt;$email&gt;"</span>,</span><br><span class="line">            <span class="variable">$this</span>-&gt;render(<span class="variable">$view</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此一來，你只要利用 PHP 的語法檢查，就可以馬上知道哪些類別需要增加 <code>getReminderName()</code> 方法的實作，不用等到 runtime。</p>
<p>不過你也要注意，確定 <code>getReminderName()</code> 這個 API 是每個需要使用 <code>RemindableInterface</code> 的類別都會用到，不然又違反了 ISP 啊。</p>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>原本想說只是個簡單的觀念，反正，就不要有空實作或是沒用到的介面 API 一句話就講完了。舉例時才發現會牽扯到各種相關問題，甚至涉及 API 設計的藝術，還有不同情境下 遵守 ISP 的好處，延伸觀念眾多。建議是把前面提過的 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87-2016-01-21/">SRP 單一職責原則</a> 和 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/">OCP 開放封閉原則</a> 完全搞懂之後，再來看這些例子會比較有感覺。</p>
<p>真的，原本沒打算寫這麼長…… 還以為會是系列中最短的一篇。我錯了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F"><a href="#u904E_u7A0B_u6709_u55]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner讀書會 - SOLID 原則(3) Liskov Substitution Principle]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(3)-Liskov-Substitution-Principle-2016-05-26/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(3)-Liskov-Substitution-Principle-2016-05-26/</id>
    <published>2016-05-25T08:40:03.000Z</published>
    <updated>2016-05-25T15:48:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2><h4 id="u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F"><a href="#u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063_u81C9_u66F8_u793E_u5718__u767C_u554F" class="headerlink" title="按此 查看已完成的 Git 源碼，過程有問題可到 Laravel 台灣臉書社團 發問"></a><a href="https://github.com/dj1020/CH10_Liskov_Substitution_Principle_LSP_demo" target="_blank" rel="external">按此</a> 查看已完成的 Git 源碼，過程有問題可到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laravel 台灣臉書社團</a> 發問</h4><ol>
<li>建立專案資料夾 <code>mkdir ch10_LSP_demo</code>，<code>cd ch10_LSP_demo</code> 切到專案目錄下</li>
<li>(optional) 初始化 git 做版本控制 <code>git init</code></li>
<li>使用 Composer 建立 psr-4 開發環境，<code>comopser init</code>，並設定 <code>{ &quot;autoload&quot;: { &quot;psr-4&quot; : { &quot;Twk\\&quot; : &quot;src/&quot; } }</code></li>
<li>建立 <code>src/index.php</code> 做為 client 進入點</li>
<li>在 <code>index.php</code> 建立 <code>Main</code> class 並把書中範例程式碼實作，額外的程式只有實際需要才寫，好了記得 commit 一次。</li>
<li>執行 <code>composer dump</code> (等同 <code>composer dumpautoload</code> or <code>composer dump-autoload</code>)，會產生 <code>vendor</code> 資料夾，及 <code>vendor/autoload.php</code> 檔。</li>
<li>在 <code>index.php</code> 中 require <code>vendor/autoload.php</code>，即可使用所有 <code>composer require</code> 所安裝的套件。</li>
<li>以解 bug 的方式，一步步來完成實作，執行 <code>php index.php</code> 或是以開網頁方式打開 <code>index.php</code> 皆可</li>
<li>建立 <code>CsvOrderRepository</code> Class</li>
<li>建立 <code>OrderRepositoryInterface</code>，並讓 <code>CsvOrderRepository</code> 繼承(implements) <code>OrderRepositoryInterface</code></li>
<li>建立 <code>Order</code> class</li>
<li>建立 <code>logOrder</code> method 在 <code>OrderRepositoryInterface</code>，並在 <code>CsvOrderRepository</code> 中實作</li>
<li>其他詳細流程可以到 Laradiner 讀書會看閃亮亮 LiveDemo 或參考 GitHub 中的 <a href="https://github.com/dj1020/CH10_Liskov_Substitution_Principle_LSP_demo/commits/master" target="_blank" rel="external">commit history</a>，Done。</li>
</ol>
<h2 id="u91CC_u6C0F_u66FF_u63DB_u539F_u5247__28LSP_-_Liskov_Substitution_Principle_29"><a href="#u91CC_u6C0F_u66FF_u63DB_u539F_u5247__28LSP_-_Liskov_Substitution_Principle_29" class="headerlink" title="里氏替換原則 (LSP - Liskov Substitution Principle)"></a>里氏替換原則 (LSP - Liskov Substitution Principle)</h2><p>別擔心，LSP 原則沒有你想像的那麼複雜。簡單來說，就是你如果有一個類別(class)實作(implements)了一個介面(interface)，那任何使用這個介面(interface)的地方，底下的實作類別(class)應該都可以被抽換成另一個有實作(implements)該介面(interface)的類別(class)，而不需要修改原本的程式碼就能正常運作，這也同時符合了(OCP, Open Close Principle)原則。</p>
<p>換句話說，你只要違反了 LSP，通常就表示你也違反了 OCP。這會讓你的程式碼很難維護，容易改東錯西。</p>
<p>如果用 pseudo code 來表示，大概是像這樣：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyCar</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyCar runs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyPlane</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyPlane runs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">play</span><span class="params">(Toy <span class="variable">$toy</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$toy</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$toyA</span> = <span class="keyword">new</span> ToyCar();</span><br><span class="line"><span class="variable">$toyB</span> = <span class="keyword">new</span> ToyPlane();</span><br><span class="line"></span><br><span class="line"><span class="variable">$child</span> = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="variable">$child</span>-&gt;play(<span class="variable">$toyA</span>);</span><br></pre></td></tr></table></figure>
<p>如果你寫的 code 完全有符合 LSP，<code>$toyA</code> 換成 <code>$toyB</code> 你的程式應該還是要能正常執行。</p>
<p><br></p>
<blockquote>
<font size="+2">替換實作的類別時，不用修改使用該類別的 caller 的程式碼</font>

</blockquote>
<p><br></p>
<h4 id="u6700_u5E38_u898B_u7684_u932F_u8AA4_uFF1A"><a href="#u6700_u5E38_u898B_u7684_u932F_u8AA4_uFF1A" class="headerlink" title="最常見的錯誤："></a>最常見的錯誤：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyCar</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyCar on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyCar off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyCar runs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyPlane</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyPlane on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyPlane off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyPlane flys</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">play</span><span class="params">(Toy <span class="variable">$toy</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$toy</span>-&gt;on();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$toy</span> <span class="keyword">instanceof</span> ToyCar ) &#123;</span><br><span class="line">            <span class="variable">$toy</span>-&gt;run();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="variable">$toy</span> <span class="keyword">instanceof</span> ToyPlane ) &#123;</span><br><span class="line">            <span class="variable">$toy</span>-&gt;fly();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$toy</span>-&gt;off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$toyA</span> = <span class="keyword">new</span> ToyCar();</span><br><span class="line"><span class="variable">$toyB</span> = <span class="keyword">new</span> ToyPlane();</span><br><span class="line"></span><br><span class="line"><span class="variable">$child</span> = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="variable">$child</span>-&gt;play(<span class="variable">$toyA</span>);</span><br></pre></td></tr></table></figure>
<p>你會說，這樣，我的 $toyA 換成 $toyB 完全沒有問題啊，我有符合 LSP。喔！不不不，那要是你再增加一種 $toyC 是會說話的玩具熊呢？</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyBear</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyBear on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyBear off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyBear talks</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照 LSP 原則，既然你的 $toyA, $toyB, $toyC 都實作了 Toy 介面，那麼這三個 instances 應該要可以互換，而且不影響到 Caller 也就是 Child Class 中的程式碼，就可以正常運作才是。很顯然地，你必需修改 Child Class 中的 play method 才能讓你的 child 可以玩玩具熊，那就是違反了 LSP。</p>
<h4 id="u600E_u9EBC_u89E3_uFF1F"><a href="#u600E_u9EBC_u89E3_uFF1F" class="headerlink" title="怎麼解？"></a>怎麼解？</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyCar</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyCar on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyCar off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyCar runs</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyPlane</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyPlane on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyPlane off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyPlane flys</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToyBear</span> <span class="keyword">implements</span> <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyBear on</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Turn ToyBear off</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ToyBear talks</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">play</span><span class="params">(Toy <span class="variable">$toy</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$toy</span>-&gt;on();</span><br><span class="line">        <span class="variable">$toy</span>-&gt;start();</span><br><span class="line">        <span class="variable">$toy</span>-&gt;off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$toyA</span> = <span class="keyword">new</span> ToyCar();</span><br><span class="line"><span class="variable">$toyB</span> = <span class="keyword">new</span> ToyPlane();</span><br><span class="line"><span class="variable">$toyC</span> = <span class="keyword">new</span> ToyBear();</span><br><span class="line"></span><br><span class="line"><span class="variable">$child</span> = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="variable">$child</span>-&gt;play(<span class="variable">$toyA</span>);  <span class="comment">// 現在，可以換成 $toyB, $toyC 都還是能正常執行了。</span></span><br></pre></td></tr></table></figure>
<h2 id="u73FE_u5728_u8B93_u6211_u5011_u56DE_u5230_u66F8_u4E2D_u7684_u7BC4_u4F8B_uFF1A"><a href="#u73FE_u5728_u8B93_u6211_u5011_u56DE_u5230_u66F8_u4E2D_u7684_u7BC4_u4F8B_uFF1A" class="headerlink" title="現在讓我們回到書中的範例："></a>現在讓我們回到書中的範例：</h2><p>這裡把一些書中沒有實作的部份都實作出來，目的不是給已經懂的人看，是給一些還沒辦法從書中不完整的範例想像整座森林的人，應該會有所幫助。這次就不用 Laravel 專案舉例，希望能更親切一些。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepositoryInterface <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvOrderRepository</span> <span class="keyword">implements</span> <span class="title">OrderRepositoryInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logFile</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$logFile</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;logFile = <span class="keyword">__DIR__</span> . <span class="string">"/storage/$logFile"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logOrder</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = fopen(<span class="variable">$this</span>-&gt;logFile, <span class="string">'a'</span>);</span><br><span class="line">        fputcsv(<span class="variable">$fp</span>, [</span><br><span class="line">            <span class="string">'id'</span> =&gt; <span class="variable">$order</span>-&gt;id,</span><br><span class="line">            <span class="string">'amount'</span> =&gt; <span class="variable">$order</span>-&gt;amount,</span><br><span class="line">        ]);</span><br><span class="line">        fclose(<span class="variable">$fp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$amount</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$id</span>, <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;amount = <span class="variable">$amount</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">(<span class="variable">$property</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (property_exists(<span class="variable">$this</span>, <span class="variable">$property</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$this</span>-&gt;<span class="variable">$property</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No such property'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$orderRepository</span> = <span class="keyword">new</span> CsvOrderRepository(<span class="string">'orders.log'</span>);</span><br><span class="line"><span class="variable">$main</span> = <span class="keyword">new</span> Main(<span class="variable">$orderRepository</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">new</span> Order(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$main</span>-&gt;process(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<p>書上提到，現在因為資料量的上升，所以只用 csv 來做為訂單的 Log 記錄已經不夠，所以需要把資料寫入資料庫中儲存，我們需要替換 <code>OrderRepositoryInterface</code> 的實作類別，所以寫了下面這些 Code，實作了 <code>DatabaseOrderRepository</code> 和 <code>DatabaseConnection</code> 類別。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseOrderRepository</span> <span class="keyword">implements</span> <span class="title">OrderRepositoryInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$connection</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">(<span class="variable">$username</span>, <span class="variable">$password</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;connection = <span class="keyword">new</span> DatabaseConnection(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logOrder</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">"Log order &#123;$order-&gt;id&#125; in database."</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;connection-&gt;run(<span class="string">'insert into orders values (?, ?)'</span>, [</span><br><span class="line">            <span class="variable">$order</span>-&gt;id,</span><br><span class="line">            <span class="variable">$order</span>-&gt;amount,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$username</span>, <span class="variable">$password</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(<span class="variable">$sql</span>, <span class="variable">$params</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">"SQL: $sql\n, Parmas: "</span> . var_export(<span class="variable">$params</span>, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>並且準備替換原本的 <code>CsvOrderRepository</code> ，如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $orderRepository = new CsvOrderRepository('orders.log');</span></span><br><span class="line"><span class="variable">$orderRepository</span> = <span class="keyword">new</span> DatabaseOrderRepository(<span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line"><span class="variable">$main</span> = <span class="keyword">new</span> Main(<span class="variable">$orderRepository</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">new</span> Order(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$main</span>-&gt;process(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<p>執行後馬上報錯：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: <span class="operator"><span class="keyword">Call</span> <span class="keyword">to</span> a <span class="keyword">member</span> <span class="keyword">function</span> run() <span class="keyword">on</span> <span class="literal">null</span> <span class="keyword">in</span> /<span class="keyword">Users</span>/twinkledj/Projects/Laradiner/ch10_LSP_demo/src/DatabaseOrderRepository.php <span class="keyword">on</span> line <span class="number">15</span></span></span><br></pre></td></tr></table></figure>
<p>原來是忘了呼叫 <code>DatabaseOrderRepository</code> 中的 <code>connect()</code> 來初始化資料庫連線，好，那我們為了符合 LSP 原則，我們就改成這樣：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前同，略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 加入判斷是不是存到資料庫的 repository</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span> <span class="keyword">instanceof</span> DatabaseOrderRepository) &#123;</span><br><span class="line">            <span class="variable">$order</span>-&gt;connect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$orderRepository</span> = <span class="keyword">new</span> DatabaseOrderRepository(<span class="string">'usernmae'</span>, <span class="string">'password'</span>);</span><br><span class="line"><span class="variable">$main</span> = <span class="keyword">new</span> Main(<span class="variable">$orderRepository</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">new</span> Order(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$main</span>-&gt;process(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<p>這樣的話，不論使用 <code>CsvOrderRepository</code> 或 <code>DatabaseOrderRepository</code> 都可以了唷！好像完全符合了 LSP 對吧 …</p>
<p><br></p>
<blockquote>
<font size="+2">悲劇，在你修改 Main Class 的那一瞬間，你就違反了 LSP 了！</font>

</blockquote>
<p><br></p>
<p>不是說完全不能違反 LSP，我聽 Jeffrey Way 講他有時也會違反 LSP，但只有確定在好處多於壞處，或是你能確定某些特定的條件下才使用，有意識、有理由的違反 LSP。還不完全理解的話，先儘可能符合 LSP 吧！會讓你的程式碼維護之路好走上百倍。</p>
<h2 id="u600E_u9EBC_u89E3_uFF1F_u89E3_u6CD5_u4E00_uFF1A"><a href="#u600E_u9EBC_u89E3_uFF1F_u89E3_u6CD5_u4E00_uFF1A" class="headerlink" title="怎麼解？解法一："></a>怎麼解？解法一：</h2><p>其實解法不是只有書中的一種，反正最高指導原則就是完全不要去碰 Main Class 的任何 Code，但畢竟資料庫連線還是要初始化啊！不然該怎麼辦？我想最簡單的方法應該是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseOrderRepository</span> <span class="keyword">implements</span> <span class="title">OrderRepositoryInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">(<span class="variable">$username</span>, <span class="variable">$password</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;connection = <span class="keyword">new</span> DatabaseConnection(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 後略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepositoryInterface <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$orderRepository</span> = (<span class="keyword">new</span> DatabaseOrderRepository(<span class="string">'usernmae'</span>, <span class="string">'password'</span>))-&gt;connect();</span><br><span class="line"><span class="variable">$main</span> = <span class="keyword">new</span> Main(<span class="variable">$orderRepository</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">new</span> Order(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$main</span>-&gt;process(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<h4 id="u6211_u628A_u521D_u59CB_u5316_u7684_u52D5_u4F5C_u5F80_u4E0A_u62C9_uFF0C_u5728_u4E00_u958B_u59CB_u5C31_u521D_u59CB_u5316_uFF0C_u518D_u50B3_u5165_Main__u4E2D_u3002_u641E_u5B9A_uFF01"><a href="#u6211_u628A_u521D_u59CB_u5316_u7684_u52D5_u4F5C_u5F80_u4E0A_u62C9_uFF0C_u5728_u4E00_u958B_u59CB_u5C31_u521D_u59CB_u5316_uFF0C_u518D_u50B3_u5165_Main__u4E2D_u3002_u641E_u5B9A_uFF01" class="headerlink" title="我把初始化的動作往上拉，在一開始就初始化，再傳入 Main 中。搞定！"></a>我把初始化的動作往上拉，在一開始就初始化，再傳入 Main 中。搞定！</h4><p>是不是一定要用書中的解法，我覺得不見得，看你有多少時間，還有需不需要吧。</p>
<h2 id="u81F3_u65BC_u66F8_u4E2D_u89E3_u6CD5_u7684_u5B8C_u6574_u7BC4_u4F8B_u662F_u600E_u6A23_uFF1F_u89E3_u6CD5_u4E8C_uFF1A"><a href="#u81F3_u65BC_u66F8_u4E2D_u89E3_u6CD5_u7684_u5B8C_u6574_u7BC4_u4F8B_u662F_u600E_u6A23_uFF1F_u89E3_u6CD5_u4E8C_uFF1A" class="headerlink" title="至於書中解法的完整範例是怎樣？解法二："></a>至於書中解法的完整範例是怎樣？解法二：</h2><p>請大家看 Code，當然，有來讀書會的朋友才聽得到我揀重點講的部份，看文章的話就請自行細細品味囉~</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseOrderRepository</span> <span class="keyword">implements</span> <span class="title">OrderRepositoryInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$connector</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(DatabaseConnector <span class="variable">$connector</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;connector = <span class="variable">$connector</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;connector-&gt;bootConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logOrder</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        var_dump(<span class="string">"Log order &#123;$order-&gt;id&#125; in database."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$this</span>-&gt;connect();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$connection</span>-&gt;run(<span class="string">'insert into orders values (?, ?)'</span>, [</span><br><span class="line">            <span class="variable">$order</span>-&gt;id,</span><br><span class="line">            <span class="variable">$order</span>-&gt;amount,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u600E_u9EBC_u5BE6_u4F5C_DatabaseConnector__u5462_uFF1F"><a href="#u600E_u9EBC_u5BE6_u4F5C_DatabaseConnector__u5462_uFF1F" class="headerlink" title="怎麼實作 DatabaseConnector 呢？"></a>怎麼實作 DatabaseConnector 呢？</h4><p>寫給大家參考參考，順便把前面寫的 <code>DatabaseConnection</code> 也拿來用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseConnector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$connection</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$username</span>, <span class="variable">$password</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootConnection</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$this</span>-&gt;connection)) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;connection = <span class="variable">$this</span>-&gt;connect(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">(<span class="variable">$username</span>, <span class="variable">$password</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DatabaseConnection(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6700_u5F8C_u5C31_u662F_u600E_u9EBC_u547C_u53EB_u4F7F_u7528_uFF1F"><a href="#u6700_u5F8C_u5C31_u662F_u600E_u9EBC_u547C_u53EB_u4F7F_u7528_uFF1F" class="headerlink" title="最後就是怎麼呼叫使用？"></a>最後就是怎麼呼叫使用？</h4><p>這邊往往是新手比較無法自行想像，又找不到 google 可以問的部份，希望對你們有幫助，但其實真的不用想得太難，就這樣：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orderRepository</span> = <span class="keyword">new</span> DatabaseOrderRepository(<span class="keyword">new</span> DatabaseConnector(<span class="string">'homestead'</span>, <span class="string">'secret'</span>));</span><br><span class="line"><span class="variable">$main</span> = <span class="keyword">new</span> Main(<span class="variable">$orderRepository</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$order</span> = <span class="keyword">new</span> Order(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$main</span>-&gt;process(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>書裡這個章節的末段提到的 <code>knowledge</code>，講得觀念其實就是 Law of Demeter 有人翻成「迪米特法則」，又稱「最小知識原則」，和 LSP 是有一定相關性的。像是一開始修改 Main Class 的時候這一段：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$order</span> <span class="keyword">instanceof</span> DatabaseOrderRepository) &#123;</span><br><span class="line">    <span class="variable">$order</span>-&gt;connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊就是書中所謂的 “leaky abstrations”，這段程式碼向 <code>Main</code> Class 透露了它不需要知道的細節，也就是 判斷 <code>$order</code> 的實作類別是不是 <code>DatabaseOrderRepository</code> 的這件事，這 Main Class 應該根本不該去判斷，這就違反了 Law of Demeter (LoD) 原則。如何讓你的 Caller 儘可能少知道不需要的資訊，是寫程式的禪啊~~</p>
<p>另外，用解法一的時候，<code>DatabaseOrderRepository</code> 還要負責進行資料庫的初始化連線，也有一點違反 SRP 單一職責原則的味道。總之，LSP 不是那麼難懂的東西，其實還有兩個例子可以講，是關於使用 Exception 違反 LSP 的例子和回傳值不一造成的 LSP violation，如果有時間的話再補上來吧，呵呵。看有沒有人要盯我補上的 …… 噗噗</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[鐵哥分享OO觀念_2016_0519]]></title>
    <link href="http://blog.dj1020.net/%E9%90%B5%E5%93%A5%E5%88%86%E4%BA%ABOO%E8%A7%80%E5%BF%B5-2016-0519/"/>
    <id>http://blog.dj1020.net/鐵哥分享OO觀念-2016-0519/</id>
    <published>2016-05-19T11:41:05.000Z</published>
    <updated>2016-05-19T13:36:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7269_u4EF6_u5C0E_u5411_u57FA_u790E_-__u7269_u4EF6_u5C0E_u5411_u8A2D_u8A08_u5165_u9580"><a href="#u7269_u4EF6_u5C0E_u5411_u57FA_u790E_-__u7269_u4EF6_u5C0E_u5411_u8A2D_u8A08_u5165_u9580" class="headerlink" title="物件導向基礎 - 物件導向設計入門"></a>物件導向基礎 - 物件導向設計入門</h1><h2 id="u7269_u4EF6_u5C0E_u5411_u7684_u7CBE_u795E"><a href="#u7269_u4EF6_u5C0E_u5411_u7684_u7CBE_u795E" class="headerlink" title="物件導向的精神"></a>物件導向的精神</h2><h3 id="u62BD_u8C61__28Abstraction_29_uFF1A"><a href="#u62BD_u8C61__28Abstraction_29_uFF1A" class="headerlink" title="抽象 (Abstraction)："></a>抽象 (Abstraction)：</h3><pre><code>- 抽離具體的形象，只留下特徵
- 抽象不是簡化，而是外界對該事物的理解，用以定義「職責」
- 抽象省略了細節，讓人們專注在需求的描述上，學用抽象的角度看待事物的互動
- 過度抽象會導致錯誤的一致性，ex: 賽車手開賽車(競賽) -&gt; 簡化成人在開車，那情境特性就不對了！
</code></pre><ul>
<li>請你畫一個微笑：人會針對特徵去識別事物，類似藝術家，會識別特徵並誇大變成抽象畫</li>
<li>ATM 提款畫，特徵：人，特徵：提款卡，特徵：ATM字樣的機器，特徵 $ 字號，箭頭表示提款的動作</li>
</ul>
<h3 id="u5C01_u88DD"><a href="#u5C01_u88DD" class="headerlink" title="封裝"></a>封裝</h3><pre><code>- 好的封裝：開放的越少越好，又缺一不可。(Law of Demeter, LoD)
- 封裝讓物件負責維護自己的內部狀態。Ex: 你要跟我借錢，你會拿走我的錢包把錢拿走嗎？No, 請透過「介面」
- 封裝的缺點：三個和尚沒水喝。因為類別或方法的職責不明確。Ex: getter 我覺得應該只是拿東西出來，但其實會存某些資料才吐值出來。
</code></pre><ul>
<li>Ex: 解鎖手機時需要知道手機是怎麼運作的嗎？只要手指放上去或是滑幾下就可以解鎖，不用知道裡面執行了些什麼。</li>
<li>Ex: ATM 構造示意圖。我們不用知道ATM內部結構，只要知道它可以提錢就好。</li>
</ul>
<h3 id="u7E7C_u627F"><a href="#u7E7C_u627F" class="headerlink" title="繼承"></a>繼承</h3><pre><code>- 繼承是抽象的特例化。把它想成是行為的特例化。
    + Ex: 車 -&gt; 卡車、賽車、三輪車
- 繼承區分出抽象類別(車)與具象類別(F1賽車)。
    + 讓抽象類別來定義外界如何理解行為，讓具象類別來實作行為。
- 繼承不是重用程式碼！
    + 是為了用戶端的一致性
    + 能夠重用程式碼只是附加價值
</code></pre><ul>
<li>教授 (類別)<ul>
<li>中文系教授 (特例化，給予特別職責 –&gt; 就是「繼承」)</li>
<li>音樂系教授</li>
</ul>
</li>
</ul>
<h3 id="u591A_u578B"><a href="#u591A_u578B" class="headerlink" title="多型"></a>多型</h3><pre><code>- 每個物件對同一個訊息(message)會有自己的行為
    + 需要繼承或實作介面來達成
- 依賴在抽象介面
    + …
- 儘可能不要用鴨子類別 (Duck Typing)
    + 會游泳、會飛、會呱呱叫的你就當成是鴨子
    + …
</code></pre><ul>
<li>老闆只說「去做事」，但工程師、專案經理、設計師各會依自己的職責去做事</li>
<li>以上三個角色都是員工(抽象類別)</li>
</ul>
<h2 id="u7269_u4EF6_u5C0E_u5411_u7684_u597D_u8655"><a href="#u7269_u4EF6_u5C0E_u5411_u7684_u597D_u8655" class="headerlink" title="物件導向的好處"></a>物件導向的好處</h2><ul>
<li>Ex:<ul>
<li>傳統 mysqli 的 insert 範例，程序化程式設計，加入兩個 users</li>
<li>物件導向寫法 $user-&gt;save() 的例子，加入兩個 users</li>
</ul>
</li>
</ul>
<ol>
<li>操作的是物件不是 mysqli library</li>
<li>用戶不必知道 mysqli 的細節</li>
<li>不需要曝露操作過程中的變數</li>
<li>程式更加語意化</li>
</ol>
<ul>
<li>用戶端程式只在乎他面對的物件是什麼？還有它能做什麼？</li>
</ul>
<h2 id="u7A0B_u5E8F_u5316_u601D_u7DAD_u8F49_u63DB_u5230_u7269_u4EF6_u5C0E_u5411_u601D_u7DAD"><a href="#u7A0B_u5E8F_u5316_u601D_u7DAD_u8F49_u63DB_u5230_u7269_u4EF6_u5C0E_u5411_u601D_u7DAD" class="headerlink" title="程序化思維轉換到物件導向思維"></a>程序化思維轉換到物件導向思維</h2><ul>
<li>User Class 建立 demostration</li>
<li>很簡單的方式把程序化程式轉化成物件的方式執行</li>
<li>把職責隔離出來</li>
<li>但有很多的雷區，新手會犯的錯</li>
</ul>
<h2 id="u65B0_u624B_u96F7_u5340_-__u5DF2_u7D93_u5728_u7528OO_uFF0C_u4F46_u7A0B_u5F0F_u78BC_u96E3_u4EE5_u7DAD_u8B77"><a href="#u65B0_u624B_u96F7_u5340_-__u5DF2_u7D93_u5728_u7528OO_uFF0C_u4F46_u7A0B_u5F0F_u78BC_u96E3_u4EE5_u7DAD_u8B77" class="headerlink" title="新手雷區 - 已經在用OO，但程式碼難以維護"></a>新手雷區 - 已經在用OO，但程式碼難以維護</h2><h4 id="u842C_u80FD_u985E_u5225_u6216_u65B9_u6CD5_uFF0CEx_3A__u8CFC_u7269_u8ECA_u985E_u5225_28ShoppingCart_29"><a href="#u842C_u80FD_u985E_u5225_u6216_u65B9_u6CD5_uFF0CEx_3A__u8CFC_u7269_u8ECA_u985E_u5225_28ShoppingCart_29" class="headerlink" title="萬能類別或方法，Ex: 購物車類別(ShoppingCart)"></a>萬能類別或方法，Ex: 購物車類別(ShoppingCart)</h4><pre><code>- addItem
- getItems
- calculateTotal
- getTotal
- getDiscount
- getPayment
- getShipment
- checkout
- getOrder
- sendOrderMail
- ... 天啊，一個類別把所有事做完，後面還有。一共幾千行的類別。甚至其中有一個「方法」就佔了一半。
</code></pre><h4 id="u628A_u8077_u8CAC_u9694_u96E2_u51FA_u4F86_28ISP_29_uFF0C_u6BCF_u500B_u985E_u5225_u6709_u55AE_u7D14_u7684_u8077_u8CAC_uFF0C_u66F4_u5BB9_u6613_u7DAD_u8B77_u548C_u4FEE_u6539"><a href="#u628A_u8077_u8CAC_u9694_u96E2_u51FA_u4F86_28ISP_29_uFF0C_u6BCF_u500B_u985E_u5225_u6709_u55AE_u7D14_u7684_u8077_u8CAC_uFF0C_u66F4_u5BB9_u6613_u7DAD_u8B77_u548C_u4FEE_u6539" class="headerlink" title="把職責隔離出來(ISP)，每個類別有單純的職責，更容易維護和修改"></a>把職責隔離出來(ISP)，每個類別有單純的職責，更容易維護和修改</h4><pre><code>- Cart (add/get/calculateTotal/getTotal)
- Order (setPayment/setShipment/getSenderMail)
- Discount (getDiscount)
- Mailer (send)
</code></pre><h4 id="u5206_u4E0D_u6E05_u300C_u62BD_u8C61_u985E_u5225_u300D_u6216_u300C_u4ECB_u9762_u300D"><a href="#u5206_u4E0D_u6E05_u300C_u62BD_u8C61_u985E_u5225_u300D_u6216_u300C_u4ECB_u9762_u300D" class="headerlink" title="分不清「抽象類別」或「介面」"></a>分不清「抽象類別」或「介面」</h4><pre><code>- 有共用的行為 -&gt; *抽象類別*
- 希望類別有多種行為，但又不想綁死在單一類別時，就用 -&gt; *介面*
- 在 PHP 中，介面的實作可以搭配 Trait
</code></pre><h4 id="u932F_u8AA4_u7684_u7E7C_u627F_u95DC_u4FC2"><a href="#u932F_u8AA4_u7684_u7E7C_u627F_u95DC_u4FC2" class="headerlink" title="錯誤的繼承關係"></a>錯誤的繼承關係</h4><pre><code>- Ex: Database(抽象類別) - connect/query/beginTransaction/commit
- Ex: MySql extends Database
- Ex: SQLite 因為為了要重用 MySql 中某些程式碼，SQLite extends MySql
</code></pre><h4 id="u4E0D_u5FC5_u8981_u7684_u66DD_u9732"><a href="#u4E0D_u5FC5_u8981_u7684_u66DD_u9732" class="headerlink" title="不必要的曝露"></a>不必要的曝露</h4><pre><code>- 因為全部的方法都用 public，結果不敢拔掉它。因為不知道誰會去用…
- 為了方便而曝露屬性
    + 所有的屬性加上 setter / getter
    + 錢包不要隨便丟在地上給人家撿
</code></pre><h4 id="u2026__u8B8A_u6578_u50B3_u905E_u554F_u984C"><a href="#u2026__u8B8A_u6578_u50B3_u905E_u554F_u984C" class="headerlink" title="… 變數傳遞問題"></a>… 變數傳遞問題</h4><pre><code>- addItem($item, array $items)
- calculateTotal(array $items)
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$items</span> = loadItemsFromSession();</span><br><span class="line"><span class="variable">$cart</span> = <span class="keyword">new</span> Cart();</span><br><span class="line"><span class="variable">$cart</span>-&gt;addItem(<span class="variable">$item</span>, <span class="variable">$items</span>);</span><br><span class="line"><span class="variable">$cart</span>-&gt;calculateTotal(<span class="variable">$items</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 應該把 $items 封裝為物件的內部屬性</span></span><br></pre></td></tr></table></figure>
<center><blockquote style="font-size: 2em; padding-bottom: 1em"><br>需求一定會變，程式一定會改。<br></blockquote></center>

<h4 id="if__u2026_else__u6563_u843D_u5404_u8655_-_26gt_3B__u8ACB_u96C6_u4E2D_u5728_u540C_u4E00_u500B_u5730_u65B9"><a href="#if__u2026_else__u6563_u843D_u5404_u8655_-_26gt_3B__u8ACB_u96C6_u4E2D_u5728_u540C_u4E00_u500B_u5730_u65B9" class="headerlink" title="if … else 散落各處 -&gt; 請集中在同一個地方"></a>if … else 散落各處 -&gt; 請集中在同一個地方</h4><h2 id="u7269_u4EF6_u5C0E_u5411_u7A0B_u5F0F_u7684_u8A2D_u8A08"><a href="#u7269_u4EF6_u5C0E_u5411_u7A0B_u5F0F_u7684_u8A2D_u8A08" class="headerlink" title="物件導向程式的設計"></a>物件導向程式的設計</h2><h4 id="u6CE8_u610F_u975C_u614B_u65B9_u6CD5_u8207_u51FD_u5F0F_u7684_u4F7F_u7528_u6642_u6A5F__uFF1F_uFF1F_uFF1F_u8209_u4F8B_uFF1F"><a href="#u6CE8_u610F_u975C_u614B_u65B9_u6CD5_u8207_u51FD_u5F0F_u7684_u4F7F_u7528_u6642_u6A5F__uFF1F_uFF1F_uFF1F_u8209_u4F8B_uFF1F" class="headerlink" title="注意靜態方法與函式的使用時機 ？？？舉例？"></a>注意靜態方法與函式的使用時機 ？？？舉例？</h4><pre><code>- 函式不能封裝靜態屬性
    + 函式只能透過傳參考或回傳變數來達到傳遞狀態的效果
    + 類別本身能透過靜態屬性來連通所有靜態方法與生成的物件
- 不需要多型的時候
    + 用戶端直接依賴在抽象類別上
    + 但注意會造成測試不易
- Ex:
</code></pre><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 費弗那西數列</span><br><span class="line"><span class="keyword">function</span> f(<span class="variable">$n</span>) &#123;</span><br><span class="line">    if (<span class="variable">$n</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        return <span class="variable">$n</span>;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return f(<span class="variable">$n</span> - <span class="number">1</span>) + f(<span class="variable">$n</span> - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 費弗那西數列 ver <span class="number">2.0</span></span><br><span class="line"><span class="keyword">function</span> f(<span class="variable">$n</span>) &#123;</span><br><span class="line">    static result = [];</span><br><span class="line"></span><br><span class="line">    if (<span class="variable">$n</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable">$r</span> = <span class="variable">$n</span>;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        <span class="variable">$r</span> = f(<span class="variable">$n</span> - <span class="number">1</span>) + f(<span class="variable">$n</span> - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[<span class="variable">$n</span>] = <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5F9E_u9700_u6C42_u51FA_u767C"><a href="#u5F9E_u9700_u6C42_u51FA_u767C" class="headerlink" title="從需求出發"></a>從需求出發</h4><pre><code>- 先關注需求要什麼，再談如何達成
    + 先思考需求中的物件如何互動，以決定程式的架構
    + 讓底層元件去組合出符合需求的程式碼
- 從用戶端的角度去設計，不要從資料的角度去設計
    + 不要一開始就想處理資料的演算法是什麼
    + …
</code></pre><h4 id="u5167_u805A_28Cohesion_29"><a href="#u5167_u805A_28Cohesion_29" class="headerlink" title="內聚(Cohesion)"></a>內聚(Cohesion)</h4><pre><code>- 內聚力越高越好
    + 單一職責，每個方法、類別都有它的責任
- …
    + …
</code></pre><h4 id="u8026_u5408_28Coupling_29"><a href="#u8026_u5408_28Coupling_29" class="headerlink" title="耦合(Coupling)"></a>耦合(Coupling)</h4><pre><code>- 耦合度越低越好
    + 不會牽一髮而動全身
    + OCP
- 用戶端儘可能不要知道太多其他類別
    + 讓底層改變的波動不會傳遞到用戶端
    + 業務邏輯不要依賴在實作上，Ex: 訂單操作綁死金流或物流
</code></pre><h4 id="u7E7C_u627F_u8A2D_u8A08"><a href="#u7E7C_u627F_u8A2D_u8A08" class="headerlink" title="繼承設計"></a>繼承設計</h4><pre><code>- 多用組合，少用繼承。需要多型的地方才用繼承
- 繼承階層不要過深，通常不超過3層
- 參考設計模式來使用繼承
</code></pre><h4 id="u5206_u5C64_u8A2D_u8A08"><a href="#u5206_u5C64_u8A2D_u8A08" class="headerlink" title="分層設計"></a>分層設計</h4><pre><code>- 在關鍵點切開職責
- 每層都是下一層的抽象，封裝下一層的細節
    + 每一層有自己的職責，不要管下一層怎麼做
    + 不允許跨層存取，例如 Service 層不直接使用 PDO 物件，而是透過 ORM 或 Repository
- 越上層越靠近需求，越下層越靠近實作
</code></pre><h3 id="u5BE6_u4F8B_u6F14_u7DF4"><a href="#u5BE6_u4F8B_u6F14_u7DF4" class="headerlink" title="實例演練"></a>實例演練</h3><p>用 Model 來抽象化之前 User Class，Database Class 來取代之前用 constructor 來初始化 DB connection。<br>Database &lt;- MysqliDriver<br>Model &lt;- User</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User::setDb(<span class="keyword">new</span> MysqliDriver());</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User([</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'John'</span>,</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'John@email.com'</span>,</span><br><span class="line">]);</span><br><span class="line"><span class="variable">$user</span>-&gt;save();</span><br></pre></td></tr></table></figure>
<h4 id="u76F8_u95DC_u7684_class__u90FD_u5BEB_u5728_u540C_u4E00_u500B_u6A94_u6848_uFF0C_u8B1B_u89E3_u548C_u601D_u8DEF_u6703_u8B8A_u5F88_u6E05_u695A_uFF01_u4E0D_u7528_u8DF3_u4F86_u8DF3_u53BB_uFF0C_u64CD_u4F5C_u4E5F_u65B9_u4FBF_u3002"><a href="#u76F8_u95DC_u7684_class__u90FD_u5BEB_u5728_u540C_u4E00_u500B_u6A94_u6848_uFF0C_u8B1B_u89E3_u548C_u601D_u8DEF_u6703_u8B8A_u5F88_u6E05_u695A_uFF01_u4E0D_u7528_u8DF3_u4F86_u8DF3_u53BB_uFF0C_u64CD_u4F5C_u4E5F_u65B9_u4FBF_u3002" class="headerlink" title="相關的 class 都寫在同一個檔案，講解和思路會變很清楚！不用跳來跳去，操作也方便。"></a>相關的 class 都寫在同一個檔案，講解和思路會變很清楚！不用跳來跳去，操作也方便。</h4><h4 id="u6700_u57FA_u672C_u7684_u4E00_u500B_ORM"><a href="#u6700_u57FA_u672C_u7684_u4E00_u500B_ORM" class="headerlink" title="最基本的一個 ORM"></a>最基本的一個 ORM</h4><h3 id="u6A21_u5F0F_u7D44_u5408_u7BC4_u4F8B_-_Intervention_Image__u70BA_u4F8B"><a href="#u6A21_u5F0F_u7D44_u5408_u7BC4_u4F8B_-_Intervention_Image__u70BA_u4F8B" class="headerlink" title="模式組合範例 - Intervention Image 為例"></a>模式組合範例 - Intervention Image 為例</h3><ul>
<li>看鐵哥的圖 …</li>
</ul>
<h2 id="u8FF7_u601D_uFF1A_u4EC0_u9EBC_u9700_u6C42_u90FD_u9069_u5408_u7528_u7269_u4EF6_u5C0E_u5411_u4F86_u5B8C_u6210_u55CE_uFF1F"><a href="#u8FF7_u601D_uFF1A_u4EC0_u9EBC_u9700_u6C42_u90FD_u9069_u5408_u7528_u7269_u4EF6_u5C0E_u5411_u4F86_u5B8C_u6210_u55CE_uFF1F" class="headerlink" title="迷思：什麼需求都適合用物件導向來完成嗎？"></a>迷思：什麼需求都適合用物件導向來完成嗎？</h2>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7269_u4EF6_u5C0E_u5411_u57FA_u790E_-__u7269_u4EF6_u5C0E_u5411_u8A2D_u8A08_u5165_u9580"><a href="#u7269_u4EF6_u5C0E_u5411_u57FA_u790]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
      <category term="設計模式" scheme="http://blog.dj1020.net/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - SOLID 原則 (2) Open Closed Principle 開放封閉原則 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(2)-Open-Closed-2016-03-03/</id>
    <published>2016-03-03T11:30:59.000Z</published>
    <updated>2016-03-03T09:43:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2><h4 id="u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063__u767C_u554F"><a href="#u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063__u767C_u554F" class="headerlink" title="按此 查看已完成的 Git 源碼，過程有問題可到 Laravel 台灣 發問"></a><a href="https://github.com/dj1020/CH9_Open_Closed_Principle_Demo" target="_blank" rel="external">按此</a> 查看已完成的 Git 源碼，過程有問題可到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laravel 台灣</a> 發問</h4><ol>
<li>建立專案 <code>git clone https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo.git ch9_OpenClose_demo</code></li>
<li>進入專案目錄 <code>cd ch9_OpenClose_demo</code></li>
<li>安裝相依套件 <code>composer install</code>，完成後執行 <code>php artisan</code> 如果沒報錯就是好了。</li>
<li>編輯 .env 設定資料庫帳密，如果 .env 不存在，利用 <code>cp .env.example .env</code> 來建立一個後修改。</li>
<li>執行 <code>php artisan key:generate</code></li>
<li>利用 migrate 測試資料庫設定 <code>php artisan migrate</code>，成功的話同時會建立三個 tables: <code>accounts</code>, <code>orders</code>, <code>products</code></li>
<li>使用 <code>php artisan serve</code> 開啟一個 web host</li>
<li>用瀏覽器打開 <code>http://localhost:8000/</code> 應該可以看到 Laravel 5 字樣的 welcome page</li>
<li>用瀏覽器打開 <code>http://localhost:8000/checkout</code> 應該可以看到一個假的購物車準備結帳</li>
<li>按下提交訂單，會再 <code>orders</code> table 加入一筆訂單資料，去資料庫查看一下有沒有加入。</li>
<li>Done.</li>
</ol>
<h2 id="u958B_u653E_u5C01_u9589_u539F_u5247__28Open_Closed_Principle_29"><a href="#u958B_u653E_u5C01_u9589_u539F_u5247__28Open_Closed_Principle_29" class="headerlink" title="開放封閉原則 (Open Closed Principle)"></a>開放封閉原則 (Open Closed Principle)</h2><p>所謂開放封閉原則(OCP)，按照英文原文是「Code is open for extension but closed for modification.」直接翻譯「<em>程式碼應該要開放使得它可以被擴充，但也要封閉以避免不必要的修改</em>」想必大家還是不了解是什麼意思，如果用閃亮亮的話來說，就是</p>
<blockquote>
<font size="+2">新增/變更邏輯判斷時，不用修改使用該邏輯的 caller 的程式碼</font>

</blockquote>
<p>也可以說</p>

<blockquote>
<font size="+2">不必要修改 Client 端程式，就可以擴充新功能，或改變業務邏輯。</font>

</blockquote>
<p>舉例來說，</p>
<ul>
<li><strong>如果你寫的是購物網站，你能不能「新增一種付款方式」，可新增 class，但幾乎不用修改原本已經上線的程式碼？</strong></li>
<li><strong>如果你在會員註冊時的密碼驗證邏輯原本只有「密碼不能少於6個字元」，你能不能增加「密碼中需含大、小寫英文字母」的邏輯，但幾乎不用修改原本已經上線的程式碼？</strong></li>
<li><strong>以書中的例子來說，它想修改驗證是否為「合法訂單」的驗證邏輯，要怎麼架構你的程式，才能讓以後新增/變更驗證邏輯時，不用修改 caller 的程式？</strong></li>
</ul>
<p>讓我們延續之前 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87-2016-01-21/">Laradiner 讀書會 - SOLID 原則 (1) Single Responsibility Principle 單一職責原則 導讀心得整理筆記 | 閃亮亮大師之路</a> 的例子：</p>
<h4 id="u6848_u4F8B_3A"><a href="#u6848_u4F8B_3A" class="headerlink" title="案例:"></a>案例:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderProcessor constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(BillerInterface <span class="variable">$biller</span>, OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;biller = <span class="variable">$biller</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;biller-&gt;bill(<span class="variable">$order</span>-&gt;getAccount()-&gt;id, <span class="variable">$order</span>-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8ACB_u95DC_u6CE8_u9019_u4E00_u6BB5_u5224_u65B7_u908F_u8F2F_uFF1A"><a href="#u8ACB_u95DC_u6CE8_u9019_u4E00_u6BB5_u5224_u65B7_u908F_u8F2F_uFF1A" class="headerlink" title="請關注這一段判斷邏輯："></a>請關注這一段判斷邏輯：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6848_u4F8B_u7814_u8A0E_uFF1A"><a href="#u6848_u4F8B_u7814_u8A0E_uFF1A" class="headerlink" title="案例研討："></a>案例研討：</h4><h4 id="1-__u9019_u4E00_u6BB5_u5224_u65B7_u7684_u908F_u8F2F_u5728_u300C_u505A_u4EC0_u9EBC_u4E8B_uFF1F_u300D"><a href="#1-__u9019_u4E00_u6BB5_u5224_u65B7_u7684_u908F_u8F2F_u5728_u300C_u505A_u4EC0_u9EBC_u4E8B_uFF1F_u300D" class="headerlink" title="1. 這一段判斷的邏輯在「做什麼事？」"></a>1. 這一段判斷的邏輯在「做什麼事？」</h4><h4 id="2-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_u300C_u597D_u5728_u54EA_u88E1_u300D_uFF1F"><a href="#2-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_u300C_u597D_u5728_u54EA_u88E1_u300D_uFF1F" class="headerlink" title="2. 這一段邏輯的寫法「好在哪裡」？"></a>2. 這一段邏輯的寫法「好在哪裡」？</h4><h4 id="3-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_uFF0C_u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#3-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_uFF0C_u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="3. 這一段邏輯的寫法，以後在維護專案時會造成什麼問題？"></a>3. 這一段邏輯的寫法，以後在維護專案時會造成什麼問題？</h4><p><br><br><br><br><br><br><br><br><!-- ========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ========== --></p>
<hr style="border: 0; height: 0; box-shadow: 0 0 10px 1px black;">

<h4 id="u9019_u4E00_u6BB5_u908F_u8F2F_u505A_u4EC0_u9EBC_u4E8B_uFF1F"><a href="#u9019_u4E00_u6BB5_u908F_u8F2F_u505A_u4EC0_u9EBC_u4E8B_uFF1F" class="headerlink" title="這一段邏輯做什麼事？"></a>這一段邏輯做什麼事？</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>驗證是否為「重複訂單」</p>
<h4 id="u597D_u5728_u54EA_u88E1_uFF1F"><a href="#u597D_u5728_u54EA_u88E1_uFF1F" class="headerlink" title="好在哪裡？"></a>好在哪裡？</h4><ul>
<li>可讀性佳</li>
<li>可測試性佳，因為使用了依賴注入(Dependency Injection)，注入 orders 這個 repository 來取得 order count，讓我們可以方便使用 mock 技巧寫測試程式。<br><br></li>
</ul>
<h4 id="u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="以後在維護專案時會造成什麼問題？"></a>以後在維護專案時會造成什麼問題？</h4><ul>
<li><p>問題一：<code>驗證訂單</code>的邏輯是要換了怎麼辦？<br>ex: 我不想用「重複訂單」做為判斷該訂單是否合法(valid)的依據的話呢？</p>
</li>
<li><p>問題二：我們要怎麼新增<code>驗證訂單</code>的邏輯？<br>ex: 除了驗證「重複訂單」我還想驗證「訂購者的帳戶必須沒有被中止」才能成立訂單。</p>
</li>
<li><p>問題三：如果新增一個邏輯還好，要是新增「很多」驗證邏輯的話，怎麼避免 process 裡的程式迅速變成 spaghetti(義大利麵)？</p>
</li>
<li><p>問題四：新增「很多」驗證邏輯後，怎麼測試這些驗證邏輯有沒有正確運作？<br><br></p>
</li>
</ul>
<h4 id="u7D50_u8AD6_uFF1A_u9019_u6BB5_u908F_u8F2F_u88AB_u5BEB_u5728_process_28_29__u4E2D_uFF0C_u9055_u53CD_u4E86_u958B_u653E_u5C01_u9589_u539F_u5247__28OCP_29"><a href="#u7D50_u8AD6_uFF1A_u9019_u6BB5_u908F_u8F2F_u88AB_u5BEB_u5728_process_28_29__u4E2D_uFF0C_u9055_u53CD_u4E86_u958B_u653E_u5C01_u9589_u539F_u5247__28OCP_29" class="headerlink" title="結論：這段邏輯被寫在 process() 中，違反了開放封閉原則 (OCP)"></a>結論：這段邏輯被寫在 process() 中，違反了開放封閉原則 (OCP)</h4><p>因為這段邏輯被寫在 process() 中，所以每次邏輯要修改都要變更 process()，使得 process() 本身違反了「開放封閉原則(OCP)」。我們希望 process() 這段程式是 open for extension，不是 open for modification。</p>
<p>然而，對於呼叫 process() 的 caller <code>CheckoutController@checkout</code> 來說，checkout() 就沒有違反 OCP，不管 process() 怎麼變動，checkout() 裡的程式都不用改變，只要 process() 最後會回傳訂單 id 給 checkout() 就行。</p>
<p><br><br></p>
<h2 id="u5BE6_u6230_Demo_Solution"><a href="#u5BE6_u6230_Demo_Solution" class="headerlink" title="實戰 Demo Solution"></a>實戰 Demo Solution</h2><p>三個問題，一次解決：</p>
<ul>
<li><p>問題一：<code>驗證訂單</code>的邏輯是要換了怎麼辦？<br>ex: 我不想用「重複訂單」做為判斷該訂單是否合法(valid)的依據的話呢？</p>
</li>
<li><p>問題二：我們要怎麼新增<code>驗證訂單</code>的邏輯？<br>ex: 除了驗證「重複訂單」我還想驗證「訂購者的帳戶必須沒有被中止」才能成立訂單。</p>
</li>
<li><p>問題三：如果新增一個邏輯還好，要是新增「很多」驗證邏輯的話，怎麼避免 process 裡的程式迅速變成 spaghetti(義大利麵)？</p>
</li>
<li><p>問題四：新增「很多」驗證邏輯後，怎麼測試這些驗證邏輯有沒有正確運作？</p>
</li>
</ul>
<h4 id="Step_1_-__u5B9A_u7FA9_OrderValidator_Interface"><a href="#Step_1_-__u5B9A_u7FA9_OrderValidator_Interface" class="headerlink" title="Step 1 - 定義 OrderValidator Interface"></a>Step 1 - 定義 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OrderValidatorInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_2_-__u5C07_Validator__u7528_u53C3_u6578_u50B3_u5165_OrderProcessor__u4E26_u547C_u53EB_u6BCF_u500B_u50B3_u5165_u7684_u9A57_u8B49_u908F_u8F2F"><a href="#Step_2_-__u5C07_Validator__u7528_u53C3_u6578_u50B3_u5165_OrderProcessor__u4E26_u547C_u53EB_u6BCF_u500B_u50B3_u5165_u7684_u9A57_u8B49_u908F_u8F2F" class="headerlink" title="Step 2 - 將 Validator 用參數傳入 OrderProcessor 並呼叫每個傳入的驗證邏輯"></a>Step 2 - 將 Validator 用參數傳入 OrderProcessor 並呼叫每個傳入的驗證邏輯</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line">    <span class="keyword">private</span>   <span class="variable">$validators</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderProcessor constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(</span><br><span class="line">        BillerInterface <span class="variable">$biller</span>,</span><br><span class="line">        OrderRepository <span class="variable">$orders</span>,</span><br><span class="line">        array <span class="variable">$validators</span> = []</span><br><span class="line">    )</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;biller = <span class="variable">$biller</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;validators = <span class="variable">$validators</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 呼叫每個驗證邏輯</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;validators <span class="keyword">as</span> <span class="variable">$validator</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span>-&gt;validate(<span class="variable">$order</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;biller-&gt;bill(<span class="variable">$order</span>-&gt;getAccount()-&gt;id, <span class="variable">$order</span>-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_3_-__u9A57_u8B49_u300C_u91CD_u8907_u8A02_u55AE_u300D_u5BE6_u4F5C_OrderValidator_Interface"><a href="#Step_3_-__u9A57_u8B49_u300C_u91CD_u8907_u8A02_u55AE_u300D_u5BE6_u4F5C_OrderValidator_Interface" class="headerlink" title="Step 3 - 驗證「重複訂單」實作 OrderValidator Interface"></a>Step 3 - 驗證「重複訂單」實作 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentOrderValidator</span> <span class="keyword">implements</span> <span class="title">OrderValidatorInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_4_-__u9A57_u8B49_u300C_u8A02_u8CFC_u8005_u7684_u5E33_u6236_u5FC5_u9808_u6C92_u6709_u88AB_u4E2D_u6B62_u300D_u5BE6_u4F5C_OrderValidator_Interface"><a href="#Step_4_-__u9A57_u8B49_u300C_u8A02_u8CFC_u8005_u7684_u5E33_u6236_u5FC5_u9808_u6C92_u6709_u88AB_u4E2D_u6B62_u300D_u5BE6_u4F5C_OrderValidator_Interface" class="headerlink" title="Step 4 - 驗證「訂購者的帳戶必須沒有被中止」實作 OrderValidator Interface"></a>Step 4 - 驗證「訂購者的帳戶必須沒有被中止」實作 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuspendedOrderValidator</span> <span class="keyword">implements</span> <span class="title">OrderValidatorInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;getAccount()-&gt;isSuspended()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Suspended account may not order.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_5_-__u5229_u7528_Laravel__u63D0_u4F9B_u7684_IoC_Container__u62BD_u8C61_u5316_u521D_u59CB_OrderProcessor__u7684_u6D41_u7A0B"><a href="#Step_5_-__u5229_u7528_Laravel__u63D0_u4F9B_u7684_IoC_Container__u62BD_u8C61_u5316_u521D_u59CB_OrderProcessor__u7684_u6D41_u7A0B" class="headerlink" title="Step 5 - 利用 Laravel 提供的 IoC Container 抽象化初始 OrderProcessor 的流程"></a>Step 5 - 利用 Laravel 提供的 IoC Container 抽象化初始 OrderProcessor 的流程</h4><ul>
<li>可以先寫在 app/Providers/AppServiceProvider.php 的 boot() 裡面</li>
<li>如果以後要 bind 的東西太多，可以再拆到別的 Provider 的檔案中。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app/Providers/AppServiceProvider.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        app()-&gt;bind(<span class="string">'BillerInterface'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CreditCardBiller();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        app()-&gt;bind(<span class="string">'OrderProcessor'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OrderProcessor(</span><br><span class="line">                app()-&gt;make(<span class="string">'BillerInterface'</span>),   <span class="comment">// 運用上面的 bind 來取得 CreditCardBiller 實體</span></span><br><span class="line">                app()-&gt;make(OrderRepository::class),</span><br><span class="line">                [</span><br><span class="line">                    app()-&gt;make(RecentOrderValidator::class),</span><br><span class="line">                    app()-&gt;make(SuspendedOrderValidator::class)</span><br><span class="line">                ]</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這段程式會在 Laravel 啟動時就執行，作用是註冊一個 keyword 叫 <code>&#39;OrderProcessor&#39;</code> 在 container 中。</p>
<p>之後，當你使用 <code>App::make(&#39;OrderProcessor&#39;)</code> 時，便會執行 bind 中的 function。</p>
<p>最後會把兩個 validators 都初始化(instanciate) 好，塞(inject)到 new 出來的 OrderProcessor 實體(instance)中，並且回傳。</p>
<h4 id="Step_6_-__u6539_u7528_App_3A_3Amake__u4F86_u521D_u59CB_u5316_OrderProcessor_uFF0C_u53D6_u4EE3_u4E4B_u524D_u7684_new_OrderProcessor_28_29"><a href="#Step_6_-__u6539_u7528_App_3A_3Amake__u4F86_u521D_u59CB_u5316_OrderProcessor_uFF0C_u53D6_u4EE3_u4E4B_u524D_u7684_new_OrderProcessor_28_29" class="headerlink" title="Step 6 - 改用 App::make 來初始化 OrderProcessor，取代之前的 new OrderProcessor()"></a>Step 6 - 改用 App::make 來初始化 OrderProcessor，取代之前的 new OrderProcessor()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app/Http/Controllers/CheckoutController.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckoutController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 建立訂單 ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 處理訂單，之前是用 $orderProcessor = new OrderProcessor(...);</span></span><br><span class="line">        <span class="variable">$orderProcessor</span> = app()-&gt;make(<span class="string">'OrderProcessor'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$orderId</span> = <span class="variable">$orderProcessor</span>-&gt;process(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="string">"&lt;h2&gt;Done, 訂單 ID: "</span> . <span class="variable">$orderId</span> . <span class="string">"&lt;/h2&gt;"</span> .</span><br><span class="line">            <span class="string">"&lt;h2&gt;&#123;$order-&gt;getAccount()-&gt;name&#125;&lt;/h2&gt;"</span> .</span><br><span class="line">            <span class="string">"&lt;h2&gt;&#123;$order-&gt;getAmount()&#125;&lt;/h2&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>客倌們看到這邊，有沒有發現之後要新增、調整訂單驗證邏輯，只要修改這一段，就可以自己新增或拿掉某個驗證規則了：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app()-&gt;bind(<span class="string">'OrderProcessor'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderProcessor(</span><br><span class="line">        app()-&gt;make(<span class="string">'BillerInterface'</span>),</span><br><span class="line">        app()-&gt;make(OrderRepository::class),</span><br><span class="line">        [</span><br><span class="line">            app()-&gt;make(RecentOrderValidator::class),</span><br><span class="line">            app()-&gt;make(SuspendedOrderValidator::class),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新增更多證驗規則 ...</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="u8A73_u7D30_u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u8ACB_u5230_u5230_Laradiner__u8B80_u66F8_u6703__u4F86_u770B_u9583_u4EAE_u4EAE_Live_Coding_u3002"><a href="#u8A73_u7D30_u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u8ACB_u5230_u5230_Laradiner__u8B80_u66F8_u6703__u4F86_u770B_u9583_u4EAE_u4EAE_Live_Coding_u3002" class="headerlink" title="詳細過程請看 Git Repo Here，或請到到 Laradiner 讀書會 來看閃亮亮 Live Coding。"></a>詳細過程請看 <a href="https://github.com/dj1020/CH9_Open_Closed_Principle_Demo" target="_blank" rel="external">Git Repo Here</a>，或請到到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laradiner 讀書會</a> 來看閃亮亮 Live Coding。</h4><h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>其實只要你時時想著 SRP(單一職責原則)，不知不覺中程式很容易就符合 OCP(開放封閉原則)。但程式不必要太早優化，要是你的證驗邏輯永遠只有「驗證近期重複訂單」這一條的話，搞一堆 interface、validator、provider、bind 等等，反而是將解法複雜化，用牛刀來殺雞。</p>
<p>然而，一旦當需求有變，或是需求本身開始複雜化時，運用 Open Closed 原則來重構程式，會讓你的程式維護之路好走很多！如果一開始沒做這件事，之後的「破窗效應」很容易讓整個專案死掉，再也改不動，讓你的 application 從一個「軟體」變成「硬體」。謹記啊~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #22 - PHPUnit 到 CI 持續整合]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89day-22_PHPUNIT_%E5%88%B0_CI%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88/"/>
    <id>http://blog.dj1020.net/PHP也有day-22_PHPUNIT_到_CI持續整合/</id>
    <published>2016-02-25T11:30:34.000Z</published>
    <updated>2016-02-26T01:17:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CI_u3001CD"><a href="#CI_u3001CD" class="headerlink" title="CI、CD"></a>CI、CD</h2><ul>
<li>持續整合</li>
<li>持續交付</li>
</ul>
<h2 id="u81EA_u52D5_u5316_u6E2C_u8A66_u3001_u5831_u544A_u3001_u4F48_u7F72"><a href="#u81EA_u52D5_u5316_u6E2C_u8A66_u3001_u5831_u544A_u3001_u4F48_u7F72" class="headerlink" title="自動化測試、報告、佈署"></a>自動化測試、報告、佈署</h2><ul>
<li>避免</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="CI_u3001CD"><a href="#CI_u3001CD" class="headerlink" title="CI、CD"></a>CI、CD</h2><ul>
<li>持續整合</li>
<li>持續交付</li>
</ul>
<h2 id="u81E]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test Corner 講座#2 - 談 Mutation Testing@Mozilla]]></title>
    <link href="http://blog.dj1020.net/Test-Corner-%E8%AC%9B%E5%BA%A7-2-%E8%AB%87-Mutation-Testing-Mozilla/"/>
    <id>http://blog.dj1020.net/Test-Corner-講座-2-談-Mutation-Testing-Mozilla/</id>
    <published>2016-02-02T09:57:16.000Z</published>
    <updated>2016-02-02T13:38:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mutation_Testing_-_Mike_Lien"><a href="#Mutation_Testing_-_Mike_Lien" class="headerlink" title="Mutation Testing - Mike Lien"></a>Mutation Testing - Mike Lien</h1><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>1971 提出</li>
<li>用來判斷你寫的測試程式的品質</li>
<li>因為計算能力不足，所以議題淡化</li>
</ul>
<h2 id="Code_Coverge_Analysis"><a href="#Code_Coverge_Analysis" class="headerlink" title="Code Coverge Analysis"></a>Code Coverge Analysis</h2><ul>
<li>Full covered via analyses != good testing</li>
<li>Code coverge = Tell us lines tested</li>
<li><code>Code not covered -&gt; Using mutation testing</code></li>
</ul>
<h2 id="Step_1_3A_Generate_the_Mutation"><a href="#Step_1_3A_Generate_the_Mutation" class="headerlink" title="Step 1: Generate the Mutation"></a>Step 1: Generate the Mutation</h2><ul>
<li>故意 inject 一些錯誤的 code，讓跑測試時產生 error</li>
<li>definition: 當故意塞 error 進去時，就是 mutation</li>
<li>每次只改一個小判斷，稱為一個 mutant</li>
<li>每次只改一個小判斷，造成太過大量的測試，以及 compile 時間 -&gt; 解法：改 compiled code</li>
</ul>
<h2 id="Step_2_3A_Mutation_Testing"><a href="#Step_2_3A_Mutation_Testing" class="headerlink" title="Step 2: Mutation Testing"></a>Step 2: Mutation Testing</h2><ul>
<li>Stop when a test fails 不用整個 suite 跑完</li>
<li>Choose your tests</li>
<li>利用 version control，只測相關連的 code</li>
</ul>
<h2 id="Step_3_3A_Kill_or_Leave"><a href="#Step_3_3A_Kill_or_Leave" class="headerlink" title="Step 3: Kill or Leave"></a>Step 3: Kill or Leave</h2><ul>
<li>Kill the mutation when test failed</li>
<li>Leave mutation when all tests are passed</li>
</ul>
<h2 id="Step_4_3A_The_Results"><a href="#Step_4_3A_The_Results" class="headerlink" title="Step 4: The Results"></a>Step 4: The Results</h2><ul>
<li>結果需要人工去看</li>
<li>期望測試碼可以抓出 mutant</li>
<li>結果分析：<ul>
<li>Dead code</li>
<li>Non-functional code</li>
<li>不會跑到的 code</li>
<li>無論怎麼改都不影響結果的 code ex: 迴圈少跑一個的例子</li>
</ul>
</li>
<li>把 always pass 的地方補上測試，讓測試 fail，然後 kill mutation operator 讓測試 pass。</li>
</ul>
<h1 id="Data_Driven_Testing_in_Payment_System_-_Alan_Liu"><a href="#Data_Driven_Testing_in_Payment_System_-_Alan_Liu" class="headerlink" title="Data Driven Testing in Payment System - Alan Liu"></a>Data Driven Testing in Payment System - Alan Liu</h1><p>CyberSoft - 銀行的代工廠，金融產品</p>
<h2 id="u7279_u6027"><a href="#u7279_u6027" class="headerlink" title="特性"></a>特性</h2><ul>
<li>金融產品 Life Cycle 長，好的測試會讓公司省很多錢</li>
<li>用 Data 來測系統，需很多測資保證系統正確</li>
<li>帳務計算系統<ul>
<li>一堆商業邏輯和運算及 query 一堆 tables</li>
<li>每個特店還可能談出不同邏輯</li>
<li>最重要就是算出來錢絕對不能錯！</li>
<li>需要大量不同的測試資料，需要有各式組合的測資</li>
</ul>
</li>
<li>以 Data Generator 產生各式不同的「帳務資料」測資</li>
<li>以 Checker 來驗證算出來的結果</li>
</ul>
<h2 id="u67B6_u69CB"><a href="#u67B6_u69CB" class="headerlink" title="架構"></a>架構</h2><ul>
<li>Testing framework: Robot framework 提供的 DDT approach</li>
<li>DB data generator: sqlalchemy</li>
<li>Checker: Robot 中的 keyword</li>
</ul>
<h2 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h2><ul>
<li>利用 keyword driven 方式產生測資，同時設定 expected value</li>
</ul>
<h2 id="u4F7F_u7528_DDT__u5728_u9A57_u8B49_u91D1_u878D_u7522_u54C1_u7684_u597D_u8655"><a href="#u4F7F_u7528_DDT__u5728_u9A57_u8B49_u91D1_u878D_u7522_u54C1_u7684_u597D_u8655" class="headerlink" title="使用 DDT 在驗證金融產品的好處"></a>使用 DDT 在驗證金融產品的好處</h2><ul>
<li>可以在短時間內完成大量不同的測試案例，只要商業邏輯不變動，即可大量提高 ROI</li>
<li>可以專注在要用怎麼樣的資料來涵蓋測試範圍(這正是 data driven testing 帶來的好處)</li>
<li>專心測商業邏輯，不用(少)管準備假資料/驗證資料的麻煩</li>
</ul>
<h2 id="u6311_u6230"><a href="#u6311_u6230" class="headerlink" title="挑戰"></a>挑戰</h2><ul>
<li>繁瑣的資料產生邏輯</li>
<li>如何對結果驗證，寫 Checker 程式</li>
</ul>
<h1 id="Xcode__u7684_u81EA_u52D5_u5316_u6E2C_u8A66_for_iOS_development"><a href="#Xcode__u7684_u81EA_u52D5_u5316_u6E2C_u8A66_for_iOS_development" class="headerlink" title="Xcode 的自動化測試 for iOS development"></a>Xcode 的自動化測試 for iOS development</h1><h2 id="Demo_1_-_UI_Recording_/_Playback"><a href="#Demo_1_-_UI_Recording_/_Playback" class="headerlink" title="Demo 1 - UI Recording / Playback"></a>Demo 1 - UI Recording / Playback</h2><ul>
<li>開專案</li>
<li>加入 target(package) 把 UI Testing bundle 加入專案</li>
<li>可選 Swift / Object-C 推薦 Swift 語法較簡潔</li>
<li>有 setUp/tearDown，每個測試以 test 為開頭</li>
<li>直接操作模擬器就可以即時錄製！酷！</li>
</ul>
<h2 id="UI_Testing__u6D41_u7A0B"><a href="#UI_Testing__u6D41_u7A0B" class="headerlink" title="UI Testing 流程"></a>UI Testing 流程</h2><ul>
<li>Locale Element &lt;—&gt; Operate Element &lt;–&gt; Verify</li>
<li>Example:<ul>
<li>// asseration</li>
<li>XCAssertEqual();</li>
</ul>
</li>
</ul>
<h2 id="Demo_2"><a href="#Demo_2" class="headerlink" title="Demo 2 -"></a>Demo 2 -</h2><ul>
<li><p>要設 [addBtn setAccessibilityIdentifier:@”Add”]; 以免呈現是多國語言的介面</p>
</li>
<li><p>需要 iOS 9 以上，搭配 OSX 10.11 才能跑</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mutation_Testing_-_Mike_Lien"><a href="#Mutation_Testing_-_Mike_Lien" class="headerlink" title="Mutation Testing - Mike Lien"></a>Mu]]>
    </summary>
    
      <category term="Test Corner" scheme="http://blog.dj1020.net/tags/Test-Corner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - SOLID 原則 (1) Single Responsibility Principle 單一職責原則 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(1)-Single-Responsitory-Principle-2016-01-21/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(1)-Single-Responsitory-Principle-2016-01-21/</id>
    <published>2016-01-18T12:17:59.000Z</published>
    <updated>2016-03-03T06:08:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例 1 前置作業"></a>案例 1 前置作業</h2><h4 id="u6309_u6B64_u67E5_u770B_Git__u6E90_u78BC"><a href="#u6309_u6B64_u67E5_u770B_Git__u6E90_u78BC" class="headerlink" title="按此查看 Git 源碼"></a><a href="https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo" target="_blank" rel="external">按此</a>查看 Git 源碼</h4><ol>
<li>建立專案 <code>laravel new ch8_SRP_demo</code></li>
<li>進入專案目錄 <code>cd ch8_SRP_demo</code></li>
<li>安裝 Laravel 相依套件 <code>composer install</code></li>
<li>編輯 .env 設定資料庫帳密，還有記得 <code>php artisan key:generate</code></li>
<li>利用 migrate 測試資料庫設定 <code>php artisan migrate:install</code></li>
<li>建立 <code>Account</code> model 類別和對應的 table migration <code>php artisan make:model MyCart/Account -m</code></li>
<li>同上，建立 <code>Order</code> model 類別和 table <code>php artisan make:model MyCart/Order -m</code></li>
<li>同上，建立 <code>Product</code> model 類別和 table <code>php artisan make:model MyCart/Product -m</code></li>
<li>建立測試用 Controller 透過 <code>php artisan make:controller CheckoutController</code></li>
<li>(optional) 補一下 <a href="https://gist.githubusercontent.com/barryvdh/5227822/raw/811f21a14875887635bb3733aef32da51fa0501e/_ide_helper.php" target="_blank" rel="external">ide_helper</a> 和 <a href="https://gist.githubusercontent.com/barryvdh/bb6ffc5d11e0a75dba67/raw/1467343b1140f568c8e30656926180cd283f283c/.phpstorm.meta.php" target="_blank" rel="external">phpsotrm meta</a> 協助 PhpStorm 語法顯示</li>
<li>在 <code>MyCart</code> 目錄下建立 <code>MyCart</code> 類別，還有模擬加入購物車並結帳的行為，建立 routes 和 checkout 頁面</li>
<li>此時進入 checkout 頁報錯誤是正常，這時才開始一個個補齊相關的 production code 和 DB 欄位等等，讓頁面顯示</li>
<li>補上要處理訂單的 handler，並設定 routes 接 form post 資料</li>
<li>建立訂單(Order)，以及訂單處理流程(OrderProcessor)，還有金流處理介面(BillerInterface)，報錯正常，還未實作</li>
<li>完成案例 1，實作處理訂單流程</li>
</ol>
<h2 id="u55AE_u4E00_u8077_u8CAC_u539F_u5247__28Single_Responsibility_Principle_29"><a href="#u55AE_u4E00_u8077_u8CAC_u539F_u5247__28Single_Responsibility_Principle_29" class="headerlink" title="單一職責原則 (Single Responsibility Principle)"></a>單一職責原則 (Single Responsibility Principle)</h2><p>所謂單一職責原則(SRP)，按照英文直接翻譯「<em>應該且僅有一個原因引起類別的變更</em>」想必大家還是不了解是什麼意思，如果用閃亮亮的話來說，就是<br><br></p>
<blockquote>
<font size="+2">讓一個 class/method 只做一件事</font>

</blockquote>
<p><br><br>也可以說<br><br></p>
<blockquote>
<font size="+2">特定需求改變的時候，只有「一個」相關的 class/method 需要做修改。</font>

</blockquote>
<p><br><br>讓我們直接來看一個例子：</p>
<h4 id="u6848_u4F8B_1_3A"><a href="#u6848_u4F8B_1_3A" class="headerlink" title="案例 1:"></a>案例 1:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">process</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        echo <span class="string">"&lt;h4&gt;訂單處理中...&lt;/h4&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        $recent = $<span class="keyword">this</span>-&gt;getRecentOrderCount($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($recent &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller-&gt;bill($order-&gt;getAccount()-&gt;id, $order-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        $id = DB::table(<span class="string">'orders'</span>)-&gt;insertGetId(array(</span><br><span class="line">            <span class="string">'account'</span>    =&gt; $order-&gt;getAccount()-&gt;id,</span><br><span class="line">            <span class="string">'amount'</span>     =&gt; $order-&gt;getAmount(),</span><br><span class="line">            <span class="string">'created_at'</span> =&gt; Carbon::now()</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> function <span class="title">getRecentOrderCount</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $timestamps = Carbon::now()-&gt;subMinutes(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DB::table(<span class="string">'orders'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'account'</span>, $order-&gt;getAccount()-&gt;id)</span><br><span class="line">            -&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, $timestamps)</span><br><span class="line">            -&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6848_u4F8B_u7814_u8A0E_uFF1A"><a href="#u6848_u4F8B_u7814_u8A0E_uFF1A" class="headerlink" title="案例研討："></a>案例研討：</h4><ol>
<li>這段例子，如果按照「單一職責原則」來看有什麼問題？會造成什麼影響？ (拜託別回答：因為沒有「<em>一個 class/method 做一件事</em>」)</li>
<li>那要怎麼樣才叫「一件事」？</li>
<li>如何把這「一件事」從 <code>OrderProcessor</code> 中 <code>process</code> 的職責中抽離，卻不影響原本已寫好的 Code？</li>
</ol>
<p><br><br><br><br><br><br>========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ==========<br><br><br></p>
<h4 id="u8077_u8CAC_1_uFF1A_u986F_u793A__u201C_u8A02_u55AE_u8655_u7406_u4E2D__u2026_u201D"><a href="#u8077_u8CAC_1_uFF1A_u986F_u793A__u201C_u8A02_u55AE_u8655_u7406_u4E2D__u2026_u201D" class="headerlink" title="職責 1：顯示 “訂單處理中 …”"></a>職責 1：顯示 “訂單處理中 …”</h4><p>“顯示” 這件事很明顯不是 process 該做的吧，問題是要放到哪呢？</p>
<h4 id="u8077_u8CAC_2_uFF1A_u53D6_u5F97_u6700_u65B0_u8A02_u55AE_u7B46_u6578"><a href="#u8077_u8CAC_2_uFF1A_u53D6_u5F97_u6700_u65B0_u8A02_u55AE_u7B46_u6578" class="headerlink" title="職責 2：取得最新訂單筆數"></a>職責 2：取得最新訂單筆數</h4><p>要使用 account id 來去資料庫撈資料決定最新訂單筆數，明顯不是已經在 <code>process</code> 中該做的。</p>
<h4 id="u8077_u8CAC_3_uFF1A_u5229_u7528_u8A02_u55AE_u7B46_u6578_uFF0C_u5075_u6E2C_u662F_u4E0D_u662F_u91CD_u8907_u7684_u8A02_u55AE"><a href="#u8077_u8CAC_3_uFF1A_u5229_u7528_u8A02_u55AE_u7B46_u6578_uFF0C_u5075_u6E2C_u662F_u4E0D_u662F_u91CD_u8907_u7684_u8A02_u55AE" class="headerlink" title="職責 3：利用訂單筆數，偵測是不是重複的訂單"></a>職責 3：利用訂單筆數，偵測是不是重複的訂單</h4><p>這個閃亮亮覺得有爭議，小系統說真的，是可以放在 <code>OrderProcessor</code> 的類別裡的，但應該抽出一個 method 專門處理 <code>isDuplicateOrder()</code> 這個判斷。至於抽出來的 <code>isDuplicateOrder()</code> 又該放哪呢？</p>
<h4 id="u8077_u8CAC_4_uFF1A_u900F_u904E_biller__u9032_u884C_u7D50_u5E33"><a href="#u8077_u8CAC_4_uFF1A_u900F_u904E_biller__u9032_u884C_u7D50_u5E33" class="headerlink" title="職責 4：透過 biller 進行結帳"></a>職責 4：透過 biller 進行結帳</h4><p>已經交由 biller 處理了，本來就是處理訂單的流程之一。</p>
<h4 id="u8077_u8CAC_5_uFF1A_u7559_u4E0B_u8A02_u55AE_u8A18_u9304"><a href="#u8077_u8CAC_5_uFF1A_u7559_u4E0B_u8A02_u55AE_u8A18_u9304" class="headerlink" title="職責 5：留下訂單記錄"></a>職責 5：留下訂單記錄</h4><p>這個蠻多人應該很容易混淆吧，感覺訂單記錄本來就是處理訂單要做的啊。那閃亮亮換個問法，會不會有不需要 biller 結帳，也不用檢查有沒有重複訂單，但卻要留下訂單記錄的情況？例如：買贈品或免費的商品、例如對已存在的訂單做取消的記錄。</p>
<p><br><br><br><br><br><br><br><br>========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ==========</p>
<h2 id="u9084_u8A18_u5F97_u300C_u4E00_u500B_class__u53EA_u505A_u4E00_u4EF6_u4E8B_u300D_u55CE_uFF1F_u525B_u525B_u6848_u4F8B_u7814_u8A0E_u57CB_u4E86_u4E00_u500B_u96F7"><a href="#u9084_u8A18_u5F97_u300C_u4E00_u500B_class__u53EA_u505A_u4E00_u4EF6_u4E8B_u300D_u55CE_uFF1F_u525B_u525B_u6848_u4F8B_u7814_u8A0E_u57CB_u4E86_u4E00_u500B_u96F7" class="headerlink" title="還記得「一個 class 只做一件事」嗎？剛剛案例研討埋了一個雷"></a>還記得「一個 class 只做一件事」嗎？剛剛案例研討埋了一個雷</h2><p>剛剛的案例研討裡埋了一個雷，講了半天沒有討論到：</p>
<h4 id="u90A3_process__u65B9_u6CD5_u7684_u8077_u8CAC_u662F_u4EC0_u9EBC_u554A_uFF1F"><a href="#u90A3_process__u65B9_u6CD5_u7684_u8077_u8CAC_u662F_u4EC0_u9EBC_u554A_uFF1F" class="headerlink" title="那 process 方法的職責是什麼啊？"></a>那 <code>process</code> 方法的職責是什麼啊？</h4><p>怎麼職責全部分光光了？</p>
<blockquote>
<p><code>OrderProcessor</code> 中 <code>process</code> 的職責在於處理「流程」<br>流程包含：(1) 取得最新訂單筆數、(2) 偵測重複訂單、(3) 進行結帳、(4) 留下訂單記錄，<br>但 (1) 到 (4) 的實作上怎麼進行，則應交給其他的 class/method 來完成。</p>
</blockquote>
<h2 id="u91CD_u69CB_u6642_u9593"><a href="#u91CD_u69CB_u6642_u9593" class="headerlink" title="重構時間"></a>重構時間</h2><ol>
<li>顯示 “訂單處理中 …” 移到 Controller 或其他地方</li>
<li>將 “取得最新訂單筆數” 的實作，移到新建的 <code>OrderRepository</code> 類別，並且 inject 到 <code>OrderProcessor</code> 裡。</li>
<li>將 “偵測重複訂單” 的邏輯新建一個 <code>isDuplicateOrder()</code> 方法在 <code>OrderProcessor</code> 裡</li>
<li>把 “留下訂單記錄” 的職責移到 <code>OrderRepository</code> 的 <code>logOrder</code> 方法中</li>
</ol>
<h4 id="u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u5230_Laradiner__u8B80_u66F8_u6703_28_u898B_u7F6E_u9802_u6587_29__u4F86_u770B_Live_Coding_u3002"><a href="#u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u5230_Laradiner__u8B80_u66F8_u6703_28_u898B_u7F6E_u9802_u6587_29__u4F86_u770B_Live_Coding_u3002" class="headerlink" title="過程請看 Git Repo Here，或到 Laradiner 讀書會(見置頂文) 來看 Live Coding。"></a>過程請看 <a href="https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo" target="_blank" rel="external">Git Repo Here</a>，或到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laradiner 讀書會(見置頂文)</a> 來看 Live Coding。</h4><h4 id="u91CD_u69CB_u5F8C_u7684_u597D_u8655_uFF0C_u8209_u4F8B"><a href="#u91CD_u69CB_u5F8C_u7684_u597D_u8655_uFF0C_u8209_u4F8B" class="headerlink" title="重構後的好處，舉例"></a>重構後的好處，舉例</h4><ol>
<li>「抓取最新訂單筆數」的邏輯改變成抓 2 分鐘以內，不需動 <code>process</code> 方法</li>
<li>「判斷重複訂單」的邏輯變成不是按照 <code>account id</code> 來判斷，改成依照所有商品品項如果都一樣的話表示重複。</li>
<li>「留下訂單記錄」</li>
</ol>
<h4 id="u91CD_u69CB_u5B8C_u6210_u5982_u4E0B"><a href="#u91CD_u69CB_u5B8C_u6210_u5982_u4E0B" class="headerlink" title="重構完成如下"></a>重構完成如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/MyCart/Processors/OrderProcessor.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $orders;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(BillerInterface $biller, OrderRepository $orders)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller = $biller;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;orders = $orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">process</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>-&gt;isDuplicateOrder($order)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller-&gt;bill($order-&gt;getAccount()-&gt;id, $order-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        $id = $<span class="keyword">this</span>-&gt;orders-&gt;logOrder($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> function <span class="title">isDuplicateOrder</span><span class="params">($order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $recent = $<span class="keyword">this</span>-&gt;orders-&gt;getRecentOrderCount($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $recent &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/MyCart/Repository/OrderRepository.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getRecentOrderCount</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $timestamps = Carbon::now()-&gt;subMinutes(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DB::table(<span class="string">'orders'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'account'</span>, $order-&gt;getAccount()-&gt;id)</span><br><span class="line">            -&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, $timestamps)</span><br><span class="line">            -&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logOrder</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $id = DB::table(<span class="string">'orders'</span>)-&gt;insertGetId(array(</span><br><span class="line">            <span class="string">'account'</span>    =&gt; $order-&gt;getAccount()-&gt;id,</span><br><span class="line">            <span class="string">'amount'</span>     =&gt; $order-&gt;getAmount(),</span><br><span class="line">            <span class="string">'created_at'</span> =&gt; Carbon::now()</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>其實如果真的有做好遵循 SRP 的原則的話，你的程式碼的彈性會相對高，Debug 速度也會超快，每個class/method責任很清楚(<del>考試都考100分 噗</del>)，修 bug 不容易動到已有程式。不過，如何去切分 class 的職責其實是一門「藝術」，往往花最多時間的不是寫 Code 而是在取一個適當的類別名字，給予適當的職責，哈哈。只要你時時想著 SRP，不知不覺中很容易就符合下回將介紹的 「Open Close Principle (開放封閉原則)」，敬請期待！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例 1 前置作業"></a>案]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - Laravel: From Apprentice To Artisan - Ch. 6 Applied Architecture: Decoupling Handlers (解耦合處理程序) 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laravel-From-Apprentice-To-Artisan-Ch-6-Applied-Architecture-Decoupling-Handlers-%E8%A7%A3%E8%80%A6%E5%90%88%E8%99%95%E7%90%86%E7%A8%8B%E5%BA%8F/"/>
    <id>http://blog.dj1020.net/Laravel-From-Apprentice-To-Artisan-Ch-6-Applied-Architecture-Decoupling-Handlers-解耦合處理程序/</id>
    <published>2015-11-27T01:04:23.000Z</published>
    <updated>2016-01-22T07:34:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4ECB_u7D39"><a href="#u4ECB_u7D39" class="headerlink" title="介紹"></a>介紹</h2><h3 id="u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u901F_u8B1B_u89E3_15__u5206_u9418_29"><a href="#u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u901F_u8B1B_u89E3_15__u5206_u9418_29" class="headerlink" title="前置作業 (Demo 帶快速講解 15 分鐘)"></a>前置作業 (Demo 帶快速講解 15 分鐘)</h3><h4 id="Git_Repo__u6309_u6B64"><a href="#Git_Repo__u6309_u6B64" class="headerlink" title="Git Repo 按此"></a><a href="https://github.com/dj1020/Laradiner_Decoupling_Handler" target="_blank" rel="external">Git Repo 按此</a></h4><ol>
<li><code>laravel new ch6_demo</code></li>
<li><code>cd ch6_demo</code></li>
<li><code>php artisan key:generate</code></li>
<li><code>php artisan serve</code> 開一個 web server 測試用</li>
<li>用 CDN 加入 bootstrap css，快速建 form 表單</li>
<li><code>php artisan make:controller SmsController</code></li>
<li>設 routes 測試 controller (新手注意：有雷，CSRF Token)</li>
<li><code>php artisan make:event SendSMSEvent</code> 建立事件</li>
<li><code>php artisan handler:event SendSMS --event SendSMSEvent --queued</code>  建立事件的處理 Handler</li>
<li>在 <code>EventServiceProvider</code> 註冊 event handler (Ref: Registering Events / Listeners)</li>
<li>把 form data 傳入 event 物件，在 handler 中取出</li>
<li>實作 handler (SendSMS class)</li>
<li>設定 .env 檔並建立資料庫 <code>ch6_demo</code> (demo/secret)</li>
<li><code>php artisan migrate</code> (建立 User Table)</li>
<li><code>php artisan make:seeder UsersSeeder</code> 建立 seeder 用來存假 User 資料，並編輯 <code>DatabaseSeeder.php</code></li>
<li><code>php artisan db:seed</code>  (或 php artisan migrate –seed)，記得重啟 <code>php artisan serve</code></li>
<li><code>php artisan migrate:refresh --seed</code> 重建資料庫及匯入假 User 資料</li>
<li><code>php artisan make:model Messages --migration</code> 建 messages table 和 model class</li>
<li>清空資料庫，重新 <code>php artisan migrate --seed</code>，記得重啟 php artisan serve</li>
<li>建立 user 和 messages 兩表之間的 relation  (Ref: One to Many Relation)</li>
</ol>
<h2 id="u89E3_u8026_u5408_handler"><a href="#u89E3_u8026_u5408_handler" class="headerlink" title="解耦合 handler"></a>解耦合 handler</h2><p>這裡書中使用一段 Code 來解釋「<strong>解耦合 handler</strong>」的概念，其實講的就是 SOLID 中的<strong>「Single Responsibility Principle」單一職責原則</strong>。它給了一個傳簡訊(SMS)序列(Queue)的例子，用的版本是 Laravel 4 ，<strong>下面這段 Code 已經被我用 Laravel 5.1 的 Event 機制改寫過和原書中稍有不同</strong>，大意是當有要傳送簡訊的 event 被送進 Queue 裡，按 Queue 的機制，會呼叫對應的 handler 來處理這個 event，所謂的 handler 就是指 <code>SendSMS</code> 這個類別，Queue 會讓 handler 類別中的 handle 方法被觸發。</p>
<p>handler 透過實例化 <code>Mitake_SMS</code> 這個類別，使用 <code>sendTextMessage</code> 方法呼叫第三方的 API 完成傳送線上簡訊(SMS)。在發出簡訊後，把送出的簡訊用 Eloquent 物件存進本地的資料庫中做為 log 紀錄起來，且和 User 進行關聯，這樣如有需要我們就可以查詢所有這個 User 送出過的簡訊歷史紀錄。原書中存進資料庫的是「傳給該 User 的簡訊」，為了講解方便我這邊用的例子是存「該 User 送出過的簡訊」，我有對原始碼稍做修改，講起來比較順也比較容易和實務對應做理解，之後會以這段 Code 為實例 demo 怎樣解耦合，後續實例也都以此為基礎。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendSMS</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    use InteractsWithQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">handle</span><span class="params">(SendSMSEvent $event)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $data = $event-&gt;getData();</span><br><span class="line">        $mitake = <span class="keyword">new</span> Mitake_SMS($<span class="keyword">this</span>-&gt;apiKey);</span><br><span class="line">        $mitake-&gt;sendTextMessage([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        $user = \App\User::find($data[<span class="string">'user'</span>][<span class="string">'id'</span>]);</span><br><span class="line">        $user-&gt;messages()-&gt;create([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5728_u9019_u6BB5_Code__u7684_u4F8B_u5B50_u4E2D_uFF0C_u4F60_u6709_u6C92_u6709_u770B_u51FA_u4F86_u4EC0_u9EBC_u554F_u984C_uFF1F_282__u5206_u9418_29"><a href="#u5728_u9019_u6BB5_Code__u7684_u4F8B_u5B50_u4E2D_uFF0C_u4F60_u6709_u6C92_u6709_u770B_u51FA_u4F86_u4EC0_u9EBC_u554F_u984C_uFF1F_282__u5206_u9418_29" class="headerlink" title="在這段 Code 的例子中，你有沒有看出來什麼問題？(2 分鐘)"></a>在這段 Code 的例子中，你有沒有看出來什麼問題？(2 分鐘)</h4><p>可往 <strong>可維護性(Maintainability)、可擴充性(Scalability)、可測試性(Testability)、重用性(Reusability)</strong> … 來想</p>
<p>[閃亮亮PS] : 如果你對這段 Code 的實作細節有興趣，你可以從下面連結瞭解 Laravel 的 Eloquent 和 Event Handler 的用法：</p>
<ol>
<li><a href="https://laravel.com/docs/5.1/eloquent#retrieving-single-models" target="_blank" rel="external">Retrieving Single Models / Aggregates</a></li>
<li><a href="http://laravel.com/docs/5.1/eloquent-relationships#one-to-many" target="_blank" rel="external">One To Many Relation</a></li>
<li><a href="http://laravel.com/docs/5.1/eloquent-relationships#inserting-related-models" target="_blank" rel="external">Inserting Related Models (示例在第三小點：The Create Method)</a></li>
<li><a href="http://laravel.com/docs/5.0/events#basic-usage" target="_blank" rel="external">Laravel Events (建議完整看完，沒有很長)</a></li>
</ol>
<p><br><br><br><br><br></p>
<h2 id="u554F_u984C_u8207_u6311_u6230"><a href="#u554F_u984C_u8207_u6311_u6230" class="headerlink" title="問題與挑戰"></a>問題與挑戰</h2><h3 id="u9019_u6BB5_Code__u7684_u554F_u984C_u5728_u65BC_uFF1A"><a href="#u9019_u6BB5_Code__u7684_u554F_u984C_u5728_u65BC_uFF1A" class="headerlink" title="這段 Code 的問題在於："></a>這段 Code 的問題在於：</h3><ol>
<li>這一段 Code 很難被「自動化地」測試，因為在 handle 方法中直接實例化 <code>Mitake_SMS</code> 這個類別，我們無法利用依賴注入 (DI) 的方式，注入一個 Mock 物件來進行測試。</li>
<li>handle 方法裡直接使用 \App\User (Eloquent 物件) 導致另一個測試的問題，我們無法在不觸及資料庫的情況下對 handle 方法進行單元測試。</li>
<li>還有，因為傳送簡訊的主要邏輯寫在 handle 方法裡，我們要傳簡訊變成一定要經過 Queue 的機制才能傳送，使得傳簡訊邏輯和 Queue 緊密耦合。換種說法，就是我們沒辦法不用 Queue 來傳簡訊。</li>
</ol>
<p><br></p>
<h3 id="u9019_u4E9B_u554F_u984C_uFF0C_u5E36_u4F86_u4E86_u5E7E_u500B_u6311_u6230_uFF1A"><a href="#u9019_u4E9B_u554F_u984C_uFF0C_u5E36_u4F86_u4E86_u5E7E_u500B_u6311_u6230_uFF1A" class="headerlink" title="這些問題，帶來了幾個挑戰："></a>這些問題，帶來了幾個挑戰：</h3><ul>
<li><strong>挑戰 1</strong>：有沒有什麼寫法是可以換簡訊平台卻不需要修改已經寫好的 Production Code？</li>
<li><strong>挑戰 2</strong>：在修改最少的情況下，讓這個 Mitake_SMS 類別可以被 Mock 取代，進而測試 handle 方法</li>
<li><strong>挑戰 3</strong>：如何在不觸及資料庫操作的前提下，寫測試驗證 handle 方法內的處理邏輯？</li>
<li><strong>挑戰 4</strong>：如果我不想使用 Event 系統來發簡訊的話怎麼辦？</li>
</ul>
<p><br></p>
<p>[閃亮亮PS] : 解法請來 Laradiner 看 Live Demo 或 GitHub Repo HERE，重構的過程比較重要，會一個一個挑戰完成，而不是一次完成四個。書中只示範了最終結果，而且省略了相關的一些 Controller 或是 Event 的原始碼，如果對 Laravel 不熟的朋友會比較難體會。</p>
<p><strong>Demo (30 分鐘)</strong></p>
<h2 id="u89E3_u8026_u5408_u4E4B_u5F8C"><a href="#u89E3_u8026_u5408_u4E4B_u5F8C" class="headerlink" title="解耦合之後"></a>解耦合之後</h2><p>以下是達成挑戰 1,2,3,4 之後，解耦合完成的結果。主要轉變是把 <strong>“傳簡訊”</strong> 這個行為交給了 User Model <strong>不再直接透過 handler</strong> 執行，這樣就可以不用 Queue 也能傳簡訊。簡訊平台物件 courier 也不再直接實例化，改以參數傳入，也就是所謂的 Dependency Injection 依賴注入(俗稱 DI)，達成解耦合。courier 因為是以參數傳入，不會綁死在 <code>Mitake_SMS</code> 這個類別上，方便切換簡訊平台，也方便測試時使用 Mock 物件替換 courier。但為了確認傳入的 courier 一定擁有並實作 <code>sendTextMessage</code> 這個方法，所以在參數列裡使用 type hinting 強制傳入的 courier 物件一定要實作 <code>SmsCourierInterface</code> 這個介面，介面中則定義一定要實作 <code>sendTextMessage</code> 方法。改寫過後，handler 的職責只剩一個：<strong>給 user 物件足夠資訊，叫 user 傳簡訊</strong>。也就是書中所指的 <strong>Translation Layer 唯一應該做的事情</strong>！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendSMS</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    use InteractsWithQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $users;</span><br><span class="line">    <span class="keyword">private</span> $courier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(UserRepository $repo, SmsCourierInterface $courier)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;users = $repo;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;courier = $courier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">handle</span><span class="params">(SendSMSEvent $event)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $data = $event-&gt;getData();</span><br><span class="line"></span><br><span class="line">        $user = $<span class="keyword">this</span>-&gt;users-&gt;find($data[<span class="string">'user'</span>][<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line">        $user-&gt;sendSms($<span class="keyword">this</span>-&gt;courier, $data[<span class="string">'message'</span>], $data[<span class="string">'phone'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊是測試程式碼</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">it_should_send_sms_message</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'user'</span>    =&gt; [<span class="string">'id'</span> =&gt; <span class="number">1</span>],</span><br><span class="line">            <span class="string">'phone'</span>   =&gt; <span class="string">'12345678'</span>,</span><br><span class="line">            <span class="string">'message'</span> =&gt; <span class="string">'test message here...'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $user = Mockery::mock(<span class="string">'\App\User[sms]'</span>); <span class="comment">// partial mock</span></span><br><span class="line">        $relation = Mockery::mock(<span class="string">'stdClass'</span>);</span><br><span class="line">        $courier = Mockery::mock(SmsCourierInterface::<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        $user-&gt;shouldReceive(<span class="string">'sms'</span>)-&gt;once()-&gt;andReturn($relation);</span><br><span class="line">        $relation-&gt;shouldReceive(<span class="string">'create'</span>)-&gt;once()-&gt;with([</span><br><span class="line">            <span class="string">'to'</span> =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        $courier-&gt;shouldReceive(<span class="string">'sendTextMessage'</span>)-&gt;once()-&gt;with([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>]</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act &amp; Assert</span></span><br><span class="line">        $user-&gt;sendSms($courier, $data[<span class="string">'message'</span>], $data[<span class="string">'phone'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u5176_u4ED6_Handlers"><a href="#u5176_u4ED6_Handlers" class="headerlink" title="其他 Handlers"></a>其他 Handlers</h2><p>這裡提的另一個例子比較單純，總而言之就是教你如何讓你的 handler 只做單純的 Translation Layer，把一些複雜的商業邏輯隔離在 Framework 的架構之外。想想看，這段 Code 又出了什麼問題？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router::filter(<span class="string">'premium'</span>, function() &#123;</span><br><span class="line">   <span class="keyword">return</span> Auth::user() &amp;&amp; Auth::user()-&gt;plan == <span class="string">'premium'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>[閃亮亮PS] : Laravel 5.1 中使用 middleware 來取代 filter ，所以這一段 return 的邏輯應該會出現是出現在某個 middleware 中。</p>
<p>你看！這麼簡短的 Code，看起來多麼無辜啊！怎麼可能會有什麼問題呢？</p>
<p>然而，雖然這是一段很小的 filter 程式碼，但它已經洩露太多<del>國家機密(誤)</del> 程式細節，好比，filter 居然知道 Auth 回傳的 user 物件中有一個叫 “plan” 的屬性，還知道，如果 “plan” 屬性等於 “premium” 表示可以擁有 premium 資格。<strong>這會埋下什麼地雷？</strong></p>
<ol>
<li><strong>屬性名稱改了沒改到 filter</strong>。如果 plan 屬性被某人在 User 物件中改名成 privilege (也許是因為資料庫欄位改名稱了)，卻沒注意到 filter 中也有用到 plan 這個屬性…</li>
<li><strong>屬性值改了沒改到 filter</strong>。如果以後屬性要等於 “VIP” 而不是 “premium” 的話…</li>
<li><strong>要改判斷 premium 資格的邏輯 filter 就得跟著改</strong>。例如，要擁有 ‘premium’ 資格還必需年消費總額到10萬元以上才行。</li>
</ol>
<p>Sure，你當然可以說，那只要小心一點，記得改就好了。但如果有別人埋這個雷給你踩，在你花了數小時 debug 之後不氣死才怪！</p>
<p>好，怎麼改？看這樣有沒有好一點：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router::filter(<span class="string">'premium'</span>, function() &#123;</span><br><span class="line">    <span class="keyword">return</span> Auth::user() &amp;&amp; Auth::user()-&gt;isPremium();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>多一個小小的 function 不會耗你多少效能啦，但上面3個問題都可以解決，且更有彈性了。就算修改 permium 資格的邏輯也完全不用動到原本寫好的 filter。已所不雷，勿施於人。</p>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>我覺得書中這個例子裡，把 sendSms 的職責交給 User Model 還蠻合理的，User 可以 sendSms 唸起來就很順。但還是要小心，很容易就會讓 User Model 胖到爆掉，如果可以的話我自己是儘可能不放 User Model 就不放。另外建一個 Class，把傳簡訊的動作變成另一個 Service。也許，不是 User 也可以傳簡訊啊，例如如果簡訊是由系統自動送出的話，這樣不就沒有辦法關聯 User 了？</p>
<p>嗯，這次讀書會要 demo 前才發現 Laravel 5.1 有分 Event 和 Job ，兩個都有 Queue 的機制。還沒時間去研究差別和用途，期待讀書會朋友們的分享！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4ECB_u7D39"><a href="#u4ECB_u7D39" class="headerlink" title="介紹"></a>介紹</h2><h3 id="u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u9]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #21 - 從 C 語言到 PHP Extension (C9s)]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89Day-21-%E5%BE%9EC%E8%AA%9E%E8%A8%80%E5%88%B0PHP_Extension-Ricky-Su/"/>
    <id>http://blog.dj1020.net/PHP也有Day-21-從C語言到PHP_Extension-Ricky-Su/</id>
    <published>2015-11-19T11:30:34.000Z</published>
    <updated>2015-11-20T01:01:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Why_Writing_PHP_Extension"><a href="#Why_Writing_PHP_Extension" class="headerlink" title="Why Writing PHP Extension"></a>Why Writing PHP Extension</h2><ul>
<li>Reduce Request Overhead</li>
<li>Faster</li>
<li>Low Memory</li>
<li>External Library Integration</li>
<li>Energy Saving</li>
<li>High Performance</li>
</ul>
<h2 id="PHP_Runtime_Workflow"><a href="#PHP_Runtime_Workflow" class="headerlink" title="PHP Runtime Workflow"></a>PHP Runtime Workflow</h2><h2 id="PHP_OP_Code_vs_Function_Call"><a href="#PHP_OP_Code_vs_Function_Call" class="headerlink" title="PHP OP Code vs Function Call"></a>PHP OP Code vs Function Call</h2><ul>
<li>找 Explain 套件可以把 PHP 變成 OP Code 做 trace</li>
<li>opcodes faster</li>
<li>function call 是由 op code 組成</li>
<li>pure php function call is more slower</li>
<li>function call involves hash table lookup</li>
</ul>
<h2 id="C_Basics"><a href="#C_Basics" class="headerlink" title="C Basics"></a>C Basics</h2><ul>
<li>Hello World in C</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ gcc -o hello hello.c</span><br><span class="line">$ ./hello</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">$ gcc -O2 -Wall -o hello hello.c <span class="comment">// -O2 優化</span></span><br></pre></td></tr></table></figure>
<ul>
<li>小心 class 是沒有 null terminate string “0x00”</li>
<li>function 或是進 hash table 的話是有 “0x00” 的</li>
</ul>
<h2 id="Pointer_in_C"><a href="#Pointer_in_C" class="headerlink" title="Pointer in C"></a>Pointer in C</h2><ul>
<li>全員逃走中</li>
<li><code>char *p;</code> 字元指標，存一個記憶體位置</li>
<li><code>char **p;</code> 字元指標的指標，存一個指標的記憶體位置</li>
</ul>
<p>通常會用 prefix 區分 function name</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span>  contact &#123;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> name_len;</span><br><span class="line">    <span class="keyword">char</span> *phone_no;</span><br><span class="line">    <span class="keyword">int</span> phone_no_len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> contact <span class="keyword">contact_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">contact_t</span> aContact;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PHP_Extension"><a href="#PHP_Extension" class="headerlink" title="PHP Extension"></a>PHP Extension</h2><ul>
<li>ONLY 3 files to start<ul>
<li>config.m4 (設定檔)</li>
<li>php_foo.c</li>
<li>php_foo.h</li>
</ul>
</li>
</ul>
<h3 id="php_foo-h"><a href="#php_foo-h" class="headerlink" title="php_foo.h"></a>php_foo.h</h3><ul>
<li>config.h</li>
<li>TSRM declaration</li>
<li>extern zend_module_entry</li>
<li>php function prototypes</li>
</ul>
<h3 id="php_foo-c"><a href="#php_foo-c" class="headerlink" title="php_foo.c"></a>php_foo.c</h3><ul>
<li>Module export for dynamic loading:<ul>
<li>ZEND_GET_MODULE(foo)</li>
</ul>
</li>
<li>zend_function_entry</li>
<li>zend_module_entry foo_module_entry</li>
<li>php functions</li>
</ul>
<h3 id="skeleton"><a href="#skeleton" class="headerlink" title="skeleton"></a>skeleton</h3><ul>
<li><a href="http://github.com/c9s/php-ext-skeleton.git" target="_blank" rel="external">http://github.com/c9s/php-ext-skeleton.git</a></li>
</ul>
<h3 id="Build_21"><a href="#Build_21" class="headerlink" title="Build!"></a>Build!</h3><ul>
<li><code>$ phpsize</code></li>
<li><code>$ ./configure --enable-foo</code></li>
<li><code>$ make</code></li>
<li><code>$ make install</code></li>
</ul>
<h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><ul>
<li><code>$ make clean</code></li>
<li><code>$ phpsize --clean</code></li>
</ul>
<p>###</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Why_Writing_PHP_Extension"><a href="#Why_Writing_PHP_Extension" class="headerlink" title="Why Writing PHP Extension"></a>Why Writing]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How To Update Xdebug for MAMP]]></title>
    <link href="http://blog.dj1020.net/How-To-Update-Xdebug-for-MAMP/"/>
    <id>http://blog.dj1020.net/How-To-Update-Xdebug-for-MAMP/</id>
    <published>2015-11-16T07:19:42.000Z</published>
    <updated>2015-11-16T07:30:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6B65_u9A5F"><a href="#u6B65_u9A5F" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>Download php5.5.22 (版本自己調整一下) from <a href="http://php.net/downloads.php" target="_blank" rel="external">PHP official site</a></li>
<li><code>mkdir -vp /Applications/MAMP/bin/php/php5.5.22/include</code></li>
<li><code>tar zxvf php-5.5.22.tar.gz -C /Applications/MAMP/bin/php/php5.5.22/include</code></li>
<li><code>mv /Applications/MAMP/bin/php/php5.5.22/include/php-5.5.22 /Applications/MAMP/bin/php/php5.5.22/include/php</code> (to fix phpize not found php.h)</li>
<li><code>cd /Applications/MAMP/bin/php/php5.5.22/include/php</code></li>
<li><code>./configure --without-iconv</code> (to fix /Applications/MAMP/bin/php/php5.5.22/include/php/Zend/zend.h:51:11: fatal error: ‘zend_config.h’ file not found)</li>
<li>Download xdebug 2.3.3 (版本自行調整，需對應 PHP 的版本！) frmo <a href="http://xdebug.org/download.php" target="_blank" rel="external">Xdebug Site</a></li>
<li><code>tar zxvf xdebug-2.3.3.tgz</code></li>
<li><code>cd xdebug-2.3.3</code></li>
<li><p><code>phpize</code> 要看到這樣才對：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP Api Version:         <span class="number">20121113</span></span><br><span class="line">Zend Module Api No:      <span class="number">20121212</span></span><br><span class="line">Zend Extension Api No:   <span class="number">220121212</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>./configure</code></p>
</li>
<li><code>make</code></li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>這個還蠻完整的：<a href="http://blog.csdn.net/21aspnet/article/details/47756651" target="_blank" rel="external">NetBeans配置Xdebug 遠程調試PHP - 計算機科學與技術 - 博客頻道 - CSDN.NET</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6B65_u9A5F"><a href="#u6B65_u9A5F" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>Download php5.5.22 (版本自己調整一下) from <a href="ht]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 11-12 線上聊天室、鴻森Live Demo、BoBo]]></title>
    <link href="http://blog.dj1020.net/Laradiner_2015-11-12_Ricky_BoBo_Sam/"/>
    <id>http://blog.dj1020.net/Laradiner_2015-11-12_Ricky_BoBo_Sam/</id>
    <published>2015-11-12T11:55:34.000Z</published>
    <updated>2015-11-12T13:53:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su"><a href="#Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su" class="headerlink" title="Socket.io 線上聊天室 by Ricky Su"></a>Socket.io 線上聊天室 by Ricky Su</h2><ul>
<li>zeromq</li>
<li>rabbitmq</li>
<li><a href="https://github.com/RickySu/chat-demo" target="_blank" rel="external">https://github.com/RickySu/chat-demo</a><ul>
<li>要裝 event (php extension)</li>
</ul>
</li>
</ul>
<h2 id="Interface_As_Contract__u4ECB_u9762_u5408_u7D04_by_BoBo"><a href="#Interface_As_Contract__u4ECB_u9762_u5408_u7D04_by_BoBo" class="headerlink" title="Interface As Contract 介面合約 by BoBo"></a>Interface As Contract 介面合約 by BoBo</h2><h2 id="Service_Provider_-_Sam"><a href="#Service_Provider_-_Sam" class="headerlink" title="Service Provider - Sam"></a>Service Provider - Sam</h2><ul>
<li>public function provides() -&gt; 對應 Facade return 的字串</li>
</ul>
<h2 id="Write_a_package_via_composer_and_upload_to_packgist"><a href="#Write_a_package_via_composer_and_upload_to_packgist" class="headerlink" title="Write a package via composer and upload to packgist"></a>Write a package via composer and upload to packgist</h2><ul>
<li>composer init</li>
<li>autoload -&gt; psr-4</li>
<li>service provider</li>
<li>controller</li>
<li>views folder</li>
<li>in boot():<ul>
<li>App::make controller</li>
<li>$this-&gt;loadViewsFrom(path, custom_prefix) // 或叫 namespace</li>
<li>$this-&gt;loadViewsFrom(path, ‘MyName’) // 或叫 namespace</li>
<li>reutrn views(‘MyName::welcome’);</li>
</ul>
</li>
<li>composer.json<ul>
<li>“repositories” : { “type” : “vcs”, “url”:”git url”, “type” : “path”, “url” : “../myPackage” }</li>
<li>可用私有 repo</li>
</ul>
</li>
<li>Satis (架 packagist) -&gt; 會 cache zip</li>
<li>Toran Proxy</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su"><a href="#Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su" class="headerl]]>
    </summary>
    
      <category term="Laradiner" scheme="http://blog.dj1020.net/tags/Laradiner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[真。淺談 RESTful API by Triton Ho]]></title>
    <link href="http://blog.dj1020.net/%E7%9C%9F%E3%80%82%E6%B7%BA%E8%AB%87_RESTful_API_by_Triton_Ho/"/>
    <id>http://blog.dj1020.net/真。淺談_RESTful_API_by_Triton_Ho/</id>
    <published>2015-11-09T11:00:34.000Z</published>
    <updated>2016-03-07T13:45:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6DFA_u8AC7_HTTP"><a href="#u6DFA_u8AC7_HTTP" class="headerlink" title="淺談 HTTP"></a>淺談 HTTP</h2><ul>
<li><p>HTTP 是通訊協定！</p>
<ul>
<li>RESTful 後端</li>
<li>SOAP</li>
<li>REST 介面的資料庫</li>
</ul>
</li>
<li><p>HTTP 理念：( resource ) + ( method )</p>
<ul>
<li>stateless</li>
</ul>
</li>
<li><p>動名詞(Gerunds)也算是名詞的一種, ex: /MoneyTransfers</p>
<ul>
<li>(POST) Create a “MoneyTransfers” object, 內容是把錢從 A 轉到 B</li>
</ul>
</li>
<li><p>HTML 通常只用上 GET / POST，但其實 HTTP 裡還有除了這兩個以外很多 method 可用。</p>
</li>
<li><p>一些資源可能只支持部份 method，例如， /img/image1.jpg 應該只有 GET 可用。</p>
</li>
<li><p>建議不要用 GET 做為建立物件的方法，如不使用約定俗成的後果自負。</p>
</li>
</ul>
<h3 id="GET_method"><a href="#GET_method" class="headerlink" title="GET method"></a>GET method</h3><ul>
<li>READONLY 的，讀取資源</li>
<li><code>重要！ 應該只有 GET 才使用 Query String</code></li>
<li>以物件 id 結尾，一般是指讀取單一物件<ul>
<li>ex: /v1/users/9527</li>
</ul>
</li>
<li>如果沒有 id 結尾，則是讀取該物件的 Collection<ul>
<li>ex: /v1/users 取得所有 user</li>
<li>ex: <code>/v1/users?AgeMax=20 利用 Query String 做 filter</code></li>
</ul>
</li>
</ul>
<h3 id="DELETE_method"><a href="#DELETE_method" class="headerlink" title="DELETE method"></a>DELETE method</h3><h3 id="POST_method"><a href="#POST_method" class="headerlink" title="POST method"></a>POST method</h3><ul>
<li>一般會把資源的 id 回給 caller</li>
<li>如果在不穩定的網路下，用戶建立資源時，卻發出兩次POST，怎麼辦？<ul>
<li>雖然 HTTP 原始定義是 non-idempotent ，但是他沒禁止你自行解決 idempotent 問題。</li>
<li>idempotent 簡單說，就是<code>後端應該要處理重複 request 的問題。</code></li>
<li>後面會講怎麼做 idempotent</li>
</ul>
</li>
</ul>
<h3 id="PATCH_method"><a href="#PATCH_method" class="headerlink" title="PATCH method"></a>PATCH method</h3><ul>
<li>改動資源的部份內容</li>
<li>是否 idempotent 是看你怎麼做處理<ul>
<li>SET age = 31  -&gt; it’s idempotent，不管做幾次結果都一樣</li>
<li>SET age = age + 1 -&gt; it’s NOT idempotent</li>
</ul>
</li>
</ul>
<h3 id="PUT_method"><a href="#PUT_method" class="headerlink" title="PUT method"></a>PUT method</h3><ul>
<li>原本應該是上傳的內容會完全蓋掉原本的資源內容，如果資源不存在則 create</li>
<li>但後來很多人，用 PUT 取代 PATCH，來做部份資源的改動。</li>
</ul>
<h3 id="OPTIONS_method"><a href="#OPTIONS_method" class="headerlink" title="OPTIONS method"></a>OPTIONS method</h3><ul>
<li>在 cross domain request 時，用戶會先發出 options</li>
<li>用來查詢</li>
</ul>
<h3 id="u5E38_u7528_u7684_HTTP_Response_Code"><a href="#u5E38_u7528_u7684_HTTP_Response_Code" class="headerlink" title="常用的 HTTP Response Code"></a>常用的 HTTP Response Code</h3><h5 id="200__28OK_29"><a href="#200__28OK_29" class="headerlink" title="200 (OK)"></a>200 (OK)</h5><h5 id="204__28No_Content_29"><a href="#204__28No_Content_29" class="headerlink" title="204 (No Content)"></a>204 (No Content)</h5><pre><code>- 跟 200 相似，但沒有結果回傳
- 一般來說，DELETE 和 PUT 常用
</code></pre><h5 id="202__28Accepted_29"><a href="#202__28Accepted_29" class="headerlink" title="202 (Accepted)"></a>202 (Accepted)</h5><pre><code>- 伺服器收到 request ，並且確定請求沒問題。
- 不過，這個請求需要執行很長的時間，所以為了避免客戶等待。即使工作還沒完成也好，先回等客戶端：「工作收到了」
- ~~沒事別亂用~~ 很麻煩！ 應該用 Server Push 的方式來處理 async request。
</code></pre><h5 id="304__28Not_Modified_29"><a href="#304__28Not_Modified_29" class="headerlink" title="304 (Not Modified)"></a>304 (Not Modified)</h5><pre><code>- 如果客戶 request 重複的資源，通常會 Cache 起來，如果客戶端版本是最新的，就回 304。否則回 200。
</code></pre><h5 id="400__28Bad_Request_29"><a href="#400__28Bad_Request_29" class="headerlink" title="400 (Bad Request)"></a>400 (Bad Request)</h5><pre><code>- 請求的內容有誤，拒絕執行
- Ex: set age = abc123 (age 應為 integer)
</code></pre><h5 id="401__28Unauthorized_29"><a href="#401__28Unauthorized_29" class="headerlink" title="401 (Unauthorized)"></a>401 (Unauthorized)</h5><pre><code>- 還沒 login
- 如果把 authorization 放進 http body，會被放進 error log，會被看到！
</code></pre><h5 id="403__28Forbidden_29"><a href="#403__28Forbidden_29" class="headerlink" title="403 (Forbidden)"></a>403 (Forbidden)</h5><pre><code>- 跟 400 不同，伺服器明白請求的內容
- 不過，請求內容與商業邏輯矛盾，伺服器拒絕執行
- ex: 建立一個 乳牛 物件，但 { favoriteFood = 仙人掌 }
</code></pre><h5 id="404__28Not_Found_29"><a href="#404__28Not_Found_29" class="headerlink" title="404 (Not Found)"></a>404 (Not Found)</h5><pre><code>- 請求的資源不存在
- 註：有些系統，即使資源存在，而 method 不對，也會返回 404
- 註：如果 GET collection 而沒搜查到滿足條件的資源，是應該返回 200 不是 404。
</code></pre><h5 id="409__28Conflict_29"><a href="#409__28Conflict_29" class="headerlink" title="409 (Conflict)"></a>409 (Conflict)</h5><pre><code>- 一般是說，表示用戶正在改動的這個物件，已經被人先改動過了。
- 通常表示要重送最新的 request
</code></pre><h5 id="500__28Internal_Server_Error_29"><a href="#500__28Internal_Server_Error_29" class="headerlink" title="500 (Internal Server Error)"></a>500 (Internal Server Error)</h5><h5 id="502__28Bad_Gateway_29"><a href="#502__28Bad_Gateway_29" class="headerlink" title="502 (Bad Gateway)"></a>502 (Bad Gateway)</h5><pre><code>- 一般是說，表示用戶正在改動的這個物件，已經被人先改動過了。
</code></pre><h5 id="503__28Service_Unavailable_29"><a href="#503__28Service_Unavailable_29" class="headerlink" title="503 (Service Unavailable)"></a>503 (Service Unavailable)</h5><pre><code>- 伺服器沒當掉，只是太多人在使用，所以暫時無法提供服務。
</code></pre><h2 id="u70BA_u4EC0_u9EBC_u8981_u91CD_u8996_API__u8A2D_u8A08"><a href="#u70BA_u4EC0_u9EBC_u8981_u91CD_u8996_API__u8A2D_u8A08" class="headerlink" title="為什麼要重視 API 設計"></a>為什麼要重視 API 設計</h2><ul>
<li><p>改動 API 需要同時改動”前端”和”後端”，現實上會有極大困難</p>
<ul>
<li>所以 url 裡要放 /v1/users，要放版本</li>
</ul>
</li>
<li><p>錯誤的 API 設計，可以引起：</p>
<ul>
<li>嚴重的效能問題</li>
<li>扭曲了的程式邏輯，和扭曲了的數據結構</li>
<li>數據錯誤</li>
<li><del>整天在公司加班，結果女朋友跑掉</del></li>
</ul>
</li>
</ul>
<h4 id="API__u8A2D_u8A08_u91CD_u9EDE"><a href="#API__u8A2D_u8A08_u91CD_u9EDE" class="headerlink" title="API 設計重點"></a>API 設計重點</h4><pre><code>* 統一介面 ( uniform interface ) 是相對上最死不了人的，別為這吵架太久
* 例如，這兩種流派都有人支持
    - /v1/pets/1234
    - /v1/users/9527/pets/1234
* 好的 API 永不限制前端的設計，即使要輕度違反 uniform interface 原則，但一切應該以 User Experence 為最優先。
    - 例：在頁面中，應該可以同時建立 User 和該 User 的 Pets，而不需要呼叫兩次 API。所以需要建立特殊的 UserAndPet POST
</code></pre><h2 id="u50B3_u7D71_u7DB2_u9801_u7684_Render__u6D41_u7A0B"><a href="#u50B3_u7D71_u7DB2_u9801_u7684_Render__u6D41_u7A0B" class="headerlink" title="傳統網頁的 Render 流程"></a>傳統網頁的 Render 流程</h2><p>傳統網頁把 Data 和 View 在 Server binding 後把 result page 回給客戶端</p>
<p>(缺圖)</p>
<pre><code>- 把 Data 和 Presentation 混合，反而讓 html 無法被 Cache 起來，致效能下降！(To 小黑)
- 無法分割 Presentation, Business Logic 和 Data，影響開發、測試、除錯的作業！
- 伺服器負責將 Data 和 Presentation 整合(簡稱 Data Binding)，消耗伺服器的 CPU 資源，需要更好的 Server side machine
</code></pre><h2 id="u4F7F_u7528_Async_Request__u7684_u597D_u8655"><a href="#u4F7F_u7528_Async_Request__u7684_u597D_u8655" class="headerlink" title="使用 Async Request 的好處"></a>使用 Async Request 的好處</h2><p>一個 request 變兩個 request，先回傳 Presentation 和 scripts，之後透過 script 向 server 要 data，伺服器回傳 json/xml 後再 render 畫面出來</p>
<p>(缺圖)</p>
<pre><code>- Presentation 和 script 如果沒改動，都會是 304 Cache 起來的。
- 表面上增加為兩次 request，實際上因為 304 (Not Modified)，會省下更多網路流量，也很省錢$$$$！
- Presentation 和 Data 徹底分離，可以使用專門的 mock API 伺服器。
- 只要定好 Spec ，可以讓前、後端分別專心開發。
- 容易將執行架構改為 Presentation 在 Apache / CDN, API 在 Tomcat。(區分靜態內容和動態資料)
- 節省伺服器資源，可以不放伺服器的就不要放在伺服器。
- Data Binding 現在在 Client side 的瀏覽器做，省 Server CPU
- 未來可以支持 iOS 和 Android， API 都可以重複使用，不用重複開發相同的商業邏輯。酷！
</code></pre><h2 id="RESTful_API__u8A2D_u8A08"><a href="#RESTful_API__u8A2D_u8A08" class="headerlink" title="RESTful API 設計"></a>RESTful API 設計</h2><ul>
<li>RESTful是一種設計哲學，不是一定要用 HTTP 的方式來實現，常見例如加入 action 在 POST 裡</li>
</ul>
<h2 id="RESTful__u7684_u8B2C_u8AA4"><a href="#RESTful__u7684_u8B2C_u8AA4" class="headerlink" title="RESTful 的謬誤"></a>RESTful 的謬誤</h2><ul>
<li><p>server side 需要 stateless</p>
<ul>
<li>解1: 不需要 server side stateless</li>
<li>解2: 只要求 Application Server 是 stateless，Server Side 其他部份是可以 stateful 的</li>
</ul>
</li>
<li><p>一定需要用上 GET, PUT/PATCH, POST, DELETE</p>
<ul>
<li>解: 可以使用其他技術實作統一介面</li>
</ul>
</li>
</ul>
<h2 id="RESTful__u7684_u8981_u6C42"><a href="#RESTful__u7684_u8981_u6C42" class="headerlink" title="RESTful 的要求"></a>RESTful 的要求</h2><ul>
<li>Client-Server 架構</li>
<li>Cacheable 快取機制</li>
<li><code>Stateless Protocol</code> 無狀態性的通訊協定 (這個最最重要！)</li>
<li>Uniform inerface 統一介面</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-__u7DB2_u8DEF_u7684_u4E0D_u7A69_u5B9A_u6027"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-__u7DB2_u8DEF_u7684_u4E0D_u7A69_u5B9A_u6027" class="headerlink" title="RESTful API 設計原則 - 網路的不穩定性"></a>RESTful API 設計原則 - 網路的不穩定性</h2><ul>
<li>隨時可能斷線！往往看起來正常，其實已經斷線。</li>
<li>使用 API 時，連線可能在信號送達 server 前斷線</li>
<li>也可能正要回 API 結果時斷線</li>
<li>也可能次序錯亂，先發出的 req 1 反而比晚發出的 req 2 更晚到達 Server。</li>
<li><code>總之，到處都可能會出錯</code></li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Stateless__28_u901A_u8A0A_u5354_u5B9A_u7684_u7121_u72C0_u614B_u6027_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Stateless__28_u901A_u8A0A_u5354_u5B9A_u7684_u7121_u72C0_u614B_u6027_29" class="headerlink" title="RESTful API 設計原則 - Stateless (通訊協定的無狀態性)"></a>RESTful API 設計原則 - Stateless (通訊協定的無狀態性)</h2><ul>
<li>ex: 可以把 login 狀態存在短期資料庫，如 Redis</li>
<li>簡單說 RESTful 不能用 session_start (for PHP)</li>
<li>ex:<ul>
<li>#1 加入 Product A 到 Cart</li>
<li>#2 加入 Product B 到 Cart</li>
<li>#3 結帳</li>
</ul>
</li>
<li>如果 #3 比 #2 更快到 Server，就買不到 Product B 了。</li>
<li><p>這樣就是有狀態性，因為請求需要符合系統順序</p>
</li>
<li><p><code>解： RESTful 服務應該直接以 (Product A, Product B) 作為結算內容，而不用 session 去暫存。</code></p>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Atomic__28_u539F_u5B50_u6027_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Atomic__28_u539F_u5B50_u6027_29" class="headerlink" title="RESTful API 設計原則 - Atomic (原子性)"></a>RESTful API 設計原則 - Atomic (原子性)</h2><ul>
<li>不能用兩個(或以上)的 API 呼叫去完成一個「動作」。</li>
<li>每一個動作都必需是 atomic。一個完整執行後的 API call 不能讓伺服器端數據停留在不一致的狀態。</li>
<li><p>Ex:</p>
<ul>
<li>User A 轉帳 100 給 User B</li>
<li>付錢買火車票</li>
</ul>
</li>
<li><p>符合 Atomic 的範例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST_DATA =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"from_user_id"</span>: <span class="string">"A"</span>,</span><br><span class="line">    <span class="string">"to_user_id"</span> : <span class="string">"B"</span>,</span><br><span class="line">    <span class="string">"amount"</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">"create_time"</span> : <span class="string">"2014-07-05T17:37:21"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果當機的話，只要再執行一次這個 API Call 即可！</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-__u8DB3_u5920_u5B8C_u6574_u7684_u8CC7_u6599"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-__u8DB3_u5920_u5B8C_u6574_u7684_u8CC7_u6599" class="headerlink" title="RESTful API 設計原則 - 足夠完整的資料"></a>RESTful API 設計原則 - 足夠完整的資料</h2><ul>
<li>炮二平五 -&gt; 客戶端不該知道伺服器端的狀態！</li>
<li>利用 step_id<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/chinese_chess_game/&#123;game_id&#125; (PUT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"step_id"</span> : <span class="number">31</span>,</span><br><span class="line">    <span class="string">"action"</span> : <span class="string">"炮二平五"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Idempotence__28_u91CD_u65B0_u547C_u53EB_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Idempotence__28_u91CD_u65B0_u547C_u53EB_29" class="headerlink" title="RESTful API 設計原則 - Idempotence (重新呼叫)"></a>RESTful API 設計原則 - Idempotence (重新呼叫)</h2><ul>
<li>在客戶端，任何未成功的 API 呼叫，只要重新呼叫一次就行了。</li>
<li>伺服器端要懂如何處理重複的 request</li>
<li><code>用 POST 建立新物件時，把客戶端的 timestamp 也放進 API request 中！</code> 就可以讓伺服器端辨別是不是收到重複的 HTTP POST</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Uniform_Interface__28_u7D71_u4E00_u4ECB_u9762_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Uniform_Interface__28_u7D71_u4E00_u4ECB_u9762_29" class="headerlink" title="RESTful API 設計原則 - Uniform Interface (統一介面)"></a>RESTful API 設計原則 - Uniform Interface (統一介面)</h2><ul>
<li>所有 URL 應該基於物件，而不是行動</li>
<li>一個物件有正常有4種行動： CRUD<ul>
<li>POST : Create</li>
<li>GET : Read</li>
<li>PUT/PATCH : Update</li>
<li>DELETE : Delete</li>
</ul>
</li>
</ul>
<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><ol>
<li>how to design login API (stateless)<ul>
<li>JWT - Json Web Token<ol>
<li>payload (ex: user id)</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"userId"</span> : <span class="number">9527</span>,</span><br><span class="line">    <span class="string">"expiration"</span> : <span class="string">"2015-11-09T12:12:14"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"signature"</span> :  <span class="string">""</span>  <span class="comment">// 相當於 token，用 userId encrypt 之後 hash 出來的，用 service side 的 private key 加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都把 token 放進 header 的 auth 資訊中，用 server 的 public key 去解密，看有沒有 match</span></span><br><span class="line"><span class="comment">// User 不能改動 expiration，不然 signature 會不一樣</span></span><br><span class="line"><span class="comment">// 每次 request 就 update token，將 expiration 設為該 req 之後的 30 min。</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>post timestamp 也是要存進 redis 或資料庫中囉？ Yes, 放 Redis 就行了，設個 5 分鐘即可。也不用開保護，通常真的遺失也沒關係。</p>
</li>
<li><p>如何測試 atomic api -&gt; 應該是由商業邏輯來定義，所以在談 user requirement 中，會需要不斷的問客戶問題！ex: 轉帳轉到一半斷線的話怎麼辦？</p>
</li>
</ol>
<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ul>
<li>做 /test/users/9527 做 mock API，之後 test 改成 v1 即可！</li>
</ul>
<ul>
<li>一定要學怎麼用 Redis 了！</li>
</ul>
<h2 id="u9583_u4EAE_u4EAE_u5FC3_u5F97_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5FC3_u5F97_u5C0F_u7D50" class="headerlink" title="閃亮亮心得小結"></a>閃亮亮心得小結</h2><blockquote>
<ul>
<li>最差的開發者不是寫了爛程式碼的人，而是 <em>不知道自己有多爛的人</em>。</li>
<li>多一個人懂 RESTful，未來我接手的爛專案的可能性就少一點。</li>
<li>越多人使用 RESTful，便有越多需要 RESTful 技能的專案，那我便有更多工作機會。</li>
</ul>
</blockquote>
<ul>
<li>幫助別人，幫助自己</li>
<li>守護自由，保護自己</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6DFA_u8AC7_HTTP"><a href="#u6DFA_u8AC7_HTTP" class="headerlink" title="淺談 HTTP"></a>淺談 HTTP</h2><ul>
<li><p>HTTP 是通訊協定！</p>
<ul>
<l]]>
    </summary>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
      <category term="講座" scheme="http://blog.dj1020.net/tags/%E8%AC%9B%E5%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD 實戰與自動測試 (91 哥) - Day 3]]></title>
    <link href="http://blog.dj1020.net/TDD-%E5%AF%A6%E6%88%B0%E8%88%87%E8%87%AA%E5%8B%95%E6%B8%AC%E8%A9%A6-91-%E5%93%A5-Day-3/"/>
    <id>http://blog.dj1020.net/TDD-實戰與自動測試-91-哥-Day-3/</id>
    <published>2015-10-31T01:54:27.000Z</published>
    <updated>2015-10-31T09:48:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HW_Learning"><a href="#HW_Learning" class="headerlink" title="HW Learning"></a>HW Learning</h2><ol>
<li>一次只新增一個 Scenario，一次只有一個紅燈，關注點集中。</li>
<li>一次新增多個測試案例不會比較快，但會造成很大的「干擾」，不自覺想去 implement 下一個 Scenario。</li>
<li>用”最少”、”最簡單”、”最直覺(最快)” 的方式來寫 production code 通過 test case。</li>
<li>花太多時間一次做到位，也許寫錯或需求改變要打掉重寫，或重構，成本都高很多。</li>
<li>也可能後面 implement 的 scenario 根本不重要，不用寫，每次只寫一個 scenario 可以做到增量式 delivery</li>
<li>承上，如果想一次做到位，同時滿足 10 個 Scenario，也許交付時間卡在尷尬的時點，結果什麼可執行的 Code 都交不出來。</li>
<li><code>先有 Code 再重構</code></li>
<li>承上，一定比你一開始要設計到完美才開始寫 Code 來得簡單。</li>
<li>一定要跟 PO(或需求單位) 要 Example !!!! 不同的路徑都要有，一定有 if / else，每個 if / else 都會多測試案例。</li>
</ol>
<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>全面性的思考，可以分「軟體架構」和「系統架構」面：系統架構面，如存資料要用檔案還是資料庫，哪些 service 要用 queue … 等等。軟體架構面，如分幾個 layer 的，要寫哪些 class 等等。</li>
<li>Interface 應該用「使用端」來定義，我們只是要實作出來；而且大多數是從需求中重構出來的。</li>
<li>用註解表示需求，之後補 TestCase</li>
</ol>
<h2 id="Unit_Test_vs-_TDD_vs-_BDD"><a href="#Unit_Test_vs-_TDD_vs-_BDD" class="headerlink" title="Unit Test vs. TDD vs. BDD"></a>Unit Test vs. TDD vs. BDD</h2><ul>
<li>Unit Test: 確保程式寫的跟你想的一樣</li>
<li>TDD: 確保你先想清楚才動手寫，知道我寫的每一行 Code 的目的，和何時該結束，並且能驗證。</li>
<li><p>BDD: 確保你想的是使用者要的。(確保功能符合客戶需求才動手寫。)</p>
</li>
<li><p>不用 TDD，開發很容易發散回不來！如，要修燈、換燈泡發現櫃子壞、要修櫃子找抽屜發現怪聲、要修抽屜找潤滑油結果沒了要開車去買、開車發現車壞了，所以先跑去修車。老婆回來怒問，我不是叫你修燈泡嗎？老公：不然你以為我在做什麼？</p>
</li>
</ul>
<h2 id="u6210_u672C_u548C_u4FEE_u6539_u6642_u9EDE_-_26gt_3B__u8DDF_u8001_u95C6_u8AC7_u6700_u597D_u7684"><a href="#u6210_u672C_u548C_u4FEE_u6539_u6642_u9EDE_-_26gt_3B__u8DDF_u8001_u95C6_u8AC7_u6700_u597D_u7684" class="headerlink" title="成本和修改時點 -&gt; 跟老闆談最好的"></a>成本和修改時點 -&gt; 跟老闆談最好的</h2><ul>
<li>Length of Feedback cycle 圖，應該跟老闆講解的！為何專案 delay 的元兇。p.180</li>
<li>2006-2009 Scott W. Ambler</li>
<li><a href="http://www.richard-banks.org/2013/04/why-short-feedback-cycle-is-good-thing.html" target="_blank" rel="external">http://www.richard-banks.org/2013/04/why-short-feedback-cycle-is-good-thing.html</a><br><img src="http://lh5.ggpht.com/-yZnKirtvtMw/UVtoLg_35oI/AAAAAAAABYg/-BPqlP6OWGU/image_thumb%25255B5%25255D.png?imgmax=800"></li>
<li>這張圖更簡單，還包含需求收集：<br><img src="http://lh3.ggpht.com/-7C3CsZ_r484/UVtoKaESqWI/AAAAAAAABYQ/MCcuTLL0uIY/image_thumb%25255B2%25255D.png?imgmax=800"></li>
</ul>
<h2 id="RIP_TDD__28from_Ken_Beck_29_http_3A//mvcbook-net/006m"><a href="#RIP_TDD__28from_Ken_Beck_29_http_3A//mvcbook-net/006m" class="headerlink" title="RIP TDD (from Ken Beck) http://mvcbook.net/006m"></a>RIP TDD (from Ken Beck) <a href="http://mvcbook.net/006m" target="_blank" rel="external">http://mvcbook.net/006m</a></h2><ul>
<li>Over-engineering (過度設計)<ul>
<li>如果沒有 TDD 我要用什麼來解決過度設計的問題</li>
<li>反例：架構太空人</li>
</ul>
</li>
<li>API feedback (改善 API 的設計與可用性)<ul>
<li>先寫測試案例來使用自己設計的 API，才會知道 API 好不好用</li>
<li>TDD 就是模擬使用端來用你的 API</li>
<li>Test Case 就是在教別人怎麼用你 API</li>
</ul>
</li>
<li>Logic errors (想的和寫的不一樣，寫的和需求不一樣)<ul>
<li>由需求寫測試案例，綠燈表示通過測試案例</li>
</ul>
</li>
<li>Documentation (寫的跟維護文件是痛苦的)<ul>
<li>從測試案例轉換成文件，不用重工，或是辛苦的維護文件同步更新</li>
</ul>
</li>
<li>Feeling overwhelmed (找不到切入點)<ul>
<li>第一步比較花時間是寫 Test Case 時，對 target class 的命名，method 的命名</li>
<li>建議從最主要的 happy path 開始 implement</li>
</ul>
</li>
<li>Separate interface from implementation thinking (抽象設計)</li>
<li>Agreement (確保已修正問題的證據)</li>
<li>Anxiety (改東壞西的擔心受怕)</li>
</ul>
<blockquote>
<p>如果沒有碰到上面的問題，可以不用 TDD<br>如果你比 TDD 有更低成本的解決方案，請提出來，你就是大師了</p>
</blockquote>
<h2 id="UncleBob"><a href="#UncleBob" class="headerlink" title="UncleBob"></a>UncleBob</h2><ul>
<li><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd</a></li>
</ul>
<h4 id="Over_the_years_I_have_come_to_describe_Test_Driven_Development_in_terms_of_three_simple_rules-_They_are_3A"><a href="#Over_the_years_I_have_come_to_describe_Test_Driven_Development_in_terms_of_three_simple_rules-_They_are_3A" class="headerlink" title="Over the years I have come to describe Test Driven Development in terms of three simple rules. They are:"></a>Over the years I have come to describe Test Driven Development in terms of three simple rules. They are:</h4><ol>
<li>You are not allowed to write any production code unless it is to make a failing unit test pass.</li>
<li>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</li>
<li>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</li>
</ol>
<h2 id="User_Story_Lab"><a href="#User_Story_Lab" class="headerlink" title="User Story Lab"></a>User Story Lab</h2><ul>
<li>會計人員算薪水的系統</li>
<li>多了以時薪計算的兼職人員，但目前系統未提供時薪制計算方式</li>
<li>依據上、下班時間，計算出該日工時，並加上兼職人員加班的時間</li>
<li>…</li>
</ul>
<h2 id="User_Story_vs_User_Story_Card"><a href="#User_Story_vs_User_Story_Card" class="headerlink" title="User Story vs User Story Card"></a>User Story vs User Story Card</h2><ul>
<li>上班時間 &gt; 8hr/day 就是加班</li>
<li>Common Sense 要問出來，你的和我的不一樣</li>
<li>加班 &lt; 2 hr *1.66</li>
<li>加班 2~4 hr *2</li>
<li>加班不得超過 4 hr</li>
<li>必要有 Example 不然你怎麼知道中午那一個小時算不算錢</li>
<li>每個 Scenario 要對應「關鍵商業邏輯」</li>
</ul>
<h2 id="TDD_vs-_Non-TDD"><a href="#TDD_vs-_Non-TDD" class="headerlink" title="TDD vs. Non-TDD"></a>TDD vs. Non-TDD</h2><ul>
<li>圖1: 像繞路一團亂的線</li>
<li>圖2: 像星狀圖，直線，走過的路不用再走，只是多叉路，打叉的表示例外</li>
<li><a href="http://dreamyeh.pixnet.net/blog/post/41497630-%E6%96%B0%E6%89%8B%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%92%8C%E8%B3%87%E6%B7%B1%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E7%9A%84%E5%B7%AE%E7%95%B0" target="_blank" rel="external">專業的設計師和不專業的設計師</a></li>
</ul>
<h2 id="u88FD_u4F5C_u6F86_u82B1_u5668"><a href="#u88FD_u4F5C_u6F86_u82B1_u5668" class="headerlink" title="製作澆花器"></a>製作澆花器</h2><ul>
<li>規格<ul>
<li>能裝水</li>
<li>能提</li>
<li>能灑水</li>
</ul>
</li>
<li>自己灑水給自己的外掛</li>
<li>RD 地雷：跟這支功能一樣，這是 common sense，只是稍微調整一下</li>
<li>PM 地雷：你規格沒寫清楚，這是需求異動，你上次不是這樣說的，這要大改。你出一張嘴比較快。</li>
</ul>
<h2 id="BDD__u53EF_u4EE5_u89E3_u6C7A_u4F60_u7684_u554F_u984C"><a href="#BDD__u53EF_u4EE5_u89E3_u6C7A_u4F60_u7684_u554F_u984C" class="headerlink" title="BDD 可以解決你的問題"></a>BDD 可以解決你的問題</h2><ul>
<li>BDD 測試案例怎麼來？<ul>
<li>分析 User Story，看滿足哪些 Scenario 才叫做 Done。(Acceptance Criteria - 寫在 User Story Card 背面)</li>
<li>最重要的事！到底怎麼樣才叫做做完，最值得花時間的事。</li>
<li>Top Down! Don’t Bottom Up!</li>
<li>更專業說法：Outside In</li>
<li>TDD 的 Test Case 應該是由 Accept test 出來的</li>
<li>Requirement -&gt; User Story -&gt; Acceptance Test Case -&gt; Intergration Test Case -&gt; Unit Test Case</li>
<li>Requirement -&gt; User Story -&gt; Acceptance Test Case <code>是從 PO, user, QA 來的</code></li>
</ul>
</li>
<li>如何降低溝通成本？<ul>
<li>減少需求和開發中的落差</li>
<li>不是 Boss Driven Development</li>
<li>Doamin Specific Language (DSL 簡稱 人話, ex: 加班、時薪)</li>
</ul>
</li>
</ul>
<h2 id="u4EC0_u9EBC_u662F_BDD"><a href="#u4EC0_u9EBC_u662F_BDD" class="headerlink" title="什麼是 BDD"></a>什麼是 BDD</h2><ul>
<li>把你想做的紀錄下來，但是每個人都看得懂！</li>
<li>都用人話溝通</li>
<li>人話可轉換成程式</li>
<li>滿足使用者需求</li>
</ul>
<h2 id="SpecFlow_for_BDD__28Cucumber_2C_PHP__u4E5F_u6709_29"><a href="#SpecFlow_for_BDD__28Cucumber_2C_PHP__u4E5F_u6709_29" class="headerlink" title="SpecFlow for BDD (Cucumber, PHP 也有)"></a>SpecFlow for BDD (Cucumber, PHP 也有)</h2><ul>
<li>把文件和程式碼分開</li>
</ul>
<h2 id="BDD_by_Cucumber"><a href="#BDD_by_Cucumber" class="headerlink" title="BDD by Cucumber"></a>BDD by Cucumber</h2><ul>
<li>BDD Test Case -&gt; Accept TC -&gt; I TC -&gt; U TC</li>
<li>粒度越滾越小</li>
<li>但一樣可以用 Cucumber 來做 Unit Test，沒有說 Cucumber 一定只能用在 Acceptance Test</li>
</ul>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ul>
<li>什麼是 Scope? 老師說要提醒問他</li>
<li>用來避免 step definition 全域的副作用，例如有兩個 “When I Press Save”</li>
</ul>
<h2 id="Web_Service__u6E2C_u8A66"><a href="#Web_Service__u6E2C_u8A66" class="headerlink" title="Web Service 測試"></a>Web Service 測試</h2><ul>
<li>PostMan 可以 generate code snippet</li>
</ul>
<h2 id="Living_Documents_of_specFlow"><a href="#Living_Documents_of_specFlow" class="headerlink" title="Living Documents of specFlow"></a>Living Documents of specFlow</h2><ul>
<li>Pickles Living Documentation</li>
</ul>
<h2 id="u9019_u4E09_u5929_u6C92_u6559_u7684_u4E8B"><a href="#u9019_u4E09_u5929_u6C92_u6559_u7684_u4E8B" class="headerlink" title="這三天沒教的事"></a>這三天沒教的事</h2><ul>
<li>基礎建設設置<ul>
<li>版控</li>
<li>CI : build, report, auto email, auto testing</li>
<li>程式碼分析: Code Mess Detect, 深度檢測, 相似度檢測, Code Standard Detect(ex, PSR)</li>
<li>自動化部署</li>
</ul>
</li>
<li>軟體開發流程框架</li>
<li>團隊成員心態轉換<ul>
<li>PO, sketcholder, Scrum Team</li>
</ul>
</li>
</ul>
<h2 id="u5982_u4F55_u548C_PO__u6E9D_u901A"><a href="#u5982_u4F55_u548C_PO__u6E9D_u901A" class="headerlink" title="如何和 PO 溝通"></a>如何和 PO 溝通</h2><ul>
<li>千萬不要想「改變」他們 -&gt; 重點是「改善」，幫助他們解決問題。</li>
</ul>
<ol>
<li><p>先用「白板」與 PO 討論</p>
<ul>
<li>Why, What, Who，Given/When/Then</li>
<li>引導 PO 給實例，有哪些 Scenario，當場和 PO 討論時就定下來，越擬真越好</li>
<li>把白板結果拍下來！</li>
</ul>
</li>
<li><p>RD 拍白板的結果整理成 Gherkin Style Documents</p>
<ul>
<li>把白板照和 Behat 文件一起 mail 給他</li>
<li>一定要問 PO，這樣有沒有比較清楚？</li>
<li>把 HTML 產生給他</li>
<li>快速 prototype 給他，寫 acceptance test</li>
</ul>
</li>
<li><p>在白板上開始和 PO 使用 Given/When/Then 與 table 方式討論，描述 Scenario</p>
</li>
<li>直接用 Visual Studio 把 table generate 出來</li>
<li>需求異動時，請 PO 補上哪些 Scenario 要做什麼樣的調整(由 PO 發動)</li>
<li>請 PO 一開始整理 User Story 或 Story 時，直接使用 <em>一致的格式</em> (Gherkin)</li>
<li>終極目標，新增或異動需求時，透過 pull request 來更新 Gherkin 文件，讓 PO 操作網頁就好了。</li>
</ol>
<blockquote>
<p>重點不是誰寫！</p>
</blockquote>
<h2 id="IDEAs-1"><a href="#IDEAs-1" class="headerlink" title="IDEAs"></a>IDEAs</h2><ul>
<li>交付文件拿 30%</li>
<li>使用 Test Case 和需求單位 confirm 需求！就不用先寫 production code 之後才來改。</li>
<li>和需求單位確認還有沒有需要加入的 scenario，才不會之後被挌話「這是 common sense 啊」</li>
<li>因為要改難改，結果害所有人都很難用</li>
<li>如果討論 scenario 時客戶說沒有畫面我不知道 -&gt; 快速製 prototype</li>
<li>曳光彈開發 -&gt; 讓 prototype 不被浪費，UI 一直到 Controller 都 hard code。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HW_Learning"><a href="#HW_Learning" class="headerlink" title="HW Learning"></a>HW Learning</h2><ol>
<li>一次只新增一個 Scenario，一次只有一個紅燈，關注]]>
    </summary>
    
      <category term="TDD" scheme="http://blog.dj1020.net/tags/TDD/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD 實戰與自動測試 (91 哥) - Day 2 Web Testing]]></title>
    <link href="http://blog.dj1020.net/TDD-%E5%AF%A6%E6%88%B0%E8%88%87%E8%87%AA%E5%8B%95%E6%B8%AC%E8%A9%A6-91-%E5%93%A5-Day-2/"/>
    <id>http://blog.dj1020.net/TDD-實戰與自動測試-91-哥-Day-2/</id>
    <published>2015-10-24T01:54:27.000Z</published>
    <updated>2015-10-24T14:07:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>訓練 PM 描述精準的需求，精準的 Context(Scenario)，以 hw 為例。</li>
<li>I can do more. Do hw, no execute.</li>
<li>寫 TestCase 的 method, variables, expected, actual 命名都要從 Scenario 來！！！最好寫到讓非程式人員也能一看就懂。</li>
<li>要用的人好用，但程式人員就會相對難寫，正常，所以在寫 TestCase 千萬不要想 Production Code 怎麼實做。</li>
<li>Key ! 在寫測試案例，「不能有商業邏輯」、「不要想 production code 怎麼寫」，這是一道門檻，千萬不要把實作細節放進 TestCase，「只管”要”，不管”How”」。</li>
<li>跟老師要 hw1 正例、反例的 C# Code</li>
<li>要小心團隊寫 Code 人員不跑你的測試！可以自己先寫，教主管寫測試根本不用花多少時間。</li>
<li>把 TDD 課帶回去內部訓，以 CI Server 環境為測試為準，沒有說在誰的 machine 上能過 CI 上不過的問題。</li>
<li>CI Test 不過為最高優先</li>
<li>要 show 給 主管 看寫測試超簡單，production code 也許是 10 倍。</li>
<li>明白需求，測試碼會很好寫，但需求不明確，很容易大重工，造成時程不斷 Delay。</li>
</ol>
<h2 id="Unit_Test_vs_Integration_Test"><a href="#Unit_Test_vs_Integration_Test" class="headerlink" title="Unit Test vs Integration Test"></a>Unit Test vs Integration Test</h2><ul>
<li>Unit Test 要用 Integration Test 來保護，粒度更大，反例：普悠碼號上線營運打掉月台的例子。</li>
</ul>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><ul>
<li>Web Testing 主流，即使 Visual Studio 骨子裡也是用 Selenium。</li>
<li>把 Selenium 錄下來的 html 檔附在 QA bug issue 附件，太酷了，任何人拿到都可以匯入後重現 bug</li>
<li>如果不是在 Firefox 上執行的話，就要先轉 html -&gt; PHP, C#, javascript 再改 Driver，如 new ChromeDriver();</li>
<li>God! 可以直接用 Clipboard 複製 Selenium 上的 command 並轉換成對應的 PHP/C#/Ruby 上 xUnit 的 code</li>
</ul>
<h2 id="Page_Object"><a href="#Page_Object" class="headerlink" title="Page Object"></a>Page Object</h2><ul>
<li>把「使用者的行為」和「頁面上的元素」隔開</li>
<li>每個 Page Object 內的 public method 代表一個使用者行為, ex: pageObj.open(), pageObj.go()</li>
<li>TestCase 中把 Page Object instaniate 出來，利用 Page Object 操作網頁</li>
<li>如果 Page 上的元素有改變，只要變 Page Object 中的 prop 就行了，不用改 TestCase 的 Code</li>
<li>是一個 Design Pattern 可以自己 implement 不一定要靠 FluentAutomation 的 PageObject</li>
<li>Page Object 「封裝」了頁面上 UI 元素的變化，就算皮整個換掉，TestCase 程式也不用動。</li>
</ul>
<h2 id="u6E2C_u8A66_u6BD4_u4F8B_u91D1_u5B57_u5854"><a href="#u6E2C_u8A66_u6BD4_u4F8B_u91D1_u5B57_u5854" class="headerlink" title="測試比例金字塔"></a>測試比例金字塔</h2><ul>
<li>對 MVC 架構中的 C 寫 Integration Test 效益很高！</li>
<li>CRUD 寫 Unit Test 的沒有商業邏輯的情況下用處不大</li>
<li>Unit Test 才是快速找 Bug 位置，Integration Test 是測大功能可用度。</li>
<li>在 Legency System 上寫 Unit Test 報酬率不高，特別是 Production Code 寫很爛，不如從 Acceptance / Integration Test 開始。</li>
</ul>
<h2 id="u91CD_u69CB_u6280_u5DE7"><a href="#u91CD_u69CB_u6280_u5DE7" class="headerlink" title="重構技巧"></a>重構技巧</h2><ul>
<li>要先把抽象層級全部重構完成，才去 implement 細節(填肉)</li>
</ul>
<h2 id="Policy__u79D8_u8A23"><a href="#Policy__u79D8_u8A23" class="headerlink" title="Policy 秘訣"></a>Policy 秘訣</h2><ul>
<li>原本最高境界應該是，需要用 interface 時才用。</li>
<li>但是菜鳥進來，他怎麼知道什麼時候要用，什麼時候不用。你教了半天，結果就是因為經驗不足，該用時反而沒用，不該用時一直用。</li>
<li>乾脆全部規定要用！ 目的：讓之後老鳥還有機會可以把 dirty code 救回來。</li>
<li>不能直接 new Class() 全部不行！除了 DTO (Data Transfer Object) 以外。</li>
<li>一定要開 factory，把 new 放進去</li>
<li>會產生 9成的彈性(experienced by 91哥)，CP 值極高。</li>
</ul>
<h2 id="Interface__u5B9A_u7FA9_u7684_u79D8_u8A23"><a href="#Interface__u5B9A_u7FA9_u7684_u79D8_u8A23" class="headerlink" title="Interface 定義的秘訣"></a>Interface 定義的秘訣</h2><ul>
<li>由使用者的角度去定義，Ex: 實體是”黑貓”，但被當成”物流商”，這是站在「頁面」這個使用者的角度來看。</li>
<li>問除了 union 之外的 interface API 去除參數的方法 (ex: 用 constructor 塞參數)<br>*</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>訓練 PM 描述精準的需求，精準的 Context(Scenario)，以 hw 為例。</li>
<l]]>
    </summary>
    
      <category term="TDD" scheme="http://blog.dj1020.net/tags/TDD/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #20 - Laravel + React (謝士揚)]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89Day-20-Laravel-React-%E8%AC%9D%E5%A3%AB%E6%8F%9A/"/>
    <id>http://blog.dj1020.net/PHP也有Day-20-Laravel-React-謝士揚/</id>
    <published>2015-10-22T11:43:34.000Z</published>
    <updated>2015-10-23T04:54:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>JSX</li>
<li>State 變數<ul>
<li>如果更新的話，元件內容可能會改變</li>
<li>getInitialState() 時 return 的物件 { name: “sexyyoung” }</li>
<li>在 render 裡要用的話要 this.state.name</li>
<li>render 可 return ( JSX )</li>
</ul>
</li>
<li>Props 變數<ul>
<li>元件父層傳來的變數</li>
<li>寫在 JSX 中 tag 的 attributes 裡</li>
<li>JSX 的 Tag name 要對應 React 的 class name (createClass)</li>
</ul>
</li>
<li>React Initialize 流程圖</li>
</ul>
<h2 id="u5BE6_u969B_u6848_u4F8B"><a href="#u5BE6_u969B_u6848_u4F8B" class="headerlink" title="實際案例"></a>實際案例</h2><ul>
<li>componentDidMount - call ajax 取資料，並用 setState 塞資料到 component 裡，雙向 binding 會直接 render 出來 items。</li>
</ul>
<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><ul>
<li>設定檔 package.json 裡要設 main : “server.js”</li>
<li>設定檔 package.json 裡要指定 node 版本</li>
<li>webpack 自己的設定檔檔名固定是 …</li>
<li>loders 讀取器，可轉 sass 成 css</li>
<li>webpack-dev-server 套件持續 compile 且 browser sync, 安裝方式 npm install -g webpack-dev-serer</li>
<li><p>導入 React</p>
<ul>
<li>Babel-loader 可以轉 ES6, JSX, … 成 JS</li>
<li>webpack.config.js 要改 entry 變數，修改進入點</li>
<li>利用 module.exports 來模組化</li>
</ul>
</li>
<li><p>寫一個 server.js 搭配 webpack-dev-server 可以架前端 server (利用 nodejs)</p>
</li>
<li>常用設定放在 common.js， server.js 設定可以拆分成 production.server.js / dev.server.js</li>
<li>在 server.js 中設定 proxy 去避免非同源 ajax 呼叫的問題</li>
</ul>
<h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h2><ul>
<li>講太快</li>
</ul>
<h2 id="React_Issues"><a href="#React_Issues" class="headerlink" title="React Issues"></a>React Issues</h2><ul>
<li>資料不對稱，SEO 下降，抓不到資料 -&gt; 用 isomorphic</li>
</ul>
<p>import from 是 ES6 的語法<br>require for ES5 也行</p>
<p>HotReplacementPlugin 是 webpack 內建</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>JSX</li>
<li>State 變數<ul>
<li>如果更新的話，元件內容可能會改變</li>
]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
