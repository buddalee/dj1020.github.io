<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[閃亮亮大師之路]]></title>
  <subtitle><![CDATA[程式學習心得筆記]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.dj1020.net/"/>
  <updated>2016-03-03T09:43:54.000Z</updated>
  <id>http://blog.dj1020.net/</id>
  
  <author>
    <name><![CDATA[閃亮亮dj]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - SOLID 原則 (2) Open Closed Principle 開放封閉原則 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87(2)-Open-Closed-2016-03-03/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則(2)-Open-Closed-2016-03-03/</id>
    <published>2016-03-03T11:30:59.000Z</published>
    <updated>2016-03-03T09:43:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2><h4 id="u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063__u767C_u554F"><a href="#u6309_u6B64__u67E5_u770B_u5DF2_u5B8C_u6210_u7684_Git__u6E90_u78BC_uFF0C_u904E_u7A0B_u6709_u554F_u984C_u53EF_u5230_Laravel__u53F0_u7063__u767C_u554F" class="headerlink" title="按此 查看已完成的 Git 源碼，過程有問題可到 Laravel 台灣 發問"></a><a href="https://github.com/dj1020/CH9_Open_Closed_Principle_Demo" target="_blank" rel="external">按此</a> 查看已完成的 Git 源碼，過程有問題可到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laravel 台灣</a> 發問</h4><ol>
<li>建立專案 <code>git clone https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo.git ch9_OpenClose_demo</code></li>
<li>進入專案目錄 <code>cd ch9_OpenClose_demo</code></li>
<li>安裝相依套件 <code>composer install</code>，完成後執行 <code>php artisan</code> 如果沒報錯就是好了。</li>
<li>編輯 .env 設定資料庫帳密，如果 .env 不存在，利用 <code>cp .env.example .env</code> 來建立一個後修改。</li>
<li>執行 <code>php artisan key:generate</code></li>
<li>利用 migrate 測試資料庫設定 <code>php artisan migrate</code>，成功的話同時會建立三個 tables: <code>accounts</code>, <code>orders</code>, <code>products</code></li>
<li>使用 <code>php artisan serve</code> 開啟一個 web host</li>
<li>用瀏覽器打開 <code>http://localhost:8000/</code> 應該可以看到 Laravel 5 字樣的 welcome page</li>
<li>用瀏覽器打開 <code>http://localhost:8000/checkout</code> 應該可以看到一個假的購物車準備結帳</li>
<li>按下提交訂單，會再 <code>orders</code> table 加入一筆訂單資料，去資料庫查看一下有沒有加入。</li>
<li>Done.</li>
</ol>
<h2 id="u958B_u653E_u5C01_u9589_u539F_u5247__28Open_Closed_Principle_29"><a href="#u958B_u653E_u5C01_u9589_u539F_u5247__28Open_Closed_Principle_29" class="headerlink" title="開放封閉原則 (Open Closed Principle)"></a>開放封閉原則 (Open Closed Principle)</h2><p>所謂開放封閉原則(OCP)，按照英文原文是「Code is open for extension but closed for modification.」直接翻譯「<em>程式碼應該要開放使得它可以被擴充，但也要封閉以避免不必要的修改</em>」想必大家還是不了解是什麼意思，如果用閃亮亮的話來說，就是</p>
<blockquote>
<font size="+2">新增/變更邏輯判斷時，不用修改使用該邏輯的 caller 的程式碼</font>

</blockquote>
<p>也可以說</p>

<blockquote>
<font size="+2">不必要修改 Client 端程式，就可以擴充新功能，或改變業務邏輯。</font>

</blockquote>
<p>舉例來說，</p>
<ul>
<li><strong>如果你寫的是購物網站，你能不能「新增一種付款方式」，可新增 class，但幾乎不用修改原本已經上線的程式碼？</strong></li>
<li><strong>如果你在會員註冊時的密碼驗證邏輯原本只有「密碼不能少於6個字元」，你能不能增加「密碼中需含大、小寫英文字母」的邏輯，但幾乎不用修改原本已經上線的程式碼？</strong></li>
<li><strong>以書中的例子來說，它想修改驗證是否為「合法訂單」的驗證邏輯，要怎麼架構你的程式，才能讓以後新增/變更驗證邏輯時，不用修改 caller 的程式？</strong></li>
</ul>
<p>讓我們延續之前 <a href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87-2016-01-21/">Laradiner 讀書會 - SOLID 原則 (1) Single Responsibility Principle 單一職責原則 導讀心得整理筆記 | 閃亮亮大師之路</a> 的例子：</p>
<h4 id="u6848_u4F8B_3A"><a href="#u6848_u4F8B_3A" class="headerlink" title="案例:"></a>案例:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderProcessor constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(BillerInterface <span class="variable">$biller</span>, OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;biller = <span class="variable">$biller</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;biller-&gt;bill(<span class="variable">$order</span>-&gt;getAccount()-&gt;id, <span class="variable">$order</span>-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u8ACB_u95DC_u6CE8_u9019_u4E00_u6BB5_u5224_u65B7_u908F_u8F2F_uFF1A"><a href="#u8ACB_u95DC_u6CE8_u9019_u4E00_u6BB5_u5224_u65B7_u908F_u8F2F_uFF1A" class="headerlink" title="請關注這一段判斷邏輯："></a>請關注這一段判斷邏輯：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6848_u4F8B_u7814_u8A0E_uFF1A"><a href="#u6848_u4F8B_u7814_u8A0E_uFF1A" class="headerlink" title="案例研討："></a>案例研討：</h4><h4 id="1-__u9019_u4E00_u6BB5_u5224_u65B7_u7684_u908F_u8F2F_u5728_u300C_u505A_u4EC0_u9EBC_u4E8B_uFF1F_u300D"><a href="#1-__u9019_u4E00_u6BB5_u5224_u65B7_u7684_u908F_u8F2F_u5728_u300C_u505A_u4EC0_u9EBC_u4E8B_uFF1F_u300D" class="headerlink" title="1. 這一段判斷的邏輯在「做什麼事？」"></a>1. 這一段判斷的邏輯在「做什麼事？」</h4><h4 id="2-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_u300C_u597D_u5728_u54EA_u88E1_u300D_uFF1F"><a href="#2-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_u300C_u597D_u5728_u54EA_u88E1_u300D_uFF1F" class="headerlink" title="2. 這一段邏輯的寫法「好在哪裡」？"></a>2. 這一段邏輯的寫法「好在哪裡」？</h4><h4 id="3-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_uFF0C_u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#3-__u9019_u4E00_u6BB5_u908F_u8F2F_u7684_u5BEB_u6CD5_uFF0C_u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="3. 這一段邏輯的寫法，以後在維護專案時會造成什麼問題？"></a>3. 這一段邏輯的寫法，以後在維護專案時會造成什麼問題？</h4><p><br><br><br><br><br><br><br><br><!-- ========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ========== --></p>
<hr style="border: 0; height: 0; box-shadow: 0 0 10px 1px black;">

<h4 id="u9019_u4E00_u6BB5_u908F_u8F2F_u505A_u4EC0_u9EBC_u4E8B_uFF1F"><a href="#u9019_u4E00_u6BB5_u908F_u8F2F_u505A_u4EC0_u9EBC_u4E8B_uFF1F" class="headerlink" title="這一段邏輯做什麼事？"></a>這一段邏輯做什麼事？</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>驗證是否為「重複訂單」</p>
<h4 id="u597D_u5728_u54EA_u88E1_uFF1F"><a href="#u597D_u5728_u54EA_u88E1_uFF1F" class="headerlink" title="好在哪裡？"></a>好在哪裡？</h4><ul>
<li>可讀性佳</li>
<li>可測試性佳，因為使用了依賴注入(Dependency Injection)，注入 orders 這個 repository 來取得 order count，讓我們可以方便使用 mock 技巧寫測試程式。<br><br></li>
</ul>
<h4 id="u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#u4EE5_u5F8C_u5728_u7DAD_u8B77_u5C08_u6848_u6642_u6703_u9020_u6210_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="以後在維護專案時會造成什麼問題？"></a>以後在維護專案時會造成什麼問題？</h4><ul>
<li><p>問題一：<code>驗證訂單</code>的邏輯是要換了怎麼辦？<br>ex: 我不想用「重複訂單」做為判斷該訂單是否合法(valid)的依據的話呢？</p>
</li>
<li><p>問題二：我們要怎麼新增<code>驗證訂單</code>的邏輯？<br>ex: 除了驗證「重複訂單」我還想驗證「訂購者的帳戶必須沒有被中止」才能成立訂單。</p>
</li>
<li><p>問題三：如果新增一個邏輯還好，要是新增「很多」驗證邏輯的話，怎麼避免 process 裡的程式迅速變成 spaghetti(義大利麵)？</p>
</li>
<li><p>問題四：新增「很多」驗證邏輯後，怎麼測試這些驗證邏輯有沒有正確運作？<br><br></p>
</li>
</ul>
<h4 id="u7D50_u8AD6_uFF1A_u9019_u6BB5_u908F_u8F2F_u88AB_u5BEB_u5728_process_28_29__u4E2D_uFF0C_u9055_u53CD_u4E86_u958B_u653E_u5C01_u9589_u539F_u5247__28OCP_29"><a href="#u7D50_u8AD6_uFF1A_u9019_u6BB5_u908F_u8F2F_u88AB_u5BEB_u5728_process_28_29__u4E2D_uFF0C_u9055_u53CD_u4E86_u958B_u653E_u5C01_u9589_u539F_u5247__28OCP_29" class="headerlink" title="結論：這段邏輯被寫在 process() 中，違反了開放封閉原則 (OCP)"></a>結論：這段邏輯被寫在 process() 中，違反了開放封閉原則 (OCP)</h4><p>因為這段邏輯被寫在 process() 中，所以每次邏輯要修改都要變更 process()，使得 process() 本身違反了「開放封閉原則(OCP)」。我們希望 process() 這段程式是 open for extension，不是 open for modification。</p>
<p>然而，對於呼叫 process() 的 caller <code>CheckoutController@checkout</code> 來說，checkout() 就沒有違反 OCP，不管 process() 怎麼變動，checkout() 裡的程式都不用改變，只要 process() 最後會回傳訂單 id 給 checkout() 就行。</p>
<p><br><br></p>
<h2 id="u5BE6_u6230_Demo_Solution"><a href="#u5BE6_u6230_Demo_Solution" class="headerlink" title="實戰 Demo Solution"></a>實戰 Demo Solution</h2><p>三個問題，一次解決：</p>
<ul>
<li><p>問題一：<code>驗證訂單</code>的邏輯是要換了怎麼辦？<br>ex: 我不想用「重複訂單」做為判斷該訂單是否合法(valid)的依據的話呢？</p>
</li>
<li><p>問題二：我們要怎麼新增<code>驗證訂單</code>的邏輯？<br>ex: 除了驗證「重複訂單」我還想驗證「訂購者的帳戶必須沒有被中止」才能成立訂單。</p>
</li>
<li><p>問題三：如果新增一個邏輯還好，要是新增「很多」驗證邏輯的話，怎麼避免 process 裡的程式迅速變成 spaghetti(義大利麵)？</p>
</li>
<li><p>問題四：新增「很多」驗證邏輯後，怎麼測試這些驗證邏輯有沒有正確運作？</p>
</li>
</ul>
<h4 id="Step_1_-__u5B9A_u7FA9_OrderValidator_Interface"><a href="#Step_1_-__u5B9A_u7FA9_OrderValidator_Interface" class="headerlink" title="Step 1 - 定義 OrderValidator Interface"></a>Step 1 - 定義 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OrderValidatorInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_2_-__u5C07_Validator__u7528_u53C3_u6578_u50B3_u5165_OrderProcessor__u4E26_u547C_u53EB_u6BCF_u500B_u50B3_u5165_u7684_u9A57_u8B49_u908F_u8F2F"><a href="#Step_2_-__u5C07_Validator__u7528_u53C3_u6578_u50B3_u5165_OrderProcessor__u4E26_u547C_u53EB_u6BCF_u500B_u50B3_u5165_u7684_u9A57_u8B49_u908F_u8F2F" class="headerlink" title="Step 2 - 將 Validator 用參數傳入 OrderProcessor 並呼叫每個傳入的驗證邏輯"></a>Step 2 - 將 Validator 用參數傳入 OrderProcessor 並呼叫每個傳入的驗證邏輯</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line">    <span class="keyword">private</span>   <span class="variable">$validators</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderProcessor constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(</span><br><span class="line">        BillerInterface <span class="variable">$biller</span>,</span><br><span class="line">        OrderRepository <span class="variable">$orders</span>,</span><br><span class="line">        array <span class="variable">$validators</span> = []</span><br><span class="line">    )</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;biller = <span class="variable">$biller</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;validators = <span class="variable">$validators</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 呼叫每個驗證邏輯</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;validators <span class="keyword">as</span> <span class="variable">$validator</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span>-&gt;validate(<span class="variable">$order</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;biller-&gt;bill(<span class="variable">$order</span>-&gt;getAccount()-&gt;id, <span class="variable">$order</span>-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$this</span>-&gt;orders-&gt;logOrder(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_3_-__u9A57_u8B49_u300C_u91CD_u8907_u8A02_u55AE_u300D_u5BE6_u4F5C_OrderValidator_Interface"><a href="#Step_3_-__u9A57_u8B49_u300C_u91CD_u8907_u8A02_u55AE_u300D_u5BE6_u4F5C_OrderValidator_Interface" class="headerlink" title="Step 3 - 驗證「重複訂單」實作 OrderValidator Interface"></a>Step 3 - 驗證「重複訂單」實作 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentOrderValidator</span> <span class="keyword">implements</span> <span class="title">OrderValidatorInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$recent</span> = <span class="variable">$this</span>-&gt;orders-&gt;getRecentOrderCount(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$recent</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_4_-__u9A57_u8B49_u300C_u8A02_u8CFC_u8005_u7684_u5E33_u6236_u5FC5_u9808_u6C92_u6709_u88AB_u4E2D_u6B62_u300D_u5BE6_u4F5C_OrderValidator_Interface"><a href="#Step_4_-__u9A57_u8B49_u300C_u8A02_u8CFC_u8005_u7684_u5E33_u6236_u5FC5_u9808_u6C92_u6709_u88AB_u4E2D_u6B62_u300D_u5BE6_u4F5C_OrderValidator_Interface" class="headerlink" title="Step 4 - 驗證「訂購者的帳戶必須沒有被中止」實作 OrderValidator Interface"></a>Step 4 - 驗證「訂購者的帳戶必須沒有被中止」實作 OrderValidator Interface</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuspendedOrderValidator</span> <span class="keyword">implements</span> <span class="title">OrderValidatorInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orders</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orders</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orders = <span class="variable">$orders</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;getAccount()-&gt;isSuspended()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Suspended account may not order.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Step_5_-__u5229_u7528_Laravel__u63D0_u4F9B_u7684_IoC_Container__u62BD_u8C61_u5316_u521D_u59CB_OrderProcessor__u7684_u6D41_u7A0B"><a href="#Step_5_-__u5229_u7528_Laravel__u63D0_u4F9B_u7684_IoC_Container__u62BD_u8C61_u5316_u521D_u59CB_OrderProcessor__u7684_u6D41_u7A0B" class="headerlink" title="Step 5 - 利用 Laravel 提供的 IoC Container 抽象化初始 OrderProcessor 的流程"></a>Step 5 - 利用 Laravel 提供的 IoC Container 抽象化初始 OrderProcessor 的流程</h4><ul>
<li>可以先寫在 app/Providers/AppServiceProvider.php 的 boot() 裡面</li>
<li>如果以後要 bind 的東西太多，可以再拆到別的 Provider 的檔案中。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app/Providers/AppServiceProvider.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        app()-&gt;bind(<span class="string">'BillerInterface'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CreditCardBiller();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        app()-&gt;bind(<span class="string">'OrderProcessor'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OrderProcessor(</span><br><span class="line">                app()-&gt;make(<span class="string">'BillerInterface'</span>),   <span class="comment">// 運用上面的 bind 來取得 CreditCardBiller 實體</span></span><br><span class="line">                app()-&gt;make(OrderRepository::class),</span><br><span class="line">                [</span><br><span class="line">                    app()-&gt;make(RecentOrderValidator::class),</span><br><span class="line">                    app()-&gt;make(SuspendedOrderValidator::class)</span><br><span class="line">                ]</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這段程式會在 Laravel 啟動時就執行，作用是註冊一個 keyword 叫 <code>&#39;OrderProcessor&#39;</code> 在 container 中。</p>
<p>之後，當你使用 <code>App::make(&#39;OrderProcessor&#39;)</code> 時，便會執行 bind 中的 function。</p>
<p>最後會把兩個 validators 都初始化(instanciate) 好，塞(inject)到 new 出來的 OrderProcessor 實體(instance)中，並且回傳。</p>
<h4 id="Step_6_-__u6539_u7528_App_3A_3Amake__u4F86_u521D_u59CB_u5316_OrderProcessor_uFF0C_u53D6_u4EE3_u4E4B_u524D_u7684_new_OrderProcessor_28_29"><a href="#Step_6_-__u6539_u7528_App_3A_3Amake__u4F86_u521D_u59CB_u5316_OrderProcessor_uFF0C_u53D6_u4EE3_u4E4B_u524D_u7684_new_OrderProcessor_28_29" class="headerlink" title="Step 6 - 改用 App::make 來初始化 OrderProcessor，取代之前的 new OrderProcessor()"></a>Step 6 - 改用 App::make 來初始化 OrderProcessor，取代之前的 new OrderProcessor()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app/Http/Controllers/CheckoutController.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckoutController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 建立訂單 ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 處理訂單，之前是用 $orderProcessor = new OrderProcessor(...);</span></span><br><span class="line">        <span class="variable">$orderProcessor</span> = app()-&gt;make(<span class="string">'OrderProcessor'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$orderId</span> = <span class="variable">$orderProcessor</span>-&gt;process(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="string">"&lt;h2&gt;Done, 訂單 ID: "</span> . <span class="variable">$orderId</span> . <span class="string">"&lt;/h2&gt;"</span> .</span><br><span class="line">            <span class="string">"&lt;h2&gt;&#123;$order-&gt;getAccount()-&gt;name&#125;&lt;/h2&gt;"</span> .</span><br><span class="line">            <span class="string">"&lt;h2&gt;&#123;$order-&gt;getAmount()&#125;&lt;/h2&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>客倌們看到這邊，有沒有發現之後要新增、調整訂單驗證邏輯，只要修改這一段，就可以自己新增或拿掉某個驗證規則了：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app()-&gt;bind(<span class="string">'OrderProcessor'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderProcessor(</span><br><span class="line">        app()-&gt;make(<span class="string">'BillerInterface'</span>),</span><br><span class="line">        app()-&gt;make(OrderRepository::class),</span><br><span class="line">        [</span><br><span class="line">            app()-&gt;make(RecentOrderValidator::class),</span><br><span class="line">            app()-&gt;make(SuspendedOrderValidator::class),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新增更多證驗規則 ...</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="u8A73_u7D30_u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u8ACB_u5230_u5230_Laradiner__u8B80_u66F8_u6703__u4F86_u770B_u9583_u4EAE_u4EAE_Live_Coding_u3002"><a href="#u8A73_u7D30_u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u8ACB_u5230_u5230_Laradiner__u8B80_u66F8_u6703__u4F86_u770B_u9583_u4EAE_u4EAE_Live_Coding_u3002" class="headerlink" title="詳細過程請看 Git Repo Here，或請到到 Laradiner 讀書會 來看閃亮亮 Live Coding。"></a>詳細過程請看 <a href="https://github.com/dj1020/CH9_Open_Closed_Principle_Demo" target="_blank" rel="external">Git Repo Here</a>，或請到到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laradiner 讀書會</a> 來看閃亮亮 Live Coding。</h4><h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>其實只要你時時想著 SRP(單一職責原則)，不知不覺中程式很容易就符合 OCP(開放封閉原則)。但程式不必要太早優化，要是你的證驗邏輯永遠只有「驗證近期重複訂單」這一條的話，搞一堆 interface、validator、provider、bind 等等，反而是將解法複雜化，用牛刀來殺雞。</p>
<p>然而，一旦當需求有變，或是需求本身開始複雜化時，運用 Open Closed 原則來重構程式，會讓你的程式維護之路好走很多！如果一開始沒做這件事，之後的「破窗效應」很容易讓整個專案死掉，再也改不動，讓你的 application 從一個「軟體」變成「硬體」。謹記啊~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6848_u4F8B_u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例前置作業"></a>案例前置作業</h2]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #22 - PHPUnit 到 CI 持續整合]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89day-22_PHPUNIT_%E5%88%B0_CI%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88/"/>
    <id>http://blog.dj1020.net/PHP也有day-22_PHPUNIT_到_CI持續整合/</id>
    <published>2016-02-25T11:30:34.000Z</published>
    <updated>2016-02-26T01:17:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CI_u3001CD"><a href="#CI_u3001CD" class="headerlink" title="CI、CD"></a>CI、CD</h2><ul>
<li>持續整合</li>
<li>持續交付</li>
</ul>
<h2 id="u81EA_u52D5_u5316_u6E2C_u8A66_u3001_u5831_u544A_u3001_u4F48_u7F72"><a href="#u81EA_u52D5_u5316_u6E2C_u8A66_u3001_u5831_u544A_u3001_u4F48_u7F72" class="headerlink" title="自動化測試、報告、佈署"></a>自動化測試、報告、佈署</h2><ul>
<li>避免</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="CI_u3001CD"><a href="#CI_u3001CD" class="headerlink" title="CI、CD"></a>CI、CD</h2><ul>
<li>持續整合</li>
<li>持續交付</li>
</ul>
<h2 id="u81E]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test Corner 講座#2 - 談 Mutation Testing@Mozilla]]></title>
    <link href="http://blog.dj1020.net/Test-Corner-%E8%AC%9B%E5%BA%A7-2-%E8%AB%87-Mutation-Testing-Mozilla/"/>
    <id>http://blog.dj1020.net/Test-Corner-講座-2-談-Mutation-Testing-Mozilla/</id>
    <published>2016-02-02T09:57:16.000Z</published>
    <updated>2016-02-03T01:07:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mutation_Testing_-_Mike_Lien"><a href="#Mutation_Testing_-_Mike_Lien" class="headerlink" title="Mutation Testing - Mike Lien"></a>Mutation Testing - Mike Lien</h1><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><ul>
<li>1971 提出</li>
<li>用來判斷你寫的測試程式的品質</li>
<li>因為計算能力不足，所以議題淡化</li>
</ul>
<h2 id="Code_Coverge_Analysis"><a href="#Code_Coverge_Analysis" class="headerlink" title="Code Coverge Analysis"></a>Code Coverge Analysis</h2><ul>
<li>Full covered via analyses != good testing</li>
<li>Code coverge = Tell us lines tested</li>
<li><code>Code not covered -&gt; Using mutation testing</code></li>
</ul>
<h2 id="Step_1_3A_Generate_the_Mutation"><a href="#Step_1_3A_Generate_the_Mutation" class="headerlink" title="Step 1: Generate the Mutation"></a>Step 1: Generate the Mutation</h2><ul>
<li>故意 inject 一些錯誤的 code，讓跑測試時產生 error</li>
<li>definition: 當故意塞 error 進去時，就是 mutation</li>
<li>每次只改一個小判斷，稱為一個 mutant</li>
<li>每次只改一個小判斷，造成太過大量的測試，以及 compile 時間 -&gt; 解法：改 compiled code</li>
</ul>
<h2 id="Step_2_3A_Mutation_Testing"><a href="#Step_2_3A_Mutation_Testing" class="headerlink" title="Step 2: Mutation Testing"></a>Step 2: Mutation Testing</h2><ul>
<li>Stop when a test fails 不用整個 suite 跑完</li>
<li>Choose your tests</li>
<li>利用 version control，只測相關連的 code</li>
</ul>
<h2 id="Step_3_3A_Kill_or_Leave"><a href="#Step_3_3A_Kill_or_Leave" class="headerlink" title="Step 3: Kill or Leave"></a>Step 3: Kill or Leave</h2><ul>
<li>Kill the mutation when test failed</li>
<li>Leave mutation when all tests are passed</li>
</ul>
<h2 id="Step_4_3A_The_Results"><a href="#Step_4_3A_The_Results" class="headerlink" title="Step 4: The Results"></a>Step 4: The Results</h2><ul>
<li>結果需要人工去看</li>
<li>期望測試碼可以抓出 mutant</li>
<li>結果分析：<ul>
<li>Dead code</li>
<li>Non-functional code</li>
<li>不會跑到的 code</li>
<li>無論怎麼改都不影響結果的 code ex: 迴圈少跑一個的例子</li>
</ul>
</li>
<li>把 always pass 的地方補上測試，讓測試 fail，然後 kill mutation operator 讓測試 pass。</li>
</ul>
<h1 id="Data_Driven_Testing_in_Payment_System_-_Alan_Liu"><a href="#Data_Driven_Testing_in_Payment_System_-_Alan_Liu" class="headerlink" title="Data Driven Testing in Payment System - Alan Liu"></a>Data Driven Testing in Payment System - Alan Liu</h1><p>CyberSoft - 銀行的代工廠，金融產品</p>
<h2 id="u7279_u6027"><a href="#u7279_u6027" class="headerlink" title="特性"></a>特性</h2><ul>
<li>金融產品 Life Cycle 長，好的測試會讓公司省很多錢</li>
<li>用 Data 來測系統，需很多測資保證系統正確</li>
<li>帳務計算系統<ul>
<li>一堆商業邏輯和運算及 query 一堆 tables</li>
<li>每個特店還可能談出不同邏輯</li>
<li>最重要就是算出來錢絕對不能錯！</li>
<li>需要大量不同的測試資料，需要有各式組合的測資</li>
</ul>
</li>
<li>以 Data Generator 產生各式不同的「帳務資料」測資</li>
<li>以 Checker 來驗證算出來的結果</li>
</ul>
<h2 id="u67B6_u69CB"><a href="#u67B6_u69CB" class="headerlink" title="架構"></a>架構</h2><ul>
<li>Testing framework: Robot framework 提供的 DDT approach</li>
<li>DB data generator: sqlalchemy</li>
<li>Checker: Robot 中的 keyword</li>
</ul>
<h2 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h2><ul>
<li>利用 keyword driven 方式產生測資，同時設定 expected value</li>
</ul>
<h2 id="u4F7F_u7528_DDT__u5728_u9A57_u8B49_u91D1_u878D_u7522_u54C1_u7684_u597D_u8655"><a href="#u4F7F_u7528_DDT__u5728_u9A57_u8B49_u91D1_u878D_u7522_u54C1_u7684_u597D_u8655" class="headerlink" title="使用 DDT 在驗證金融產品的好處"></a>使用 DDT 在驗證金融產品的好處</h2><ul>
<li>可以在短時間內完成大量不同的測試案例，只要商業邏輯不變動，即可大量提高 ROI</li>
<li>可以專注在要用怎麼樣的資料來涵蓋測試範圍(這正是 data driven testing 帶來的好處)</li>
<li>專心測商業邏輯，不用(少)管準備假資料/驗證資料的麻煩</li>
</ul>
<h2 id="u6311_u6230"><a href="#u6311_u6230" class="headerlink" title="挑戰"></a>挑戰</h2><ul>
<li>繁瑣的資料產生邏輯</li>
<li>如何對結果驗證，寫 Checker 程式</li>
</ul>
<h1 id="Xcode__u7684_u81EA_u52D5_u5316_u6E2C_u8A66_for_iOS_development"><a href="#Xcode__u7684_u81EA_u52D5_u5316_u6E2C_u8A66_for_iOS_development" class="headerlink" title="Xcode 的自動化測試 for iOS development"></a>Xcode 的自動化測試 for iOS development</h1><h2 id="Demo_1_-_UI_Recording_/_Playback"><a href="#Demo_1_-_UI_Recording_/_Playback" class="headerlink" title="Demo 1 - UI Recording / Playback"></a>Demo 1 - UI Recording / Playback</h2><ul>
<li>開專案</li>
<li>加入 target(package) 把 UI Testing bundle 加入專案</li>
<li>可選 Swift / Object-C 推薦 Swift 語法較簡潔</li>
<li>有 setUp/tearDown，每個測試以 test 為開頭</li>
<li>直接操作模擬器就可以即時錄製！酷！</li>
</ul>
<h2 id="UI_Testing__u6D41_u7A0B"><a href="#UI_Testing__u6D41_u7A0B" class="headerlink" title="UI Testing 流程"></a>UI Testing 流程</h2><ul>
<li>Locale Element &lt;—&gt; Operate Element &lt;–&gt; Verify</li>
<li>Example:<ul>
<li>// asseration</li>
<li>XCAssertEqual();</li>
</ul>
</li>
</ul>
<h2 id="Demo_2"><a href="#Demo_2" class="headerlink" title="Demo 2 -"></a>Demo 2 -</h2><ul>
<li><p>要設 [addBtn setAccessibilityIdentifier:@”Add”]; 以免呈現是多國語言的介面</p>
</li>
<li><p>需要 iOS 9 以上，搭配 OSX 10.11 才能跑</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mutation_Testing_-_Mike_Lien"><a href="#Mutation_Testing_-_Mike_Lien" class="headerlink" title="Mutation Testing - Mike Lien"></a>Mu]]>
    </summary>
    
      <category term="Test Corner" scheme="http://blog.dj1020.net/tags/Test-Corner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - SOLID 原則 (1) Single Responsibility Principle 單一職責原則 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83-SOLID-%E5%8E%9F%E5%89%87-2016-01-21/"/>
    <id>http://blog.dj1020.net/Laradiner讀書會-SOLID-原則-2016-01-21/</id>
    <published>2016-01-18T12:17:59.000Z</published>
    <updated>2016-03-03T06:08:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例 1 前置作業"></a>案例 1 前置作業</h2><h4 id="u6309_u6B64_u67E5_u770B_Git__u6E90_u78BC"><a href="#u6309_u6B64_u67E5_u770B_Git__u6E90_u78BC" class="headerlink" title="按此查看 Git 源碼"></a><a href="https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo" target="_blank" rel="external">按此</a>查看 Git 源碼</h4><ol>
<li>建立專案 <code>laravel new ch8_SRP_demo</code></li>
<li>進入專案目錄 <code>cd ch8_SRP_demo</code></li>
<li>安裝 Laravel 相依套件 <code>composer install</code></li>
<li>編輯 .env 設定資料庫帳密，還有記得 <code>php artisan key:generate</code></li>
<li>利用 migrate 測試資料庫設定 <code>php artisan migrate:install</code></li>
<li>建立 <code>Account</code> model 類別和對應的 table migration <code>php artisan make:model MyCart/Account -m</code></li>
<li>同上，建立 <code>Order</code> model 類別和 table <code>php artisan make:model MyCart/Order -m</code></li>
<li>同上，建立 <code>Product</code> model 類別和 table <code>php artisan make:model MyCart/Product -m</code></li>
<li>建立測試用 Controller 透過 <code>php artisan make:controller CheckoutController</code></li>
<li>(optional) 補一下 <a href="https://gist.githubusercontent.com/barryvdh/5227822/raw/811f21a14875887635bb3733aef32da51fa0501e/_ide_helper.php" target="_blank" rel="external">ide_helper</a> 和 <a href="https://gist.githubusercontent.com/barryvdh/bb6ffc5d11e0a75dba67/raw/1467343b1140f568c8e30656926180cd283f283c/.phpstorm.meta.php" target="_blank" rel="external">phpsotrm meta</a> 協助 PhpStorm 語法顯示</li>
<li>在 <code>MyCart</code> 目錄下建立 <code>MyCart</code> 類別，還有模擬加入購物車並結帳的行為，建立 routes 和 checkout 頁面</li>
<li>此時進入 checkout 頁報錯誤是正常，這時才開始一個個補齊相關的 production code 和 DB 欄位等等，讓頁面顯示</li>
<li>補上要處理訂單的 handler，並設定 routes 接 form post 資料</li>
<li>建立訂單(Order)，以及訂單處理流程(OrderProcessor)，還有金流處理介面(BillerInterface)，報錯正常，還未實作</li>
<li>完成案例 1，實作處理訂單流程</li>
</ol>
<h2 id="u55AE_u4E00_u8077_u8CAC_u539F_u5247__28Single_Responsibility_Principle_29"><a href="#u55AE_u4E00_u8077_u8CAC_u539F_u5247__28Single_Responsibility_Principle_29" class="headerlink" title="單一職責原則 (Single Responsibility Principle)"></a>單一職責原則 (Single Responsibility Principle)</h2><p>所謂單一職責原則(SRP)，按照英文直接翻譯「<em>應該且僅有一個原因引起類別的變更</em>」想必大家還是不了解是什麼意思，如果用閃亮亮的話來說，就是<br><br></p>
<blockquote>
<font size="+2">讓一個 class/method 只做一件事</font>

</blockquote>
<p><br><br>也可以說<br><br></p>
<blockquote>
<font size="+2">特定需求改變的時候，只有「一個」相關的 class/method 需要做修改。</font>

</blockquote>
<p><br><br>讓我們直接來看一個例子：</p>
<h4 id="u6848_u4F8B_1_3A"><a href="#u6848_u4F8B_1_3A" class="headerlink" title="案例 1:"></a>案例 1:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">process</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        echo <span class="string">"&lt;h4&gt;訂單處理中...&lt;/h4&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        $recent = $<span class="keyword">this</span>-&gt;getRecentOrderCount($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($recent &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller-&gt;bill($order-&gt;getAccount()-&gt;id, $order-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        $id = DB::table(<span class="string">'orders'</span>)-&gt;insertGetId(array(</span><br><span class="line">            <span class="string">'account'</span>    =&gt; $order-&gt;getAccount()-&gt;id,</span><br><span class="line">            <span class="string">'amount'</span>     =&gt; $order-&gt;getAmount(),</span><br><span class="line">            <span class="string">'created_at'</span> =&gt; Carbon::now()</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> function <span class="title">getRecentOrderCount</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $timestamps = Carbon::now()-&gt;subMinutes(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DB::table(<span class="string">'orders'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'account'</span>, $order-&gt;getAccount()-&gt;id)</span><br><span class="line">            -&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, $timestamps)</span><br><span class="line">            -&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u6848_u4F8B_u7814_u8A0E_uFF1A"><a href="#u6848_u4F8B_u7814_u8A0E_uFF1A" class="headerlink" title="案例研討："></a>案例研討：</h4><ol>
<li>這段例子，如果按照「單一職責原則」來看有什麼問題？會造成什麼影響？ (拜託別回答：因為沒有「<em>一個 class/method 做一件事</em>」)</li>
<li>那要怎麼樣才叫「一件事」？</li>
<li>如何把這「一件事」從 <code>OrderProcessor</code> 中 <code>process</code> 的職責中抽離，卻不影響原本已寫好的 Code？</li>
</ol>
<p><br><br><br><br><br><br>========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ==========<br><br><br></p>
<h4 id="u8077_u8CAC_1_uFF1A_u986F_u793A__u201C_u8A02_u55AE_u8655_u7406_u4E2D__u2026_u201D"><a href="#u8077_u8CAC_1_uFF1A_u986F_u793A__u201C_u8A02_u55AE_u8655_u7406_u4E2D__u2026_u201D" class="headerlink" title="職責 1：顯示 “訂單處理中 …”"></a>職責 1：顯示 “訂單處理中 …”</h4><p>“顯示” 這件事很明顯不是 process 該做的吧，問題是要放到哪呢？</p>
<h4 id="u8077_u8CAC_2_uFF1A_u53D6_u5F97_u6700_u65B0_u8A02_u55AE_u7B46_u6578"><a href="#u8077_u8CAC_2_uFF1A_u53D6_u5F97_u6700_u65B0_u8A02_u55AE_u7B46_u6578" class="headerlink" title="職責 2：取得最新訂單筆數"></a>職責 2：取得最新訂單筆數</h4><p>要使用 account id 來去資料庫撈資料決定最新訂單筆數，明顯不是已經在 <code>process</code> 中該做的。</p>
<h4 id="u8077_u8CAC_3_uFF1A_u5229_u7528_u8A02_u55AE_u7B46_u6578_uFF0C_u5075_u6E2C_u662F_u4E0D_u662F_u91CD_u8907_u7684_u8A02_u55AE"><a href="#u8077_u8CAC_3_uFF1A_u5229_u7528_u8A02_u55AE_u7B46_u6578_uFF0C_u5075_u6E2C_u662F_u4E0D_u662F_u91CD_u8907_u7684_u8A02_u55AE" class="headerlink" title="職責 3：利用訂單筆數，偵測是不是重複的訂單"></a>職責 3：利用訂單筆數，偵測是不是重複的訂單</h4><p>這個閃亮亮覺得有爭議，小系統說真的，是可以放在 <code>OrderProcessor</code> 的類別裡的，但應該抽出一個 method 專門處理 <code>isDuplicateOrder()</code> 這個判斷。至於抽出來的 <code>isDuplicateOrder()</code> 又該放哪呢？</p>
<h4 id="u8077_u8CAC_4_uFF1A_u900F_u904E_biller__u9032_u884C_u7D50_u5E33"><a href="#u8077_u8CAC_4_uFF1A_u900F_u904E_biller__u9032_u884C_u7D50_u5E33" class="headerlink" title="職責 4：透過 biller 進行結帳"></a>職責 4：透過 biller 進行結帳</h4><p>已經交由 biller 處理了，本來就是處理訂單的流程之一。</p>
<h4 id="u8077_u8CAC_5_uFF1A_u7559_u4E0B_u8A02_u55AE_u8A18_u9304"><a href="#u8077_u8CAC_5_uFF1A_u7559_u4E0B_u8A02_u55AE_u8A18_u9304" class="headerlink" title="職責 5：留下訂單記錄"></a>職責 5：留下訂單記錄</h4><p>這個蠻多人應該很容易混淆吧，感覺訂單記錄本來就是處理訂單要做的啊。那閃亮亮換個問法，會不會有不需要 biller 結帳，也不用檢查有沒有重複訂單，但卻要留下訂單記錄的情況？例如：買贈品或免費的商品、例如對已存在的訂單做取消的記錄。</p>
<p><br><br><br><br><br><br><br><br>========= 我是分隔線 ========== 我是分隔線 ========== 我是分隔線 ==========</p>
<h2 id="u9084_u8A18_u5F97_u300C_u4E00_u500B_class__u53EA_u505A_u4E00_u4EF6_u4E8B_u300D_u55CE_uFF1F_u525B_u525B_u6848_u4F8B_u7814_u8A0E_u57CB_u4E86_u4E00_u500B_u96F7"><a href="#u9084_u8A18_u5F97_u300C_u4E00_u500B_class__u53EA_u505A_u4E00_u4EF6_u4E8B_u300D_u55CE_uFF1F_u525B_u525B_u6848_u4F8B_u7814_u8A0E_u57CB_u4E86_u4E00_u500B_u96F7" class="headerlink" title="還記得「一個 class 只做一件事」嗎？剛剛案例研討埋了一個雷"></a>還記得「一個 class 只做一件事」嗎？剛剛案例研討埋了一個雷</h2><p>剛剛的案例研討裡埋了一個雷，講了半天沒有討論到：</p>
<h4 id="u90A3_process__u65B9_u6CD5_u7684_u8077_u8CAC_u662F_u4EC0_u9EBC_u554A_uFF1F"><a href="#u90A3_process__u65B9_u6CD5_u7684_u8077_u8CAC_u662F_u4EC0_u9EBC_u554A_uFF1F" class="headerlink" title="那 process 方法的職責是什麼啊？"></a>那 <code>process</code> 方法的職責是什麼啊？</h4><p>怎麼職責全部分光光了？</p>
<blockquote>
<p><code>OrderProcessor</code> 中 <code>process</code> 的職責在於處理「流程」<br>流程包含：(1) 取得最新訂單筆數、(2) 偵測重複訂單、(3) 進行結帳、(4) 留下訂單記錄，<br>但 (1) 到 (4) 的實作上怎麼進行，則應交給其他的 class/method 來完成。</p>
</blockquote>
<h2 id="u91CD_u69CB_u6642_u9593"><a href="#u91CD_u69CB_u6642_u9593" class="headerlink" title="重構時間"></a>重構時間</h2><ol>
<li>顯示 “訂單處理中 …” 移到 Controller 或其他地方</li>
<li>將 “取得最新訂單筆數” 的實作，移到新建的 <code>OrderRepository</code> 類別，並且 inject 到 <code>OrderProcessor</code> 裡。</li>
<li>將 “偵測重複訂單” 的邏輯新建一個 <code>isDuplicateOrder()</code> 方法在 <code>OrderProcessor</code> 裡</li>
<li>把 “留下訂單記錄” 的職責移到 <code>OrderRepository</code> 的 <code>logOrder</code> 方法中</li>
</ol>
<h4 id="u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u5230_Laradiner__u8B80_u66F8_u6703_28_u898B_u7F6E_u9802_u6587_29__u4F86_u770B_Live_Coding_u3002"><a href="#u904E_u7A0B_u8ACB_u770B_Git_Repo_Here_uFF0C_u6216_u5230_Laradiner__u8B80_u66F8_u6703_28_u898B_u7F6E_u9802_u6587_29__u4F86_u770B_Live_Coding_u3002" class="headerlink" title="過程請看 Git Repo Here，或到 Laradiner 讀書會(見置頂文) 來看 Live Coding。"></a>過程請看 <a href="https://github.com/dj1020/CH8_Single_Responsitory_Principle_Demo" target="_blank" rel="external">Git Repo Here</a>，或到 <a href="https://www.facebook.com/groups/laravel.tw/" target="_blank" rel="external">Laradiner 讀書會(見置頂文)</a> 來看 Live Coding。</h4><h4 id="u91CD_u69CB_u5F8C_u7684_u597D_u8655_uFF0C_u8209_u4F8B"><a href="#u91CD_u69CB_u5F8C_u7684_u597D_u8655_uFF0C_u8209_u4F8B" class="headerlink" title="重構後的好處，舉例"></a>重構後的好處，舉例</h4><ol>
<li>「抓取最新訂單筆數」的邏輯改變成抓 2 分鐘以內，不需動 <code>process</code> 方法</li>
<li>「判斷重複訂單」的邏輯變成不是按照 <code>account id</code> 來判斷，改成依照所有商品品項如果都一樣的話表示重複。</li>
<li>「留下訂單記錄」</li>
</ol>
<h4 id="u91CD_u69CB_u5B8C_u6210_u5982_u4E0B"><a href="#u91CD_u69CB_u5B8C_u6210_u5982_u4E0B" class="headerlink" title="重構完成如下"></a>重構完成如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/MyCart/Processors/OrderProcessor.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $orders;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(BillerInterface $biller, OrderRepository $orders)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller = $biller;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;orders = $orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">process</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>-&gt;isDuplicateOrder($order)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">'Duplicate order likely.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $<span class="keyword">this</span>-&gt;biller-&gt;bill($order-&gt;getAccount()-&gt;id, $order-&gt;getAmount());</span><br><span class="line"></span><br><span class="line">        $id = $<span class="keyword">this</span>-&gt;orders-&gt;logOrder($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> function <span class="title">isDuplicateOrder</span><span class="params">($order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $recent = $<span class="keyword">this</span>-&gt;orders-&gt;getRecentOrderCount($order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $recent &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/MyCart/Repository/OrderRepository.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getRecentOrderCount</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $timestamps = Carbon::now()-&gt;subMinutes(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DB::table(<span class="string">'orders'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'account'</span>, $order-&gt;getAccount()-&gt;id)</span><br><span class="line">            -&gt;where(<span class="string">'created_at'</span>, <span class="string">'&gt;='</span>, $timestamps)</span><br><span class="line">            -&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logOrder</span><span class="params">(Order $order)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $id = DB::table(<span class="string">'orders'</span>)-&gt;insertGetId(array(</span><br><span class="line">            <span class="string">'account'</span>    =&gt; $order-&gt;getAccount()-&gt;id,</span><br><span class="line">            <span class="string">'amount'</span>     =&gt; $order-&gt;getAmount(),</span><br><span class="line">            <span class="string">'created_at'</span> =&gt; Carbon::now()</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>其實如果真的有做好遵循 SRP 的原則的話，你的程式碼的彈性會相對高，Debug 速度也會超快，每個class/method責任很清楚(<del>考試都考100分 噗</del>)，修 bug 不容易動到已有程式。不過，如何去切分 class 的職責其實是一門「藝術」，往往花最多時間的不是寫 Code 而是在取一個適當的類別名字，給予適當的職責，哈哈。只要你時時想著 SRP，不知不覺中很容易就符合下回將介紹的 「Open Close Principle (開放封閉原則)」，敬請期待！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D"><a href="#u6848_u4F8B_1__u524D_u7F6E_u4F5C_u696D" class="headerlink" title="案例 1 前置作業"></a>案]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 讀書會 - Laravel: From Apprentice To Artisan - Ch. 6 Applied Architecture: Decoupling Handlers (解耦合處理程序) 導讀心得整理筆記]]></title>
    <link href="http://blog.dj1020.net/Laravel-From-Apprentice-To-Artisan-Ch-6-Applied-Architecture-Decoupling-Handlers-%E8%A7%A3%E8%80%A6%E5%90%88%E8%99%95%E7%90%86%E7%A8%8B%E5%BA%8F/"/>
    <id>http://blog.dj1020.net/Laravel-From-Apprentice-To-Artisan-Ch-6-Applied-Architecture-Decoupling-Handlers-解耦合處理程序/</id>
    <published>2015-11-27T01:04:23.000Z</published>
    <updated>2016-01-22T07:34:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4ECB_u7D39"><a href="#u4ECB_u7D39" class="headerlink" title="介紹"></a>介紹</h2><h3 id="u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u901F_u8B1B_u89E3_15__u5206_u9418_29"><a href="#u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u901F_u8B1B_u89E3_15__u5206_u9418_29" class="headerlink" title="前置作業 (Demo 帶快速講解 15 分鐘)"></a>前置作業 (Demo 帶快速講解 15 分鐘)</h3><h4 id="Git_Repo__u6309_u6B64"><a href="#Git_Repo__u6309_u6B64" class="headerlink" title="Git Repo 按此"></a><a href="https://github.com/dj1020/Laradiner_Decoupling_Handler" target="_blank" rel="external">Git Repo 按此</a></h4><ol>
<li><code>laravel new ch6_demo</code></li>
<li><code>cd ch6_demo</code></li>
<li><code>php artisan key:generate</code></li>
<li><code>php artisan serve</code> 開一個 web server 測試用</li>
<li>用 CDN 加入 bootstrap css，快速建 form 表單</li>
<li><code>php artisan make:controller SmsController</code></li>
<li>設 routes 測試 controller (新手注意：有雷，CSRF Token)</li>
<li><code>php artisan make:event SendSMSEvent</code> 建立事件</li>
<li><code>php artisan handler:event SendSMS --event SendSMSEvent --queued</code>  建立事件的處理 Handler</li>
<li>在 <code>EventServiceProvider</code> 註冊 event handler (Ref: Registering Events / Listeners)</li>
<li>把 form data 傳入 event 物件，在 handler 中取出</li>
<li>實作 handler (SendSMS class)</li>
<li>設定 .env 檔並建立資料庫 <code>ch6_demo</code> (demo/secret)</li>
<li><code>php artisan migrate</code> (建立 User Table)</li>
<li><code>php artisan make:seeder UsersSeeder</code> 建立 seeder 用來存假 User 資料，並編輯 <code>DatabaseSeeder.php</code></li>
<li><code>php artisan db:seed</code>  (或 php artisan migrate –seed)，記得重啟 <code>php artisan serve</code></li>
<li><code>php artisan migrate:refresh --seed</code> 重建資料庫及匯入假 User 資料</li>
<li><code>php artisan make:model Messages --migration</code> 建 messages table 和 model class</li>
<li>清空資料庫，重新 <code>php artisan migrate --seed</code>，記得重啟 php artisan serve</li>
<li>建立 user 和 messages 兩表之間的 relation  (Ref: One to Many Relation)</li>
</ol>
<h2 id="u89E3_u8026_u5408_handler"><a href="#u89E3_u8026_u5408_handler" class="headerlink" title="解耦合 handler"></a>解耦合 handler</h2><p>這裡書中使用一段 Code 來解釋「<strong>解耦合 handler</strong>」的概念，其實講的就是 SOLID 中的<strong>「Single Responsibility Principle」單一職責原則</strong>。它給了一個傳簡訊(SMS)序列(Queue)的例子，用的版本是 Laravel 4 ，<strong>下面這段 Code 已經被我用 Laravel 5.1 的 Event 機制改寫過和原書中稍有不同</strong>，大意是當有要傳送簡訊的 event 被送進 Queue 裡，按 Queue 的機制，會呼叫對應的 handler 來處理這個 event，所謂的 handler 就是指 <code>SendSMS</code> 這個類別，Queue 會讓 handler 類別中的 handle 方法被觸發。</p>
<p>handler 透過實例化 <code>Mitake_SMS</code> 這個類別，使用 <code>sendTextMessage</code> 方法呼叫第三方的 API 完成傳送線上簡訊(SMS)。在發出簡訊後，把送出的簡訊用 Eloquent 物件存進本地的資料庫中做為 log 紀錄起來，且和 User 進行關聯，這樣如有需要我們就可以查詢所有這個 User 送出過的簡訊歷史紀錄。原書中存進資料庫的是「傳給該 User 的簡訊」，為了講解方便我這邊用的例子是存「該 User 送出過的簡訊」，我有對原始碼稍做修改，講起來比較順也比較容易和實務對應做理解，之後會以這段 Code 為實例 demo 怎樣解耦合，後續實例也都以此為基礎。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendSMS</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    use InteractsWithQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">handle</span><span class="params">(SendSMSEvent $event)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $data = $event-&gt;getData();</span><br><span class="line">        $mitake = <span class="keyword">new</span> Mitake_SMS($<span class="keyword">this</span>-&gt;apiKey);</span><br><span class="line">        $mitake-&gt;sendTextMessage([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        $user = \App\User::find($data[<span class="string">'user'</span>][<span class="string">'id'</span>]);</span><br><span class="line">        $user-&gt;messages()-&gt;create([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5728_u9019_u6BB5_Code__u7684_u4F8B_u5B50_u4E2D_uFF0C_u4F60_u6709_u6C92_u6709_u770B_u51FA_u4F86_u4EC0_u9EBC_u554F_u984C_uFF1F_282__u5206_u9418_29"><a href="#u5728_u9019_u6BB5_Code__u7684_u4F8B_u5B50_u4E2D_uFF0C_u4F60_u6709_u6C92_u6709_u770B_u51FA_u4F86_u4EC0_u9EBC_u554F_u984C_uFF1F_282__u5206_u9418_29" class="headerlink" title="在這段 Code 的例子中，你有沒有看出來什麼問題？(2 分鐘)"></a>在這段 Code 的例子中，你有沒有看出來什麼問題？(2 分鐘)</h4><p>可往 <strong>可維護性(Maintainability)、可擴充性(Scalability)、可測試性(Testability)、重用性(Reusability)</strong> … 來想</p>
<p>[閃亮亮PS] : 如果你對這段 Code 的實作細節有興趣，你可以從下面連結瞭解 Laravel 的 Eloquent 和 Event Handler 的用法：</p>
<ol>
<li><a href="https://laravel.com/docs/5.1/eloquent#retrieving-single-models" target="_blank" rel="external">Retrieving Single Models / Aggregates</a></li>
<li><a href="http://laravel.com/docs/5.1/eloquent-relationships#one-to-many" target="_blank" rel="external">One To Many Relation</a></li>
<li><a href="http://laravel.com/docs/5.1/eloquent-relationships#inserting-related-models" target="_blank" rel="external">Inserting Related Models (示例在第三小點：The Create Method)</a></li>
<li><a href="http://laravel.com/docs/5.0/events#basic-usage" target="_blank" rel="external">Laravel Events (建議完整看完，沒有很長)</a></li>
</ol>
<p><br><br><br><br><br></p>
<h2 id="u554F_u984C_u8207_u6311_u6230"><a href="#u554F_u984C_u8207_u6311_u6230" class="headerlink" title="問題與挑戰"></a>問題與挑戰</h2><h3 id="u9019_u6BB5_Code__u7684_u554F_u984C_u5728_u65BC_uFF1A"><a href="#u9019_u6BB5_Code__u7684_u554F_u984C_u5728_u65BC_uFF1A" class="headerlink" title="這段 Code 的問題在於："></a>這段 Code 的問題在於：</h3><ol>
<li>這一段 Code 很難被「自動化地」測試，因為在 handle 方法中直接實例化 <code>Mitake_SMS</code> 這個類別，我們無法利用依賴注入 (DI) 的方式，注入一個 Mock 物件來進行測試。</li>
<li>handle 方法裡直接使用 \App\User (Eloquent 物件) 導致另一個測試的問題，我們無法在不觸及資料庫的情況下對 handle 方法進行單元測試。</li>
<li>還有，因為傳送簡訊的主要邏輯寫在 handle 方法裡，我們要傳簡訊變成一定要經過 Queue 的機制才能傳送，使得傳簡訊邏輯和 Queue 緊密耦合。換種說法，就是我們沒辦法不用 Queue 來傳簡訊。</li>
</ol>
<p><br></p>
<h3 id="u9019_u4E9B_u554F_u984C_uFF0C_u5E36_u4F86_u4E86_u5E7E_u500B_u6311_u6230_uFF1A"><a href="#u9019_u4E9B_u554F_u984C_uFF0C_u5E36_u4F86_u4E86_u5E7E_u500B_u6311_u6230_uFF1A" class="headerlink" title="這些問題，帶來了幾個挑戰："></a>這些問題，帶來了幾個挑戰：</h3><ul>
<li><strong>挑戰 1</strong>：有沒有什麼寫法是可以換簡訊平台卻不需要修改已經寫好的 Production Code？</li>
<li><strong>挑戰 2</strong>：在修改最少的情況下，讓這個 Mitake_SMS 類別可以被 Mock 取代，進而測試 handle 方法</li>
<li><strong>挑戰 3</strong>：如何在不觸及資料庫操作的前提下，寫測試驗證 handle 方法內的處理邏輯？</li>
<li><strong>挑戰 4</strong>：如果我不想使用 Event 系統來發簡訊的話怎麼辦？</li>
</ul>
<p><br></p>
<p>[閃亮亮PS] : 解法請來 Laradiner 看 Live Demo 或 GitHub Repo HERE，重構的過程比較重要，會一個一個挑戰完成，而不是一次完成四個。書中只示範了最終結果，而且省略了相關的一些 Controller 或是 Event 的原始碼，如果對 Laravel 不熟的朋友會比較難體會。</p>
<p><strong>Demo (30 分鐘)</strong></p>
<h2 id="u89E3_u8026_u5408_u4E4B_u5F8C"><a href="#u89E3_u8026_u5408_u4E4B_u5F8C" class="headerlink" title="解耦合之後"></a>解耦合之後</h2><p>以下是達成挑戰 1,2,3,4 之後，解耦合完成的結果。主要轉變是把 <strong>“傳簡訊”</strong> 這個行為交給了 User Model <strong>不再直接透過 handler</strong> 執行，這樣就可以不用 Queue 也能傳簡訊。簡訊平台物件 courier 也不再直接實例化，改以參數傳入，也就是所謂的 Dependency Injection 依賴注入(俗稱 DI)，達成解耦合。courier 因為是以參數傳入，不會綁死在 <code>Mitake_SMS</code> 這個類別上，方便切換簡訊平台，也方便測試時使用 Mock 物件替換 courier。但為了確認傳入的 courier 一定擁有並實作 <code>sendTextMessage</code> 這個方法，所以在參數列裡使用 type hinting 強制傳入的 courier 物件一定要實作 <code>SmsCourierInterface</code> 這個介面，介面中則定義一定要實作 <code>sendTextMessage</code> 方法。改寫過後，handler 的職責只剩一個：<strong>給 user 物件足夠資訊，叫 user 傳簡訊</strong>。也就是書中所指的 <strong>Translation Layer 唯一應該做的事情</strong>！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendSMS</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    use InteractsWithQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $users;</span><br><span class="line">    <span class="keyword">private</span> $courier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(UserRepository $repo, SmsCourierInterface $courier)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;users = $repo;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;courier = $courier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">handle</span><span class="params">(SendSMSEvent $event)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        $data = $event-&gt;getData();</span><br><span class="line"></span><br><span class="line">        $user = $<span class="keyword">this</span>-&gt;users-&gt;find($data[<span class="string">'user'</span>][<span class="string">'id'</span>]);</span><br><span class="line"></span><br><span class="line">        $user-&gt;sendSms($<span class="keyword">this</span>-&gt;courier, $data[<span class="string">'message'</span>], $data[<span class="string">'phone'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊是測試程式碼</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">it_should_send_sms_message</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        $data = [</span><br><span class="line">            <span class="string">'user'</span>    =&gt; [<span class="string">'id'</span> =&gt; <span class="number">1</span>],</span><br><span class="line">            <span class="string">'phone'</span>   =&gt; <span class="string">'12345678'</span>,</span><br><span class="line">            <span class="string">'message'</span> =&gt; <span class="string">'test message here...'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $user = Mockery::mock(<span class="string">'\App\User[sms]'</span>); <span class="comment">// partial mock</span></span><br><span class="line">        $relation = Mockery::mock(<span class="string">'stdClass'</span>);</span><br><span class="line">        $courier = Mockery::mock(SmsCourierInterface::<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        $user-&gt;shouldReceive(<span class="string">'sms'</span>)-&gt;once()-&gt;andReturn($relation);</span><br><span class="line">        $relation-&gt;shouldReceive(<span class="string">'create'</span>)-&gt;once()-&gt;with([</span><br><span class="line">            <span class="string">'to'</span> =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>],</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        $courier-&gt;shouldReceive(<span class="string">'sendTextMessage'</span>)-&gt;once()-&gt;with([</span><br><span class="line">            <span class="string">'to'</span>      =&gt; $data[<span class="string">'phone'</span>],</span><br><span class="line">            <span class="string">'message'</span> =&gt; $data[<span class="string">'message'</span>]</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Act &amp; Assert</span></span><br><span class="line">        $user-&gt;sendSms($courier, $data[<span class="string">'message'</span>], $data[<span class="string">'phone'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u5176_u4ED6_Handlers"><a href="#u5176_u4ED6_Handlers" class="headerlink" title="其他 Handlers"></a>其他 Handlers</h2><p>這裡提的另一個例子比較單純，總而言之就是教你如何讓你的 handler 只做單純的 Translation Layer，把一些複雜的商業邏輯隔離在 Framework 的架構之外。想想看，這段 Code 又出了什麼問題？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router::filter(<span class="string">'premium'</span>, function() &#123;</span><br><span class="line">   <span class="keyword">return</span> Auth::user() &amp;&amp; Auth::user()-&gt;plan == <span class="string">'premium'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>[閃亮亮PS] : Laravel 5.1 中使用 middleware 來取代 filter ，所以這一段 return 的邏輯應該會出現是出現在某個 middleware 中。</p>
<p>你看！這麼簡短的 Code，看起來多麼無辜啊！怎麼可能會有什麼問題呢？</p>
<p>然而，雖然這是一段很小的 filter 程式碼，但它已經洩露太多<del>國家機密(誤)</del> 程式細節，好比，filter 居然知道 Auth 回傳的 user 物件中有一個叫 “plan” 的屬性，還知道，如果 “plan” 屬性等於 “premium” 表示可以擁有 premium 資格。<strong>這會埋下什麼地雷？</strong></p>
<ol>
<li><strong>屬性名稱改了沒改到 filter</strong>。如果 plan 屬性被某人在 User 物件中改名成 privilege (也許是因為資料庫欄位改名稱了)，卻沒注意到 filter 中也有用到 plan 這個屬性…</li>
<li><strong>屬性值改了沒改到 filter</strong>。如果以後屬性要等於 “VIP” 而不是 “premium” 的話…</li>
<li><strong>要改判斷 premium 資格的邏輯 filter 就得跟著改</strong>。例如，要擁有 ‘premium’ 資格還必需年消費總額到10萬元以上才行。</li>
</ol>
<p>Sure，你當然可以說，那只要小心一點，記得改就好了。但如果有別人埋這個雷給你踩，在你花了數小時 debug 之後不氣死才怪！</p>
<p>好，怎麼改？看這樣有沒有好一點：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router::filter(<span class="string">'premium'</span>, function() &#123;</span><br><span class="line">    <span class="keyword">return</span> Auth::user() &amp;&amp; Auth::user()-&gt;isPremium();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>多一個小小的 function 不會耗你多少效能啦，但上面3個問題都可以解決，且更有彈性了。就算修改 permium 資格的邏輯也完全不用動到原本寫好的 filter。已所不雷，勿施於人。</p>
<h2 id="u9583_u4EAE_u4EAE_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5C0F_u7D50" class="headerlink" title="閃亮亮小結"></a>閃亮亮小結</h2><p>我覺得書中這個例子裡，把 sendSms 的職責交給 User Model 還蠻合理的，User 可以 sendSms 唸起來就很順。但還是要小心，很容易就會讓 User Model 胖到爆掉，如果可以的話我自己是儘可能不放 User Model 就不放。另外建一個 Class，把傳簡訊的動作變成另一個 Service。也許，不是 User 也可以傳簡訊啊，例如如果簡訊是由系統自動送出的話，這樣不就沒有辦法關聯 User 了？</p>
<p>嗯，這次讀書會要 demo 前才發現 Laravel 5.1 有分 Event 和 Job ，兩個都有 Queue 的機制。還沒時間去研究差別和用途，期待讀書會朋友們的分享！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4ECB_u7D39"><a href="#u4ECB_u7D39" class="headerlink" title="介紹"></a>介紹</h2><h3 id="u524D_u7F6E_u4F5C_u696D__28Demo__u5E36_u5FEB_u9]]>
    </summary>
    
      <category term="Laradiner讀書會" scheme="http://blog.dj1020.net/tags/Laradiner%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    
      <category term="程式學習" scheme="http://blog.dj1020.net/tags/%E7%A8%8B%E5%BC%8F%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #21 - 從 C 語言到 PHP Extension (C9s)]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89Day-21-%E5%BE%9EC%E8%AA%9E%E8%A8%80%E5%88%B0PHP_Extension-Ricky-Su/"/>
    <id>http://blog.dj1020.net/PHP也有Day-21-從C語言到PHP_Extension-Ricky-Su/</id>
    <published>2015-11-19T11:30:34.000Z</published>
    <updated>2015-11-20T01:01:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Why_Writing_PHP_Extension"><a href="#Why_Writing_PHP_Extension" class="headerlink" title="Why Writing PHP Extension"></a>Why Writing PHP Extension</h2><ul>
<li>Reduce Request Overhead</li>
<li>Faster</li>
<li>Low Memory</li>
<li>External Library Integration</li>
<li>Energy Saving</li>
<li>High Performance</li>
</ul>
<h2 id="PHP_Runtime_Workflow"><a href="#PHP_Runtime_Workflow" class="headerlink" title="PHP Runtime Workflow"></a>PHP Runtime Workflow</h2><h2 id="PHP_OP_Code_vs_Function_Call"><a href="#PHP_OP_Code_vs_Function_Call" class="headerlink" title="PHP OP Code vs Function Call"></a>PHP OP Code vs Function Call</h2><ul>
<li>找 Explain 套件可以把 PHP 變成 OP Code 做 trace</li>
<li>opcodes faster</li>
<li>function call 是由 op code 組成</li>
<li>pure php function call is more slower</li>
<li>function call involves hash table lookup</li>
</ul>
<h2 id="C_Basics"><a href="#C_Basics" class="headerlink" title="C Basics"></a>C Basics</h2><ul>
<li>Hello World in C</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ gcc -o hello hello.c</span><br><span class="line">$ ./hello</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">$ gcc -O2 -Wall -o hello hello.c <span class="comment">// -O2 優化</span></span><br></pre></td></tr></table></figure>
<ul>
<li>小心 class 是沒有 null terminate string “0x00”</li>
<li>function 或是進 hash table 的話是有 “0x00” 的</li>
</ul>
<h2 id="Pointer_in_C"><a href="#Pointer_in_C" class="headerlink" title="Pointer in C"></a>Pointer in C</h2><ul>
<li>全員逃走中</li>
<li><code>char *p;</code> 字元指標，存一個記憶體位置</li>
<li><code>char **p;</code> 字元指標的指標，存一個指標的記憶體位置</li>
</ul>
<p>通常會用 prefix 區分 function name</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span>  contact &#123;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> name_len;</span><br><span class="line">    <span class="keyword">char</span> *phone_no;</span><br><span class="line">    <span class="keyword">int</span> phone_no_len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> contact <span class="keyword">contact_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">contact_t</span> aContact;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PHP_Extension"><a href="#PHP_Extension" class="headerlink" title="PHP Extension"></a>PHP Extension</h2><ul>
<li>ONLY 3 files to start<ul>
<li>config.m4 (設定檔)</li>
<li>php_foo.c</li>
<li>php_foo.h</li>
</ul>
</li>
</ul>
<h3 id="php_foo-h"><a href="#php_foo-h" class="headerlink" title="php_foo.h"></a>php_foo.h</h3><ul>
<li>config.h</li>
<li>TSRM declaration</li>
<li>extern zend_module_entry</li>
<li>php function prototypes</li>
</ul>
<h3 id="php_foo-c"><a href="#php_foo-c" class="headerlink" title="php_foo.c"></a>php_foo.c</h3><ul>
<li>Module export for dynamic loading:<ul>
<li>ZEND_GET_MODULE(foo)</li>
</ul>
</li>
<li>zend_function_entry</li>
<li>zend_module_entry foo_module_entry</li>
<li>php functions</li>
</ul>
<h3 id="skeleton"><a href="#skeleton" class="headerlink" title="skeleton"></a>skeleton</h3><ul>
<li><a href="http://github.com/c9s/php-ext-skeleton.git" target="_blank" rel="external">http://github.com/c9s/php-ext-skeleton.git</a></li>
</ul>
<h3 id="Build_21"><a href="#Build_21" class="headerlink" title="Build!"></a>Build!</h3><ul>
<li><code>$ phpsize</code></li>
<li><code>$ ./configure --enable-foo</code></li>
<li><code>$ make</code></li>
<li><code>$ make install</code></li>
</ul>
<h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><ul>
<li><code>$ make clean</code></li>
<li><code>$ phpsize --clean</code></li>
</ul>
<p>###</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Why_Writing_PHP_Extension"><a href="#Why_Writing_PHP_Extension" class="headerlink" title="Why Writing PHP Extension"></a>Why Writing]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How To Update Xdebug for MAMP]]></title>
    <link href="http://blog.dj1020.net/How-To-Update-Xdebug-for-MAMP/"/>
    <id>http://blog.dj1020.net/How-To-Update-Xdebug-for-MAMP/</id>
    <published>2015-11-16T07:19:42.000Z</published>
    <updated>2015-11-16T07:30:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6B65_u9A5F"><a href="#u6B65_u9A5F" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>Download php5.5.22 (版本自己調整一下) from <a href="http://php.net/downloads.php" target="_blank" rel="external">PHP official site</a></li>
<li><code>mkdir -vp /Applications/MAMP/bin/php/php5.5.22/include</code></li>
<li><code>tar zxvf php-5.5.22.tar.gz -C /Applications/MAMP/bin/php/php5.5.22/include</code></li>
<li><code>mv /Applications/MAMP/bin/php/php5.5.22/include/php-5.5.22 /Applications/MAMP/bin/php/php5.5.22/include/php</code> (to fix phpize not found php.h)</li>
<li><code>cd /Applications/MAMP/bin/php/php5.5.22/include/php</code></li>
<li><code>./configure --without-iconv</code> (to fix /Applications/MAMP/bin/php/php5.5.22/include/php/Zend/zend.h:51:11: fatal error: ‘zend_config.h’ file not found)</li>
<li>Download xdebug 2.3.3 (版本自行調整，需對應 PHP 的版本！) frmo <a href="http://xdebug.org/download.php" target="_blank" rel="external">Xdebug Site</a></li>
<li><code>tar zxvf xdebug-2.3.3.tgz</code></li>
<li><code>cd xdebug-2.3.3</code></li>
<li><p><code>phpize</code> 要看到這樣才對：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP Api Version:         <span class="number">20121113</span></span><br><span class="line">Zend Module Api No:      <span class="number">20121212</span></span><br><span class="line">Zend Extension Api No:   <span class="number">220121212</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>./configure</code></p>
</li>
<li><code>make</code></li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>這個還蠻完整的：<a href="http://blog.csdn.net/21aspnet/article/details/47756651" target="_blank" rel="external">NetBeans配置Xdebug 遠程調試PHP - 計算機科學與技術 - 博客頻道 - CSDN.NET</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6B65_u9A5F"><a href="#u6B65_u9A5F" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>Download php5.5.22 (版本自己調整一下) from <a href="ht]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laradiner 11-12 線上聊天室、鴻森Live Demo、BoBo]]></title>
    <link href="http://blog.dj1020.net/Laradiner_2015-11-12_Ricky_BoBo_Sam/"/>
    <id>http://blog.dj1020.net/Laradiner_2015-11-12_Ricky_BoBo_Sam/</id>
    <published>2015-11-12T11:55:34.000Z</published>
    <updated>2015-11-12T13:53:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su"><a href="#Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su" class="headerlink" title="Socket.io 線上聊天室 by Ricky Su"></a>Socket.io 線上聊天室 by Ricky Su</h2><ul>
<li>zeromq</li>
<li>rabbitmq</li>
<li><a href="https://github.com/RickySu/chat-demo" target="_blank" rel="external">https://github.com/RickySu/chat-demo</a><ul>
<li>要裝 event (php extension)</li>
</ul>
</li>
</ul>
<h2 id="Interface_As_Contract__u4ECB_u9762_u5408_u7D04_by_BoBo"><a href="#Interface_As_Contract__u4ECB_u9762_u5408_u7D04_by_BoBo" class="headerlink" title="Interface As Contract 介面合約 by BoBo"></a>Interface As Contract 介面合約 by BoBo</h2><h2 id="Service_Provider_-_Sam"><a href="#Service_Provider_-_Sam" class="headerlink" title="Service Provider - Sam"></a>Service Provider - Sam</h2><ul>
<li>public function provides() -&gt; 對應 Facade return 的字串</li>
</ul>
<h2 id="Write_a_package_via_composer_and_upload_to_packgist"><a href="#Write_a_package_via_composer_and_upload_to_packgist" class="headerlink" title="Write a package via composer and upload to packgist"></a>Write a package via composer and upload to packgist</h2><ul>
<li>composer init</li>
<li>autoload -&gt; psr-4</li>
<li>service provider</li>
<li>controller</li>
<li>views folder</li>
<li>in boot():<ul>
<li>App::make controller</li>
<li>$this-&gt;loadViewsFrom(path, custom_prefix) // 或叫 namespace</li>
<li>$this-&gt;loadViewsFrom(path, ‘MyName’) // 或叫 namespace</li>
<li>reutrn views(‘MyName::welcome’);</li>
</ul>
</li>
<li>composer.json<ul>
<li>“repositories” : { “type” : “vcs”, “url”:”git url”, “type” : “path”, “url” : “../myPackage” }</li>
<li>可用私有 repo</li>
</ul>
</li>
<li>Satis (架 packagist) -&gt; 會 cache zip</li>
<li>Toran Proxy</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su"><a href="#Socket-io__u7DDA_u4E0A_u804A_u5929_u5BA4_by_Ricky_Su" class="headerl]]>
    </summary>
    
      <category term="Laradiner" scheme="http://blog.dj1020.net/tags/Laradiner/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[真。淺談 RESTful API by Triton Ho]]></title>
    <link href="http://blog.dj1020.net/%E7%9C%9F%E3%80%82%E6%B7%BA%E8%AB%87_RESTful_API_by_Triton_Ho/"/>
    <id>http://blog.dj1020.net/真。淺談_RESTful_API_by_Triton_Ho/</id>
    <published>2015-11-09T11:00:34.000Z</published>
    <updated>2016-03-07T13:45:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6DFA_u8AC7_HTTP"><a href="#u6DFA_u8AC7_HTTP" class="headerlink" title="淺談 HTTP"></a>淺談 HTTP</h2><ul>
<li><p>HTTP 是通訊協定！</p>
<ul>
<li>RESTful 後端</li>
<li>SOAP</li>
<li>REST 介面的資料庫</li>
</ul>
</li>
<li><p>HTTP 理念：( resource ) + ( method )</p>
<ul>
<li>stateless</li>
</ul>
</li>
<li><p>動名詞(Gerunds)也算是名詞的一種, ex: /MoneyTransfers</p>
<ul>
<li>(POST) Create a “MoneyTransfers” object, 內容是把錢從 A 轉到 B</li>
</ul>
</li>
<li><p>HTML 通常只用上 GET / POST，但其實 HTTP 裡還有除了這兩個以外很多 method 可用。</p>
</li>
<li><p>一些資源可能只支持部份 method，例如， /img/image1.jpg 應該只有 GET 可用。</p>
</li>
<li><p>建議不要用 GET 做為建立物件的方法，如不使用約定俗成的後果自負。</p>
</li>
</ul>
<h3 id="GET_method"><a href="#GET_method" class="headerlink" title="GET method"></a>GET method</h3><ul>
<li>READONLY 的，讀取資源</li>
<li><code>重要！ 應該只有 GET 才使用 Query String</code></li>
<li>以物件 id 結尾，一般是指讀取單一物件<ul>
<li>ex: /v1/users/9527</li>
</ul>
</li>
<li>如果沒有 id 結尾，則是讀取該物件的 Collection<ul>
<li>ex: /v1/users 取得所有 user</li>
<li>ex: <code>/v1/users?AgeMax=20 利用 Query String 做 filter</code></li>
</ul>
</li>
</ul>
<h3 id="DELETE_method"><a href="#DELETE_method" class="headerlink" title="DELETE method"></a>DELETE method</h3><h3 id="POST_method"><a href="#POST_method" class="headerlink" title="POST method"></a>POST method</h3><ul>
<li>一般會把資源的 id 回給 caller</li>
<li>如果在不穩定的網路下，用戶建立資源時，卻發出兩次POST，怎麼辦？<ul>
<li>雖然 HTTP 原始定義是 non-idempotent ，但是他沒禁止你自行解決 idempotent 問題。</li>
<li>idempotent 簡單說，就是<code>後端應該要處理重複 request 的問題。</code></li>
<li>後面會講怎麼做 idempotent</li>
</ul>
</li>
</ul>
<h3 id="PATCH_method"><a href="#PATCH_method" class="headerlink" title="PATCH method"></a>PATCH method</h3><ul>
<li>改動資源的部份內容</li>
<li>是否 idempotent 是看你怎麼做處理<ul>
<li>SET age = 31  -&gt; it’s idempotent，不管做幾次結果都一樣</li>
<li>SET age = age + 1 -&gt; it’s NOT idempotent</li>
</ul>
</li>
</ul>
<h3 id="PUT_method"><a href="#PUT_method" class="headerlink" title="PUT method"></a>PUT method</h3><ul>
<li>原本應該是上傳的內容會完全蓋掉原本的資源內容，如果資源不存在則 create</li>
<li>但後來很多人，用 PUT 取代 PATCH，來做部份資源的改動。</li>
</ul>
<h3 id="OPTIONS_method"><a href="#OPTIONS_method" class="headerlink" title="OPTIONS method"></a>OPTIONS method</h3><ul>
<li>在 cross domain request 時，用戶會先發出 options</li>
<li>用來查詢</li>
</ul>
<h3 id="u5E38_u7528_u7684_HTTP_Response_Code"><a href="#u5E38_u7528_u7684_HTTP_Response_Code" class="headerlink" title="常用的 HTTP Response Code"></a>常用的 HTTP Response Code</h3><h5 id="200__28OK_29"><a href="#200__28OK_29" class="headerlink" title="200 (OK)"></a>200 (OK)</h5><h5 id="204__28No_Content_29"><a href="#204__28No_Content_29" class="headerlink" title="204 (No Content)"></a>204 (No Content)</h5><pre><code>- 跟 200 相似，但沒有結果回傳
- 一般來說，DELETE 和 PUT 常用
</code></pre><h5 id="202__28Accepted_29"><a href="#202__28Accepted_29" class="headerlink" title="202 (Accepted)"></a>202 (Accepted)</h5><pre><code>- 伺服器收到 request ，並且確定請求沒問題。
- 不過，這個請求需要執行很長的時間，所以為了避免客戶等待。即使工作還沒完成也好，先回等客戶端：「工作收到了」
- ~~沒事別亂用~~ 很麻煩！ 應該用 Server Push 的方式來處理 async request。
</code></pre><h5 id="304__28Not_Modified_29"><a href="#304__28Not_Modified_29" class="headerlink" title="304 (Not Modified)"></a>304 (Not Modified)</h5><pre><code>- 如果客戶 request 重複的資源，通常會 Cache 起來，如果客戶端版本是最新的，就回 304。否則回 200。
</code></pre><h5 id="400__28Bad_Request_29"><a href="#400__28Bad_Request_29" class="headerlink" title="400 (Bad Request)"></a>400 (Bad Request)</h5><pre><code>- 請求的內容有誤，拒絕執行
- Ex: set age = abc123 (age 應為 integer)
</code></pre><h5 id="401__28Unauthorized_29"><a href="#401__28Unauthorized_29" class="headerlink" title="401 (Unauthorized)"></a>401 (Unauthorized)</h5><pre><code>- 還沒 login
- 如果把 authorization 放進 http body，會被放進 error log，會被看到！
</code></pre><h5 id="403__28Forbidden_29"><a href="#403__28Forbidden_29" class="headerlink" title="403 (Forbidden)"></a>403 (Forbidden)</h5><pre><code>- 跟 400 不同，伺服器明白請求的內容
- 不過，請求內容與商業邏輯矛盾，伺服器拒絕執行
- ex: 建立一個 乳牛 物件，但 { favoriteFood = 仙人掌 }
</code></pre><h5 id="404__28Not_Found_29"><a href="#404__28Not_Found_29" class="headerlink" title="404 (Not Found)"></a>404 (Not Found)</h5><pre><code>- 請求的資源不存在
- 註：有些系統，即使資源存在，而 method 不對，也會返回 404
- 註：如果 GET collection 而沒搜查到滿足條件的資源，是應該返回 200 不是 404。
</code></pre><h5 id="409__28Conflict_29"><a href="#409__28Conflict_29" class="headerlink" title="409 (Conflict)"></a>409 (Conflict)</h5><pre><code>- 一般是說，表示用戶正在改動的這個物件，已經被人先改動過了。
- 通常表示要重送最新的 request
</code></pre><h5 id="500__28Internal_Server_Error_29"><a href="#500__28Internal_Server_Error_29" class="headerlink" title="500 (Internal Server Error)"></a>500 (Internal Server Error)</h5><h5 id="502__28Bad_Gateway_29"><a href="#502__28Bad_Gateway_29" class="headerlink" title="502 (Bad Gateway)"></a>502 (Bad Gateway)</h5><pre><code>- 一般是說，表示用戶正在改動的這個物件，已經被人先改動過了。
</code></pre><h5 id="503__28Service_Unavailable_29"><a href="#503__28Service_Unavailable_29" class="headerlink" title="503 (Service Unavailable)"></a>503 (Service Unavailable)</h5><pre><code>- 伺服器沒當掉，只是太多人在使用，所以暫時無法提供服務。
</code></pre><h2 id="u70BA_u4EC0_u9EBC_u8981_u91CD_u8996_API__u8A2D_u8A08"><a href="#u70BA_u4EC0_u9EBC_u8981_u91CD_u8996_API__u8A2D_u8A08" class="headerlink" title="為什麼要重視 API 設計"></a>為什麼要重視 API 設計</h2><ul>
<li><p>改動 API 需要同時改動”前端”和”後端”，現實上會有極大困難</p>
<ul>
<li>所以 url 裡要放 /v1/users，要放版本</li>
</ul>
</li>
<li><p>錯誤的 API 設計，可以引起：</p>
<ul>
<li>嚴重的效能問題</li>
<li>扭曲了的程式邏輯，和扭曲了的數據結構</li>
<li>數據錯誤</li>
<li><del>整天在公司加班，結果女朋友跑掉</del></li>
</ul>
</li>
</ul>
<h4 id="API__u8A2D_u8A08_u91CD_u9EDE"><a href="#API__u8A2D_u8A08_u91CD_u9EDE" class="headerlink" title="API 設計重點"></a>API 設計重點</h4><pre><code>* 統一介面 ( uniform interface ) 是相對上最死不了人的，別為這吵架太久
* 例如，這兩種流派都有人支持
    - /v1/pets/1234
    - /v1/users/9527/pets/1234
* 好的 API 永不限制前端的設計，即使要輕度違反 uniform interface 原則，但一切應該以 User Experence 為最優先。
    - 例：在頁面中，應該可以同時建立 User 和該 User 的 Pets，而不需要呼叫兩次 API。所以需要建立特殊的 UserAndPet POST
</code></pre><h2 id="u50B3_u7D71_u7DB2_u9801_u7684_Render__u6D41_u7A0B"><a href="#u50B3_u7D71_u7DB2_u9801_u7684_Render__u6D41_u7A0B" class="headerlink" title="傳統網頁的 Render 流程"></a>傳統網頁的 Render 流程</h2><p>傳統網頁把 Data 和 View 在 Server binding 後把 result page 回給客戶端</p>
<p>(缺圖)</p>
<pre><code>- 把 Data 和 Presentation 混合，反而讓 html 無法被 Cache 起來，致效能下降！(To 小黑)
- 無法分割 Presentation, Business Logic 和 Data，影響開發、測試、除錯的作業！
- 伺服器負責將 Data 和 Presentation 整合(簡稱 Data Binding)，消耗伺服器的 CPU 資源，需要更好的 Server side machine
</code></pre><h2 id="u4F7F_u7528_Async_Request__u7684_u597D_u8655"><a href="#u4F7F_u7528_Async_Request__u7684_u597D_u8655" class="headerlink" title="使用 Async Request 的好處"></a>使用 Async Request 的好處</h2><p>一個 request 變兩個 request，先回傳 Presentation 和 scripts，之後透過 script 向 server 要 data，伺服器回傳 json/xml 後再 render 畫面出來</p>
<p>(缺圖)</p>
<pre><code>- Presentation 和 script 如果沒改動，都會是 304 Cache 起來的。
- 表面上增加為兩次 request，實際上因為 304 (Not Modified)，會省下更多網路流量，也很省錢$$$$！
- Presentation 和 Data 徹底分離，可以使用專門的 mock API 伺服器。
- 只要定好 Spec ，可以讓前、後端分別專心開發。
- 容易將執行架構改為 Presentation 在 Apache / CDN, API 在 Tomcat。(區分靜態內容和動態資料)
- 節省伺服器資源，可以不放伺服器的就不要放在伺服器。
- Data Binding 現在在 Client side 的瀏覽器做，省 Server CPU
- 未來可以支持 iOS 和 Android， API 都可以重複使用，不用重複開發相同的商業邏輯。酷！
</code></pre><h2 id="RESTful_API__u8A2D_u8A08"><a href="#RESTful_API__u8A2D_u8A08" class="headerlink" title="RESTful API 設計"></a>RESTful API 設計</h2><ul>
<li>RESTful是一種設計哲學，不是一定要用 HTTP 的方式來實現，常見例如加入 action 在 POST 裡</li>
</ul>
<h2 id="RESTful__u7684_u8B2C_u8AA4"><a href="#RESTful__u7684_u8B2C_u8AA4" class="headerlink" title="RESTful 的謬誤"></a>RESTful 的謬誤</h2><ul>
<li><p>server side 需要 stateless</p>
<ul>
<li>解1: 不需要 server side stateless</li>
<li>解2: 只要求 Application Server 是 stateless，Server Side 其他部份是可以 stateful 的</li>
</ul>
</li>
<li><p>一定需要用上 GET, PUT/PATCH, POST, DELETE</p>
<ul>
<li>解: 可以使用其他技術實作統一介面</li>
</ul>
</li>
</ul>
<h2 id="RESTful__u7684_u8981_u6C42"><a href="#RESTful__u7684_u8981_u6C42" class="headerlink" title="RESTful 的要求"></a>RESTful 的要求</h2><ul>
<li>Client-Server 架構</li>
<li>Cacheable 快取機制</li>
<li><code>Stateless Protocol</code> 無狀態性的通訊協定 (這個最最重要！)</li>
<li>Uniform inerface 統一介面</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-__u7DB2_u8DEF_u7684_u4E0D_u7A69_u5B9A_u6027"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-__u7DB2_u8DEF_u7684_u4E0D_u7A69_u5B9A_u6027" class="headerlink" title="RESTful API 設計原則 - 網路的不穩定性"></a>RESTful API 設計原則 - 網路的不穩定性</h2><ul>
<li>隨時可能斷線！往往看起來正常，其實已經斷線。</li>
<li>使用 API 時，連線可能在信號送達 server 前斷線</li>
<li>也可能正要回 API 結果時斷線</li>
<li>也可能次序錯亂，先發出的 req 1 反而比晚發出的 req 2 更晚到達 Server。</li>
<li><code>總之，到處都可能會出錯</code></li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Stateless__28_u901A_u8A0A_u5354_u5B9A_u7684_u7121_u72C0_u614B_u6027_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Stateless__28_u901A_u8A0A_u5354_u5B9A_u7684_u7121_u72C0_u614B_u6027_29" class="headerlink" title="RESTful API 設計原則 - Stateless (通訊協定的無狀態性)"></a>RESTful API 設計原則 - Stateless (通訊協定的無狀態性)</h2><ul>
<li>ex: 可以把 login 狀態存在短期資料庫，如 Redis</li>
<li>簡單說 RESTful 不能用 session_start (for PHP)</li>
<li>ex:<ul>
<li>#1 加入 Product A 到 Cart</li>
<li>#2 加入 Product B 到 Cart</li>
<li>#3 結帳</li>
</ul>
</li>
<li>如果 #3 比 #2 更快到 Server，就買不到 Product B 了。</li>
<li><p>這樣就是有狀態性，因為請求需要符合系統順序</p>
</li>
<li><p><code>解： RESTful 服務應該直接以 (Product A, Product B) 作為結算內容，而不用 session 去暫存。</code></p>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Atomic__28_u539F_u5B50_u6027_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Atomic__28_u539F_u5B50_u6027_29" class="headerlink" title="RESTful API 設計原則 - Atomic (原子性)"></a>RESTful API 設計原則 - Atomic (原子性)</h2><ul>
<li>不能用兩個(或以上)的 API 呼叫去完成一個「動作」。</li>
<li>每一個動作都必需是 atomic。一個完整執行後的 API call 不能讓伺服器端數據停留在不一致的狀態。</li>
<li><p>Ex:</p>
<ul>
<li>User A 轉帳 100 給 User B</li>
<li>付錢買火車票</li>
</ul>
</li>
<li><p>符合 Atomic 的範例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST_DATA =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"from_user_id"</span>: <span class="string">"A"</span>,</span><br><span class="line">    <span class="string">"to_user_id"</span> : <span class="string">"B"</span>,</span><br><span class="line">    <span class="string">"amount"</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">"create_time"</span> : <span class="string">"2014-07-05T17:37:21"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果當機的話，只要再執行一次這個 API Call 即可！</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-__u8DB3_u5920_u5B8C_u6574_u7684_u8CC7_u6599"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-__u8DB3_u5920_u5B8C_u6574_u7684_u8CC7_u6599" class="headerlink" title="RESTful API 設計原則 - 足夠完整的資料"></a>RESTful API 設計原則 - 足夠完整的資料</h2><ul>
<li>炮二平五 -&gt; 客戶端不該知道伺服器端的狀態！</li>
<li>利用 step_id<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/chinese_chess_game/&#123;game_id&#125; (PUT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"step_id"</span> : <span class="number">31</span>,</span><br><span class="line">    <span class="string">"action"</span> : <span class="string">"炮二平五"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Idempotence__28_u91CD_u65B0_u547C_u53EB_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Idempotence__28_u91CD_u65B0_u547C_u53EB_29" class="headerlink" title="RESTful API 設計原則 - Idempotence (重新呼叫)"></a>RESTful API 設計原則 - Idempotence (重新呼叫)</h2><ul>
<li>在客戶端，任何未成功的 API 呼叫，只要重新呼叫一次就行了。</li>
<li>伺服器端要懂如何處理重複的 request</li>
<li><code>用 POST 建立新物件時，把客戶端的 timestamp 也放進 API request 中！</code> 就可以讓伺服器端辨別是不是收到重複的 HTTP POST</li>
</ul>
<h2 id="RESTful_API__u8A2D_u8A08_u539F_u5247_-_Uniform_Interface__28_u7D71_u4E00_u4ECB_u9762_29"><a href="#RESTful_API__u8A2D_u8A08_u539F_u5247_-_Uniform_Interface__28_u7D71_u4E00_u4ECB_u9762_29" class="headerlink" title="RESTful API 設計原則 - Uniform Interface (統一介面)"></a>RESTful API 設計原則 - Uniform Interface (統一介面)</h2><ul>
<li>所有 URL 應該基於物件，而不是行動</li>
<li>一個物件有正常有4種行動： CRUD<ul>
<li>POST : Create</li>
<li>GET : Read</li>
<li>PUT/PATCH : Update</li>
<li>DELETE : Delete</li>
</ul>
</li>
</ul>
<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><ol>
<li>how to design login API (stateless)<ul>
<li>JWT - Json Web Token<ol>
<li>payload (ex: user id)</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"userId"</span> : <span class="number">9527</span>,</span><br><span class="line">    <span class="string">"expiration"</span> : <span class="string">"2015-11-09T12:12:14"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"signature"</span> :  <span class="string">""</span>  <span class="comment">// 相當於 token，用 userId encrypt 之後 hash 出來的，用 service side 的 private key 加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都把 token 放進 header 的 auth 資訊中，用 server 的 public key 去解密，看有沒有 match</span></span><br><span class="line"><span class="comment">// User 不能改動 expiration，不然 signature 會不一樣</span></span><br><span class="line"><span class="comment">// 每次 request 就 update token，將 expiration 設為該 req 之後的 30 min。</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>post timestamp 也是要存進 redis 或資料庫中囉？ Yes, 放 Redis 就行了，設個 5 分鐘即可。也不用開保護，通常真的遺失也沒關係。</p>
</li>
<li><p>如何測試 atomic api -&gt; 應該是由商業邏輯來定義，所以在談 user requirement 中，會需要不斷的問客戶問題！ex: 轉帳轉到一半斷線的話怎麼辦？</p>
</li>
</ol>
<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ul>
<li>做 /test/users/9527 做 mock API，之後 test 改成 v1 即可！</li>
</ul>
<ul>
<li>一定要學怎麼用 Redis 了！</li>
</ul>
<h2 id="u9583_u4EAE_u4EAE_u5FC3_u5F97_u5C0F_u7D50"><a href="#u9583_u4EAE_u4EAE_u5FC3_u5F97_u5C0F_u7D50" class="headerlink" title="閃亮亮心得小結"></a>閃亮亮心得小結</h2><blockquote>
<ul>
<li>最差的開發者不是寫了爛程式碼的人，而是 <em>不知道自己有多爛的人</em>。</li>
<li>多一個人懂 RESTful，未來我接手的爛專案的可能性就少一點。</li>
<li>越多人使用 RESTful，便有越多需要 RESTful 技能的專案，那我便有更多工作機會。</li>
</ul>
</blockquote>
<ul>
<li>幫助別人，幫助自己</li>
<li>守護自由，保護自己</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6DFA_u8AC7_HTTP"><a href="#u6DFA_u8AC7_HTTP" class="headerlink" title="淺談 HTTP"></a>淺談 HTTP</h2><ul>
<li><p>HTTP 是通訊協定！</p>
<ul>
<l]]>
    </summary>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
      <category term="講座" scheme="http://blog.dj1020.net/tags/%E8%AC%9B%E5%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD 實戰與自動測試 (91 哥) - Day 3]]></title>
    <link href="http://blog.dj1020.net/TDD-%E5%AF%A6%E6%88%B0%E8%88%87%E8%87%AA%E5%8B%95%E6%B8%AC%E8%A9%A6-91-%E5%93%A5-Day-3/"/>
    <id>http://blog.dj1020.net/TDD-實戰與自動測試-91-哥-Day-3/</id>
    <published>2015-10-31T01:54:27.000Z</published>
    <updated>2015-10-31T09:48:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HW_Learning"><a href="#HW_Learning" class="headerlink" title="HW Learning"></a>HW Learning</h2><ol>
<li>一次只新增一個 Scenario，一次只有一個紅燈，關注點集中。</li>
<li>一次新增多個測試案例不會比較快，但會造成很大的「干擾」，不自覺想去 implement 下一個 Scenario。</li>
<li>用”最少”、”最簡單”、”最直覺(最快)” 的方式來寫 production code 通過 test case。</li>
<li>花太多時間一次做到位，也許寫錯或需求改變要打掉重寫，或重構，成本都高很多。</li>
<li>也可能後面 implement 的 scenario 根本不重要，不用寫，每次只寫一個 scenario 可以做到增量式 delivery</li>
<li>承上，如果想一次做到位，同時滿足 10 個 Scenario，也許交付時間卡在尷尬的時點，結果什麼可執行的 Code 都交不出來。</li>
<li><code>先有 Code 再重構</code></li>
<li>承上，一定比你一開始要設計到完美才開始寫 Code 來得簡單。</li>
<li>一定要跟 PO(或需求單位) 要 Example !!!! 不同的路徑都要有，一定有 if / else，每個 if / else 都會多測試案例。</li>
</ol>
<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>全面性的思考，可以分「軟體架構」和「系統架構」面：系統架構面，如存資料要用檔案還是資料庫，哪些 service 要用 queue … 等等。軟體架構面，如分幾個 layer 的，要寫哪些 class 等等。</li>
<li>Interface 應該用「使用端」來定義，我們只是要實作出來；而且大多數是從需求中重構出來的。</li>
<li>用註解表示需求，之後補 TestCase</li>
</ol>
<h2 id="Unit_Test_vs-_TDD_vs-_BDD"><a href="#Unit_Test_vs-_TDD_vs-_BDD" class="headerlink" title="Unit Test vs. TDD vs. BDD"></a>Unit Test vs. TDD vs. BDD</h2><ul>
<li>Unit Test: 確保程式寫的跟你想的一樣</li>
<li>TDD: 確保你先想清楚才動手寫，知道我寫的每一行 Code 的目的，和何時該結束，並且能驗證。</li>
<li><p>BDD: 確保你想的是使用者要的。(確保功能符合客戶需求才動手寫。)</p>
</li>
<li><p>不用 TDD，開發很容易發散回不來！如，要修燈、換燈泡發現櫃子壞、要修櫃子找抽屜發現怪聲、要修抽屜找潤滑油結果沒了要開車去買、開車發現車壞了，所以先跑去修車。老婆回來怒問，我不是叫你修燈泡嗎？老公：不然你以為我在做什麼？</p>
</li>
</ul>
<h2 id="u6210_u672C_u548C_u4FEE_u6539_u6642_u9EDE_-_26gt_3B__u8DDF_u8001_u95C6_u8AC7_u6700_u597D_u7684"><a href="#u6210_u672C_u548C_u4FEE_u6539_u6642_u9EDE_-_26gt_3B__u8DDF_u8001_u95C6_u8AC7_u6700_u597D_u7684" class="headerlink" title="成本和修改時點 -&gt; 跟老闆談最好的"></a>成本和修改時點 -&gt; 跟老闆談最好的</h2><ul>
<li>Length of Feedback cycle 圖，應該跟老闆講解的！為何專案 delay 的元兇。p.180</li>
<li>2006-2009 Scott W. Ambler</li>
<li><a href="http://www.richard-banks.org/2013/04/why-short-feedback-cycle-is-good-thing.html" target="_blank" rel="external">http://www.richard-banks.org/2013/04/why-short-feedback-cycle-is-good-thing.html</a><br><img src="http://lh5.ggpht.com/-yZnKirtvtMw/UVtoLg_35oI/AAAAAAAABYg/-BPqlP6OWGU/image_thumb%25255B5%25255D.png?imgmax=800"></li>
<li>這張圖更簡單，還包含需求收集：<br><img src="http://lh3.ggpht.com/-7C3CsZ_r484/UVtoKaESqWI/AAAAAAAABYQ/MCcuTLL0uIY/image_thumb%25255B2%25255D.png?imgmax=800"></li>
</ul>
<h2 id="RIP_TDD__28from_Ken_Beck_29_http_3A//mvcbook-net/006m"><a href="#RIP_TDD__28from_Ken_Beck_29_http_3A//mvcbook-net/006m" class="headerlink" title="RIP TDD (from Ken Beck) http://mvcbook.net/006m"></a>RIP TDD (from Ken Beck) <a href="http://mvcbook.net/006m" target="_blank" rel="external">http://mvcbook.net/006m</a></h2><ul>
<li>Over-engineering (過度設計)<ul>
<li>如果沒有 TDD 我要用什麼來解決過度設計的問題</li>
<li>反例：架構太空人</li>
</ul>
</li>
<li>API feedback (改善 API 的設計與可用性)<ul>
<li>先寫測試案例來使用自己設計的 API，才會知道 API 好不好用</li>
<li>TDD 就是模擬使用端來用你的 API</li>
<li>Test Case 就是在教別人怎麼用你 API</li>
</ul>
</li>
<li>Logic errors (想的和寫的不一樣，寫的和需求不一樣)<ul>
<li>由需求寫測試案例，綠燈表示通過測試案例</li>
</ul>
</li>
<li>Documentation (寫的跟維護文件是痛苦的)<ul>
<li>從測試案例轉換成文件，不用重工，或是辛苦的維護文件同步更新</li>
</ul>
</li>
<li>Feeling overwhelmed (找不到切入點)<ul>
<li>第一步比較花時間是寫 Test Case 時，對 target class 的命名，method 的命名</li>
<li>建議從最主要的 happy path 開始 implement</li>
</ul>
</li>
<li>Separate interface from implementation thinking (抽象設計)</li>
<li>Agreement (確保已修正問題的證據)</li>
<li>Anxiety (改東壞西的擔心受怕)</li>
</ul>
<blockquote>
<p>如果沒有碰到上面的問題，可以不用 TDD<br>如果你比 TDD 有更低成本的解決方案，請提出來，你就是大師了</p>
</blockquote>
<h2 id="UncleBob"><a href="#UncleBob" class="headerlink" title="UncleBob"></a>UncleBob</h2><ul>
<li><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd</a></li>
</ul>
<h4 id="Over_the_years_I_have_come_to_describe_Test_Driven_Development_in_terms_of_three_simple_rules-_They_are_3A"><a href="#Over_the_years_I_have_come_to_describe_Test_Driven_Development_in_terms_of_three_simple_rules-_They_are_3A" class="headerlink" title="Over the years I have come to describe Test Driven Development in terms of three simple rules. They are:"></a>Over the years I have come to describe Test Driven Development in terms of three simple rules. They are:</h4><ol>
<li>You are not allowed to write any production code unless it is to make a failing unit test pass.</li>
<li>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</li>
<li>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</li>
</ol>
<h2 id="User_Story_Lab"><a href="#User_Story_Lab" class="headerlink" title="User Story Lab"></a>User Story Lab</h2><ul>
<li>會計人員算薪水的系統</li>
<li>多了以時薪計算的兼職人員，但目前系統未提供時薪制計算方式</li>
<li>依據上、下班時間，計算出該日工時，並加上兼職人員加班的時間</li>
<li>…</li>
</ul>
<h2 id="User_Story_vs_User_Story_Card"><a href="#User_Story_vs_User_Story_Card" class="headerlink" title="User Story vs User Story Card"></a>User Story vs User Story Card</h2><ul>
<li>上班時間 &gt; 8hr/day 就是加班</li>
<li>Common Sense 要問出來，你的和我的不一樣</li>
<li>加班 &lt; 2 hr *1.66</li>
<li>加班 2~4 hr *2</li>
<li>加班不得超過 4 hr</li>
<li>必要有 Example 不然你怎麼知道中午那一個小時算不算錢</li>
<li>每個 Scenario 要對應「關鍵商業邏輯」</li>
</ul>
<h2 id="TDD_vs-_Non-TDD"><a href="#TDD_vs-_Non-TDD" class="headerlink" title="TDD vs. Non-TDD"></a>TDD vs. Non-TDD</h2><ul>
<li>圖1: 像繞路一團亂的線</li>
<li>圖2: 像星狀圖，直線，走過的路不用再走，只是多叉路，打叉的表示例外</li>
<li><a href="http://dreamyeh.pixnet.net/blog/post/41497630-%E6%96%B0%E6%89%8B%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%92%8C%E8%B3%87%E6%B7%B1%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E7%9A%84%E5%B7%AE%E7%95%B0" target="_blank" rel="external">專業的設計師和不專業的設計師</a></li>
</ul>
<h2 id="u88FD_u4F5C_u6F86_u82B1_u5668"><a href="#u88FD_u4F5C_u6F86_u82B1_u5668" class="headerlink" title="製作澆花器"></a>製作澆花器</h2><ul>
<li>規格<ul>
<li>能裝水</li>
<li>能提</li>
<li>能灑水</li>
</ul>
</li>
<li>自己灑水給自己的外掛</li>
<li>RD 地雷：跟這支功能一樣，這是 common sense，只是稍微調整一下</li>
<li>PM 地雷：你規格沒寫清楚，這是需求異動，你上次不是這樣說的，這要大改。你出一張嘴比較快。</li>
</ul>
<h2 id="BDD__u53EF_u4EE5_u89E3_u6C7A_u4F60_u7684_u554F_u984C"><a href="#BDD__u53EF_u4EE5_u89E3_u6C7A_u4F60_u7684_u554F_u984C" class="headerlink" title="BDD 可以解決你的問題"></a>BDD 可以解決你的問題</h2><ul>
<li>BDD 測試案例怎麼來？<ul>
<li>分析 User Story，看滿足哪些 Scenario 才叫做 Done。(Acceptance Criteria - 寫在 User Story Card 背面)</li>
<li>最重要的事！到底怎麼樣才叫做做完，最值得花時間的事。</li>
<li>Top Down! Don’t Bottom Up!</li>
<li>更專業說法：Outside In</li>
<li>TDD 的 Test Case 應該是由 Accept test 出來的</li>
<li>Requirement -&gt; User Story -&gt; Acceptance Test Case -&gt; Intergration Test Case -&gt; Unit Test Case</li>
<li>Requirement -&gt; User Story -&gt; Acceptance Test Case <code>是從 PO, user, QA 來的</code></li>
</ul>
</li>
<li>如何降低溝通成本？<ul>
<li>減少需求和開發中的落差</li>
<li>不是 Boss Driven Development</li>
<li>Doamin Specific Language (DSL 簡稱 人話, ex: 加班、時薪)</li>
</ul>
</li>
</ul>
<h2 id="u4EC0_u9EBC_u662F_BDD"><a href="#u4EC0_u9EBC_u662F_BDD" class="headerlink" title="什麼是 BDD"></a>什麼是 BDD</h2><ul>
<li>把你想做的紀錄下來，但是每個人都看得懂！</li>
<li>都用人話溝通</li>
<li>人話可轉換成程式</li>
<li>滿足使用者需求</li>
</ul>
<h2 id="SpecFlow_for_BDD__28Cucumber_2C_PHP__u4E5F_u6709_29"><a href="#SpecFlow_for_BDD__28Cucumber_2C_PHP__u4E5F_u6709_29" class="headerlink" title="SpecFlow for BDD (Cucumber, PHP 也有)"></a>SpecFlow for BDD (Cucumber, PHP 也有)</h2><ul>
<li>把文件和程式碼分開</li>
</ul>
<h2 id="BDD_by_Cucumber"><a href="#BDD_by_Cucumber" class="headerlink" title="BDD by Cucumber"></a>BDD by Cucumber</h2><ul>
<li>BDD Test Case -&gt; Accept TC -&gt; I TC -&gt; U TC</li>
<li>粒度越滾越小</li>
<li>但一樣可以用 Cucumber 來做 Unit Test，沒有說 Cucumber 一定只能用在 Acceptance Test</li>
</ul>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ul>
<li>什麼是 Scope? 老師說要提醒問他</li>
<li>用來避免 step definition 全域的副作用，例如有兩個 “When I Press Save”</li>
</ul>
<h2 id="Web_Service__u6E2C_u8A66"><a href="#Web_Service__u6E2C_u8A66" class="headerlink" title="Web Service 測試"></a>Web Service 測試</h2><ul>
<li>PostMan 可以 generate code snippet</li>
</ul>
<h2 id="Living_Documents_of_specFlow"><a href="#Living_Documents_of_specFlow" class="headerlink" title="Living Documents of specFlow"></a>Living Documents of specFlow</h2><ul>
<li>Pickles Living Documentation</li>
</ul>
<h2 id="u9019_u4E09_u5929_u6C92_u6559_u7684_u4E8B"><a href="#u9019_u4E09_u5929_u6C92_u6559_u7684_u4E8B" class="headerlink" title="這三天沒教的事"></a>這三天沒教的事</h2><ul>
<li>基礎建設設置<ul>
<li>版控</li>
<li>CI : build, report, auto email, auto testing</li>
<li>程式碼分析: Code Mess Detect, 深度檢測, 相似度檢測, Code Standard Detect(ex, PSR)</li>
<li>自動化部署</li>
</ul>
</li>
<li>軟體開發流程框架</li>
<li>團隊成員心態轉換<ul>
<li>PO, sketcholder, Scrum Team</li>
</ul>
</li>
</ul>
<h2 id="u5982_u4F55_u548C_PO__u6E9D_u901A"><a href="#u5982_u4F55_u548C_PO__u6E9D_u901A" class="headerlink" title="如何和 PO 溝通"></a>如何和 PO 溝通</h2><ul>
<li>千萬不要想「改變」他們 -&gt; 重點是「改善」，幫助他們解決問題。</li>
</ul>
<ol>
<li><p>先用「白板」與 PO 討論</p>
<ul>
<li>Why, What, Who，Given/When/Then</li>
<li>引導 PO 給實例，有哪些 Scenario，當場和 PO 討論時就定下來，越擬真越好</li>
<li>把白板結果拍下來！</li>
</ul>
</li>
<li><p>RD 拍白板的結果整理成 Gherkin Style Documents</p>
<ul>
<li>把白板照和 Behat 文件一起 mail 給他</li>
<li>一定要問 PO，這樣有沒有比較清楚？</li>
<li>把 HTML 產生給他</li>
<li>快速 prototype 給他，寫 acceptance test</li>
</ul>
</li>
<li><p>在白板上開始和 PO 使用 Given/When/Then 與 table 方式討論，描述 Scenario</p>
</li>
<li>直接用 Visual Studio 把 table generate 出來</li>
<li>需求異動時，請 PO 補上哪些 Scenario 要做什麼樣的調整(由 PO 發動)</li>
<li>請 PO 一開始整理 User Story 或 Story 時，直接使用 <em>一致的格式</em> (Gherkin)</li>
<li>終極目標，新增或異動需求時，透過 pull request 來更新 Gherkin 文件，讓 PO 操作網頁就好了。</li>
</ol>
<blockquote>
<p>重點不是誰寫！</p>
</blockquote>
<h2 id="IDEAs-1"><a href="#IDEAs-1" class="headerlink" title="IDEAs"></a>IDEAs</h2><ul>
<li>交付文件拿 30%</li>
<li>使用 Test Case 和需求單位 confirm 需求！就不用先寫 production code 之後才來改。</li>
<li>和需求單位確認還有沒有需要加入的 scenario，才不會之後被挌話「這是 common sense 啊」</li>
<li>因為要改難改，結果害所有人都很難用</li>
<li>如果討論 scenario 時客戶說沒有畫面我不知道 -&gt; 快速製 prototype</li>
<li>曳光彈開發 -&gt; 讓 prototype 不被浪費，UI 一直到 Controller 都 hard code。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="HW_Learning"><a href="#HW_Learning" class="headerlink" title="HW Learning"></a>HW Learning</h2><ol>
<li>一次只新增一個 Scenario，一次只有一個紅燈，關注]]>
    </summary>
    
      <category term="TDD" scheme="http://blog.dj1020.net/tags/TDD/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD 實戰與自動測試 (91 哥) - Day 2 Web Testing]]></title>
    <link href="http://blog.dj1020.net/TDD-%E5%AF%A6%E6%88%B0%E8%88%87%E8%87%AA%E5%8B%95%E6%B8%AC%E8%A9%A6-91-%E5%93%A5-Day-2/"/>
    <id>http://blog.dj1020.net/TDD-實戰與自動測試-91-哥-Day-2/</id>
    <published>2015-10-24T01:54:27.000Z</published>
    <updated>2015-10-24T14:07:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>訓練 PM 描述精準的需求，精準的 Context(Scenario)，以 hw 為例。</li>
<li>I can do more. Do hw, no execute.</li>
<li>寫 TestCase 的 method, variables, expected, actual 命名都要從 Scenario 來！！！最好寫到讓非程式人員也能一看就懂。</li>
<li>要用的人好用，但程式人員就會相對難寫，正常，所以在寫 TestCase 千萬不要想 Production Code 怎麼實做。</li>
<li>Key ! 在寫測試案例，「不能有商業邏輯」、「不要想 production code 怎麼寫」，這是一道門檻，千萬不要把實作細節放進 TestCase，「只管”要”，不管”How”」。</li>
<li>跟老師要 hw1 正例、反例的 C# Code</li>
<li>要小心團隊寫 Code 人員不跑你的測試！可以自己先寫，教主管寫測試根本不用花多少時間。</li>
<li>把 TDD 課帶回去內部訓，以 CI Server 環境為測試為準，沒有說在誰的 machine 上能過 CI 上不過的問題。</li>
<li>CI Test 不過為最高優先</li>
<li>要 show 給 主管 看寫測試超簡單，production code 也許是 10 倍。</li>
<li>明白需求，測試碼會很好寫，但需求不明確，很容易大重工，造成時程不斷 Delay。</li>
</ol>
<h2 id="Unit_Test_vs_Integration_Test"><a href="#Unit_Test_vs_Integration_Test" class="headerlink" title="Unit Test vs Integration Test"></a>Unit Test vs Integration Test</h2><ul>
<li>Unit Test 要用 Integration Test 來保護，粒度更大，反例：普悠碼號上線營運打掉月台的例子。</li>
</ul>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><ul>
<li>Web Testing 主流，即使 Visual Studio 骨子裡也是用 Selenium。</li>
<li>把 Selenium 錄下來的 html 檔附在 QA bug issue 附件，太酷了，任何人拿到都可以匯入後重現 bug</li>
<li>如果不是在 Firefox 上執行的話，就要先轉 html -&gt; PHP, C#, javascript 再改 Driver，如 new ChromeDriver();</li>
<li>God! 可以直接用 Clipboard 複製 Selenium 上的 command 並轉換成對應的 PHP/C#/Ruby 上 xUnit 的 code</li>
</ul>
<h2 id="Page_Object"><a href="#Page_Object" class="headerlink" title="Page Object"></a>Page Object</h2><ul>
<li>把「使用者的行為」和「頁面上的元素」隔開</li>
<li>每個 Page Object 內的 public method 代表一個使用者行為, ex: pageObj.open(), pageObj.go()</li>
<li>TestCase 中把 Page Object instaniate 出來，利用 Page Object 操作網頁</li>
<li>如果 Page 上的元素有改變，只要變 Page Object 中的 prop 就行了，不用改 TestCase 的 Code</li>
<li>是一個 Design Pattern 可以自己 implement 不一定要靠 FluentAutomation 的 PageObject</li>
<li>Page Object 「封裝」了頁面上 UI 元素的變化，就算皮整個換掉，TestCase 程式也不用動。</li>
</ul>
<h2 id="u6E2C_u8A66_u6BD4_u4F8B_u91D1_u5B57_u5854"><a href="#u6E2C_u8A66_u6BD4_u4F8B_u91D1_u5B57_u5854" class="headerlink" title="測試比例金字塔"></a>測試比例金字塔</h2><ul>
<li>對 MVC 架構中的 C 寫 Integration Test 效益很高！</li>
<li>CRUD 寫 Unit Test 的沒有商業邏輯的情況下用處不大</li>
<li>Unit Test 才是快速找 Bug 位置，Integration Test 是測大功能可用度。</li>
<li>在 Legency System 上寫 Unit Test 報酬率不高，特別是 Production Code 寫很爛，不如從 Acceptance / Integration Test 開始。</li>
</ul>
<h2 id="u91CD_u69CB_u6280_u5DE7"><a href="#u91CD_u69CB_u6280_u5DE7" class="headerlink" title="重構技巧"></a>重構技巧</h2><ul>
<li>要先把抽象層級全部重構完成，才去 implement 細節(填肉)</li>
</ul>
<h2 id="Policy__u79D8_u8A23"><a href="#Policy__u79D8_u8A23" class="headerlink" title="Policy 秘訣"></a>Policy 秘訣</h2><ul>
<li>原本最高境界應該是，需要用 interface 時才用。</li>
<li>但是菜鳥進來，他怎麼知道什麼時候要用，什麼時候不用。你教了半天，結果就是因為經驗不足，該用時反而沒用，不該用時一直用。</li>
<li>乾脆全部規定要用！ 目的：讓之後老鳥還有機會可以把 dirty code 救回來。</li>
<li>不能直接 new Class() 全部不行！除了 DTO (Data Transfer Object) 以外。</li>
<li>一定要開 factory，把 new 放進去</li>
<li>會產生 9成的彈性(experienced by 91哥)，CP 值極高。</li>
</ul>
<h2 id="Interface__u5B9A_u7FA9_u7684_u79D8_u8A23"><a href="#Interface__u5B9A_u7FA9_u7684_u79D8_u8A23" class="headerlink" title="Interface 定義的秘訣"></a>Interface 定義的秘訣</h2><ul>
<li>由使用者的角度去定義，Ex: 實體是”黑貓”，但被當成”物流商”，這是站在「頁面」這個使用者的角度來看。</li>
<li>問除了 union 之外的 interface API 去除參數的方法 (ex: 用 constructor 塞參數)<br>*</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="IDEAs"><a href="#IDEAs" class="headerlink" title="IDEAs"></a>IDEAs</h2><ol>
<li>訓練 PM 描述精準的需求，精準的 Context(Scenario)，以 hw 為例。</li>
<l]]>
    </summary>
    
      <category term="TDD" scheme="http://blog.dj1020.net/tags/TDD/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 也有 Day #20 - Laravel + React (謝士揚)]]></title>
    <link href="http://blog.dj1020.net/PHP%E4%B9%9F%E6%9C%89Day-20-Laravel-React-%E8%AC%9D%E5%A3%AB%E6%8F%9A/"/>
    <id>http://blog.dj1020.net/PHP也有Day-20-Laravel-React-謝士揚/</id>
    <published>2015-10-22T11:43:34.000Z</published>
    <updated>2015-10-23T04:54:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>JSX</li>
<li>State 變數<ul>
<li>如果更新的話，元件內容可能會改變</li>
<li>getInitialState() 時 return 的物件 { name: “sexyyoung” }</li>
<li>在 render 裡要用的話要 this.state.name</li>
<li>render 可 return ( JSX )</li>
</ul>
</li>
<li>Props 變數<ul>
<li>元件父層傳來的變數</li>
<li>寫在 JSX 中 tag 的 attributes 裡</li>
<li>JSX 的 Tag name 要對應 React 的 class name (createClass)</li>
</ul>
</li>
<li>React Initialize 流程圖</li>
</ul>
<h2 id="u5BE6_u969B_u6848_u4F8B"><a href="#u5BE6_u969B_u6848_u4F8B" class="headerlink" title="實際案例"></a>實際案例</h2><ul>
<li>componentDidMount - call ajax 取資料，並用 setState 塞資料到 component 裡，雙向 binding 會直接 render 出來 items。</li>
</ul>
<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><ul>
<li>設定檔 package.json 裡要設 main : “server.js”</li>
<li>設定檔 package.json 裡要指定 node 版本</li>
<li>webpack 自己的設定檔檔名固定是 …</li>
<li>loders 讀取器，可轉 sass 成 css</li>
<li>webpack-dev-server 套件持續 compile 且 browser sync, 安裝方式 npm install -g webpack-dev-serer</li>
<li><p>導入 React</p>
<ul>
<li>Babel-loader 可以轉 ES6, JSX, … 成 JS</li>
<li>webpack.config.js 要改 entry 變數，修改進入點</li>
<li>利用 module.exports 來模組化</li>
</ul>
</li>
<li><p>寫一個 server.js 搭配 webpack-dev-server 可以架前端 server (利用 nodejs)</p>
</li>
<li>常用設定放在 common.js， server.js 設定可以拆分成 production.server.js / dev.server.js</li>
<li>在 server.js 中設定 proxy 去避免非同源 ajax 呼叫的問題</li>
</ul>
<h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h2><ul>
<li>講太快</li>
</ul>
<h2 id="React_Issues"><a href="#React_Issues" class="headerlink" title="React Issues"></a>React Issues</h2><ul>
<li>資料不對稱，SEO 下降，抓不到資料 -&gt; 用 isomorphic</li>
</ul>
<p>import from 是 ES6 的語法<br>require for ES5 也行</p>
<p>HotReplacementPlugin 是 webpack 內建</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul>
<li>JSX</li>
<li>State 變數<ul>
<li>如果更新的話，元件內容可能會改變</li>
]]>
    </summary>
    
      <category term="PHP也有Day" scheme="http://blog.dj1020.net/tags/PHP%E4%B9%9F%E6%9C%89Day/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD 實戰與自動測試 (91 哥) - Day 1]]></title>
    <link href="http://blog.dj1020.net/TDD-%E5%AF%A6%E6%88%B0%E8%88%87%E8%87%AA%E5%8B%95%E6%B8%AC%E8%A9%A6-91-%E5%93%A5-Day-1/"/>
    <id>http://blog.dj1020.net/TDD-實戰與自動測試-91-哥-Day-1/</id>
    <published>2015-10-17T01:54:27.000Z</published>
    <updated>2015-10-18T05:04:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="TDD__u958B_u767C_u5BE6_u52D9_u554F_u984C"><a href="#TDD__u958B_u767C_u5BE6_u52D9_u554F_u984C" class="headerlink" title="TDD 開發實務問題"></a>TDD 開發實務問題</h2><ol>
<li>改贈品價格，結果全部產品停售，缺少迴歸測試，改 A 錯 B</li>
<li>正式環境的 API 沒辦法直接連接測試，要上線才知道問題</li>
<li>和同事之間介接 API 要等同事寫好才能測試自己的 Code 是否正常 (平行開發)</li>
<li>1 + 1 + 1 + 1 + 1 的例子 -&gt; 不要猜，寫程式去證實</li>
<li>哪裡錯了？測過哪些？</li>
</ol>
<h2 id="u6C92_u6709_u4EBA_u6703_u523B_u610F_u5BEB_u6709_bug__u7684_u7A0B_u5F0F"><a href="#u6C92_u6709_u4EBA_u6703_u523B_u610F_u5BEB_u6709_bug__u7684_u7A0B_u5F0F" class="headerlink" title="沒有人會刻意寫有 bug 的程式"></a>沒有人會刻意寫有 bug 的程式</h2><ol>
<li>Unit Test - 確保程式寫的跟你想的一樣，特別容易出現問題在判斷式</li>
<li>TDD</li>
<li>BDD</li>
</ol>
<h2 id="u4EC0_u9EBC_u662F_Unit_Test"><a href="#u4EC0_u9EBC_u662F_Unit_Test" class="headerlink" title="什麼是 Unit Test"></a>什麼是 Unit Test</h2><ol>
<li>最小的測試單位</li>
<li>外部相依性為零</li>
<li>不具備商業邏輯</li>
<li>測試案例之間相依性為零 (獨立性)</li>
<li>一個測試案例只測一件事</li>
</ol>
<h2 id="Unit_Test_vs_Integration_Test_vs_Acceptance_Tetst"><a href="#Unit_Test_vs_Integration_Test_vs_Acceptance_Tetst" class="headerlink" title="Unit Test vs Integration Test vs Acceptance Tetst"></a>Unit Test vs Integration Test vs Acceptance Tetst</h2><ol>
<li>粒度 A &gt; I &gt; U</li>
<li>A -&gt; 接近使用者，不知道錯在哪</li>
<li>U -&gt; 接近系統，知道錯在哪</li>
</ol>
<h2 id="u597D_u7684_Unit_Test__u7279_u6027_uFF1A_FIRST"><a href="#u597D_u7684_Unit_Test__u7279_u6027_uFF1A_FIRST" class="headerlink" title="好的 Unit Test 特性： FIRST"></a>好的 Unit Test 特性： FIRST</h2><ol>
<li>Fast，ex: 1 unit test &lt; 500ms</li>
<li>Independent，ex: 不相依資料庫，不相依網路</li>
<li>Repeatable，ex: 最常出現問題，新增 Account，Email 不能重複的情況</li>
<li>Self-Validating，ex: (反例) 測試跑完，眼睛去看資料庫對不對</li>
<li>Timely，ex: Production Code 寫完當下，測試程式就寫好了 (TDD)</li>
</ol>
<h2 id="u5C0E_u5165_u6E2C_u8A66_u5DE5_u5177"><a href="#u5C0E_u5165_u6E2C_u8A66_u5DE5_u5177" class="headerlink" title="導入測試工具"></a>導入測試工具</h2><ol>
<li>給大家測試規範，class 命名、測試案例名稱、資料夾結構</li>
<li>利用 Test Generator 降低第一步的門檻</li>
</ol>
<h2 id="u65B0_u89C0_u5FF5_u548C_u5F85_u67E5_for_PHP"><a href="#u65B0_u89C0_u5FF5_u548C_u5F85_u67E5_for_PHP" class="headerlink" title="新觀念和待查 for PHP"></a>新觀念和待查 for PHP</h2><ol>
<li>查如何一行檢測 Object 相等，並能 assert 顯示不相等的 properties</li>
<li>查如何一行檢測 Collection(Array) 相等，並能 assert 不相等的 element</li>
<li>承3，可以不管順序檢測相等</li>
<li>可以檢測 Object 部份 properties 相等</li>
<li>可以檢測 Composite Object 相等</li>
</ol>
<h2 id="Stub"><a href="#Stub" class="headerlink" title="Stub"></a>Stub</h2><ol>
<li>Stbu 的目的？ 注入一個假物件到測試目標，去控制流程中的 path</li>
<li>怎麼初始化 Stub 物件？ ex: NSubstitude</li>
<li>如何決定 Stub 物件回傳值？ ex: NSubstitude</li>
</ol>
<h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><ol>
<li>Mock 的目的？ 用來 assert，例如驗證 mock 物件中某方法被執行幾次，0次、1次、多次</li>
<li><p>Mock 怎麼使用？</p>
<ul>
<li><p>怎麼初始化 mock 物件？</p>
  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ILog log = Substitude.For&lt;ILog&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>怎麼驗證互動次數與傳入參數？</p>
  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 確定 log.Save() 只被執行一次，而且傳入 Save() 的參數中要含有 "login failed" 字串</span></span><br><span class="line">log.Received(<span class="number">1</span>).Save(Arg.Is&lt;<span class="keyword">string</span>&gt;(x =&gt; x.Contains(<span class="string">"login failed"</span>)));</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="Why_IoC"><a href="#Why_IoC" class="headerlink" title="Why IoC"></a>Why IoC</h2><ol>
<li>為了測試？<ul>
<li>為了 <code>產品程式碼的擴充性</code> ！</li>
</ul>
</li>
</ol>
<h2 id="u55AE_u5143_u6E2C_u8A66_u8207_u7269_u4EF6_u5C0E_u5411_u5C01_u88DD_u7684_u672C_u8CEA"><a href="#u55AE_u5143_u6E2C_u8A66_u8207_u7269_u4EF6_u5C0E_u5411_u5C01_u88DD_u7684_u672C_u8CEA" class="headerlink" title="單元測試與物件導向封裝的本質"></a>單元測試與物件導向封裝的本質</h2><ol>
<li>單元測試的意義<ul>
<li>模擬”外部”如何使用目標物件，測試並驗證其行為是否符合預期</li>
</ul>
</li>
<li>封裝原則<ul>
<li>定義「物件的邊界」</li>
<li>封裝物件實作細節，有時是為了可讀性</li>
<li>封裝變化</li>
</ul>
</li>
</ol>
<h2 id="u76F4_u63A5_u6E2C_u8A66_u975E_Public__u65B9_u6CD5_uFF0C_u6709_u4EC0_u9EBC_u554F_u984C_uFF1F"><a href="#u76F4_u63A5_u6E2C_u8A66_u975E_Public__u65B9_u6CD5_uFF0C_u6709_u4EC0_u9EBC_u554F_u984C_uFF1F" class="headerlink" title="直接測試非 Public 方法，有什麼問題？"></a>直接測試非 Public 方法，有什麼問題？</h2><ol>
<li>為了測試而測試，而<code>不是以需求為出發點</code></li>
<li>導致測試失去<code>健壯性</code>，原本被封裝的變化，現在被測試程式碼相依，維護成本非常高。</li>
</ol>
<h2 id="Internal__u8A72_u5982_u4F55_u6E2C_u8A66_uFF1F"><a href="#Internal__u8A72_u5982_u4F55_u6E2C_u8A66_uFF1F" class="headerlink" title="Internal 該如何測試？"></a>Internal 該如何測試？</h2><ol>
<li><p>Why Internal？</p>
<ul>
<li>有很多 interface 只有內部在用，如果開 public interface 的話，外面就有人用，結果改了 interface 後，外面的程式就壞了。</li>
</ul>
</li>
<li><p>用 [assembly:InternalsVisibleTo(“待測專案名稱”)] 讓測試碼可以和 production code 「在同一個房間」(same namespace)</p>
<ul>
<li>ex: [assembly:InternalsVisibleTo(“MyLib.Test”)]</li>
<li>For Mock - ex: [assembly:InternalsVisibleTo(“DynamicProxyGenAssembly2”)]</li>
</ul>
</li>
</ol>
<h2 id="u6E2C_u8A66_u6DB5_u84CB_u7387_u7684_u610F_u7FA9"><a href="#u6E2C_u8A66_u6DB5_u84CB_u7387_u7684_u610F_u7FA9" class="headerlink" title="測試涵蓋率的意義"></a>測試涵蓋率的意義</h2><ol>
<li>測試涵蓋率不足，代表兩種意義：<ul>
<li>目前的測試案例不足以呈現與說明，產品程式碼的所有功能</li>
<li>存在與需求無關的程式碼</li>
</ul>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TDD__u958B_u767C_u5BE6_u52D9_u554F_u984C"><a href="#TDD__u958B_u767C_u5BE6_u52D9_u554F_u984C" class="headerlink" title="TDD 開發實務問題">]]>
    </summary>
    
      <category term="TDD" scheme="http://blog.dj1020.net/tags/TDD/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (4) - Enterprise Architecture Case in PHP (曾義峰 Ant)]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(4)%20-%20Enterprise%20Architecture%20Case%20in%20PHP%20(%E6%9B%BE%E7%BE%A9%E5%B3%B0%20Ant)/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(4) - Enterprise Architecture Case in PHP (曾義峰 Ant)/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T06:00:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MUZIK__u67B6_u69CB_u6F14_u9032"><a href="#MUZIK__u67B6_u69CB_u6F14_u9032" class="headerlink" title="MUZIK 架構演進"></a>MUZIK 架構演進</h2><h4 id="u67B6_u69CB_u5148_u6C7A"><a href="#u67B6_u69CB_u5148_u6C7A" class="headerlink" title="架構先決"></a>架構先決</h4><ul>
<li>考慮現有資源，考慮公司人員的專長。</li>
<li>考慮公司文化、流程、商業擴展。</li>
<li>思維要超越程式碼</li>
</ul>
<h4 id="u6C92_u6709_u5B8C_u7F8E_u7684_u67B6_u69CB_uFF0C_u53EA_u6709_u6700_u9069_u7684_u67B6_u69CB"><a href="#u6C92_u6709_u5B8C_u7F8E_u7684_u67B6_u69CB_uFF0C_u53EA_u6709_u6700_u9069_u7684_u67B6_u69CB" class="headerlink" title="沒有完美的架構，只有最適的架構"></a>沒有完美的架構，只有最適的架構</h4><ul>
<li>要注意 Context 再來談最適架構</li>
<li>Ex: high throughput, 千萬人同時在線</li>
<li>Ex: low latency, 低延遲回應, Ad platform(30ms)</li>
</ul>
<h4 id="u67B6_u69CB_u662F_u6F14_u9032_u7684_uFF0C_u9810_u60F3_u4F46_u4E0D_u904E_u65E9_u512A_u5316"><a href="#u67B6_u69CB_u662F_u6F14_u9032_u7684_uFF0C_u9810_u60F3_u4F46_u4E0D_u904E_u65E9_u512A_u5316" class="headerlink" title="架構是演進的，預想但不過早優化"></a>架構是演進的，預想但不過早優化</h4><ul>
<li>不是 PHP 直接換成 GoLang，需先考慮的是「下一步」 ex: Microservices, SOA, Monolith</li>
<li>有時候是換整個 framework</li>
<li><p>Microservices 的 pros/cons, Ex: death star diagram, like twitter, gilt Netflix</p>
</li>
<li><p>IPC (in-process communication)</p>
</li>
<li>Containers 技術對應 Native 的效能損失</li>
</ul>
<h2 id="MUZIK__u67B6_u69CB_u6F14_u5316_u53F2"><a href="#MUZIK__u67B6_u69CB_u6F14_u5316_u53F2" class="headerlink" title="MUZIK 架構演化史"></a>MUZIK 架構演化史</h2><ul>
<li>對技術研究高度投入，看原始碼！專注節省工程師開發時間。</li>
</ul>
<h4 id="Multi_Cloud"><a href="#Multi_Cloud" class="headerlink" title="Multi Cloud"></a>Multi Cloud</h4><ul>
<li>天啊，他們運用每種「雲」的特性</li>
<li>追求 Cloud to Cloud (避免被 AWS 綁架)</li>
<li>建 vCloud 的概念</li>
</ul>
<h3 id="Bach__28MUZIK_1-0_29"><a href="#Bach__28MUZIK_1-0_29" class="headerlink" title="Bach (MUZIK 1.0)"></a>Bach (MUZIK 1.0)</h3><ul>
<li>傳統開發 Monolith 很難 scale out</li>
<li>Sol 1: Add ELB (負載平衡器)<ul>
<li>但是 Session 會出問題</li>
<li>會「不平衡」</li>
<li>難以橫向擴展</li>
</ul>
</li>
<li>Sol 2: 複製 Session 的方式<ul>
<li>但會廣播風暴</li>
<li>越多 Server，同步效能會變差</li>
<li>…</li>
</ul>
</li>
<li>Sol 3: Session 放進 DB<ul>
<li>要改應用程式</li>
<li>資料庫難擴展</li>
<li>…</li>
</ul>
</li>
<li>Sol 4: Session 放進 Cache (Redis, MemoryCache Daemon)<ul>
<li>貴</li>
<li>如果 Cache server 掛了，所有流量會進 DB server，造成雪崩效應！形成痛點</li>
</ul>
</li>
</ul>
<blockquote>
<p>要知道每個架構的痛點，知道怎麼補坑</p>
</blockquote>
<ul>
<li>Sol 5: Session 放 Client 端<ul>
<li>好處多</li>
<li>安全性會有小問題，但可解<br>-</li>
</ul>
</li>
</ul>
<h4 id="Migrations__28Phalcon_29"><a href="#Migrations__28Phalcon_29" class="headerlink" title="Migrations (Phalcon)"></a>Migrations (Phalcon)</h4><h4 id="Why_still_use_MySQL"><a href="#Why_still_use_MySQL" class="headerlink" title="Why still use MySQL"></a>Why still use MySQL</h4><ul>
<li>connection pool (PHP 也支援)<ul>
<li>佔用資料庫連線，可能會無法連線</li>
<li>難偵測 DB 狀態，決定何時要下線</li>
<li>變成另一種 global variable</li>
</ul>
</li>
</ul>
<h3 id="u6D77_u9813__28MUZIK_2-0_29"><a href="#u6D77_u9813__28MUZIK_2-0_29" class="headerlink" title="海頓 (MUZIK 2.0)"></a>海頓 (MUZIK 2.0)</h3><h4 id="Search__u529F_u80FD_u53D7_u9650_MySQL__u641C_u5C0B_u8F03_u5DEE"><a href="#Search__u529F_u80FD_u53D7_u9650_MySQL__u641C_u5C0B_u8F03_u5DEE" class="headerlink" title="Search 功能受限 MySQL 搜尋較差"></a>Search 功能受限 MySQL 搜尋較差</h4><ul>
<li>改 ElasticSearch</li>
<li>…</li>
</ul>
<h3 id="28MUZIK_3-0_29"><a href="#28MUZIK_3-0_29" class="headerlink" title="(MUZIK 3.0)"></a>(MUZIK 3.0)</h3><ul>
<li>改 micro services</li>
<li>加了 API Gateway</li>
<li>Nginx 也有建議這樣用，避免 death star diagram<ul>
<li>不是 100% 的 microservices</li>
<li>和第三方互動困難</li>
</ul>
</li>
</ul>
<h4 id="MySQL_5-6_-_26gt_3B_Master-Master_cluster"><a href="#MySQL_5-6_-_26gt_3B_Master-Master_cluster" class="headerlink" title="MySQL 5.6 -&gt; Master-Master cluster"></a>MySQL 5.6 -&gt; Master-Master cluster</h4><ul>
<li>M-M : 每個資料庫都可讀/可寫<ul>
<li>如果兩人同時對 A 匯款，但結果被發到兩個 DB server 裡 -&gt; Dead lock/rollback</li>
<li>Sol: Load balancing，不要放到兩個 DB server 裡，但需 HA，架構變複雜</li>
<li>Sol: 改 PHP Code 來控制，對同一個人(or 交易)就進同一台機器</li>
</ul>
</li>
</ul>
<h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><h4 id="Geo_DNS__28_u60F3_u8DE8_u6240_u6709_u96F2_u3001_u8DE8_u570B_29"><a href="#Geo_DNS__28_u60F3_u8DE8_u6240_u6709_u96F2_u3001_u8DE8_u570B_29" class="headerlink" title="Geo DNS (想跨所有雲、跨國)"></a>Geo DNS (想跨所有雲、跨國)</h4><p>講太快了</p>
<h3 id="Next_5-0"><a href="#Next_5-0" class="headerlink" title="Next 5.0"></a>Next 5.0</h3><ul>
<li><p>Why not Docker ?</p>
<ul>
<li>用在 開發環境，但 production 不適用，效能問題、穩定問題</li>
<li>跑越多 docker containers 效能損越多</li>
</ul>
</li>
<li><p>Big Data</p>
<ul>
<li>有些狀況 Hadoop 比 Spark 快，需 study</li>
<li>提了很多值得深入探討的問題</li>
</ul>
</li>
</ul>
<h2 id="PHP_7"><a href="#PHP_7" class="headerlink" title="PHP 7"></a>PHP 7</h2><p>評估中，還在實驗、測試中。但勢必會升級。</p>
<h2 id="15__u689D_u67B6_u69CB_u5FC3_u6CD5"><a href="#15__u689D_u67B6_u69CB_u5FC3_u6CD5" class="headerlink" title="15 條架構心法"></a>15 條架構心法</h2><ol>
<li>冪等操作</li>
<li>分層解耦</li>
<li>服務節流</li>
<li>熱點緩衝</li>
<li>服務同質檢測</li>
<li>服務降級 - 如果 redis 掛了，避免雪崩 -&gt; 把某些服務先關閉，ex: 註冊功能關掉，登入功能關掉，但讓已登入的人繼續操作。<br>…</li>
<li>混沌破壞設計 (故意搞壞一些機器或用軟體模擬，看服務穩定度)</li>
</ol>
<p>Developer 要解決的應該是更宏觀的問題，不是爭論 PHP vs Go vs … 而已。<br>Shared-nothing architecture<br>Monolith - Microservice</p>
<p>Caching !?<br>Connection Pool !?<br>Extension / HHVM / PHP 7 !?</p>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>*</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MUZIK__u67B6_u69CB_u6F14_u9032"><a href="#MUZIK__u67B6_u69CB_u6F14_u9032" class="headerlink" title="MUZIK 架構演進"></a>MUZIK 架構演進</h2><]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (1) - PHP 之父 Rasmus Lerdorf 帶來的 PHP 7 介紹]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(1)-PHP-%E4%B9%8B%E7%88%B6-Rasmus-Lerdorf-PHP-7-%E4%BB%8B%E7%B4%B9/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(1)-PHP-之父-Rasmus-Lerdorf-PHP-7-介紹/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T02:42:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="PHP__u4E4B_u7236_Rasmus_Lerdorf"><a href="#PHP__u4E4B_u7236_Rasmus_Lerdorf" class="headerlink" title="PHP 之父 Rasmus Lerdorf"></a>PHP 之父 Rasmus Lerdorf</h1><h2 id="Show_C_API_for_Web"><a href="#Show_C_API_for_Web" class="headerlink" title="Show C API for Web"></a>Show C API for Web</h2><ul>
<li>Users don’t care about how to write program in C, they need tags to use. 講了一下 PHP 的源起，是使用者想要很容易寫出一個網頁，</li>
<li>以 Hello World 為例</li>
</ul>
<h2 id="PHP_7"><a href="#PHP_7" class="headerlink" title="PHP 7"></a>PHP 7</h2><h3 id="Engine_Performance"><a href="#Engine_Performance" class="headerlink" title="Engine Performance"></a>Engine Performance</h3><ul>
<li>100%+ Performance</li>
<li>Lower memory</li>
<li>Native thread local storage</li>
</ul>
<h3 id="Persistent_secondary_file-based_cache_for_OPCache"><a href="#Persistent_secondary_file-based_cache_for_OPCache" class="headerlink" title="Persistent secondary file-based cache for OPCache"></a>Persistent secondary file-based cache for OPCache</h3><ul>
<li>主要用 SHM (shared memory) to cache 10x faster</li>
<li>但 server restart 會把 SHM cache 存到 file-based cache 的樣子</li>
<li>以 Composer 為例</li>
</ul>
<h3 id="Abstract_Syntax_Tree"><a href="#Abstract_Syntax_Tree" class="headerlink" title="Abstract Syntax Tree"></a>Abstract Syntax Tree</h3><ul>
<li><code>echo substr(&quot;abc&quot;, [1, 2]);</code></li>
<li>better debug information，會顯示第二參數應該為 int</li>
</ul>
<h3 id="Return_Types"><a href="#Return_Types" class="headerlink" title="Return Types"></a>Return Types</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_config</span><span class="params">()</span><span class="type">: array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">43</span>;</span><br><span class="line">&#125;</span><br><span class="line">get_config();</span><br></pre></td></tr></table></figure>
<h3 id="u52A0_u5F37_u7684_TypeHint__28for_premitive_datatype_29_2C_Scalar_Types"><a href="#u52A0_u5F37_u7684_TypeHint__28for_premitive_datatype_29_2C_Scalar_Types" class="headerlink" title="加強的 TypeHint (for premitive datatype), Scalar Types"></a>加強的 TypeHint (for premitive datatype), Scalar Types</h3><h3 id="Strict_Scalar_Types"><a href="#Strict_Scalar_Types" class="headerlink" title="Strict Scalar Types"></a>Strict Scalar Types</h3><ul>
<li><code>declare(strict_types=1);</code></li>
</ul>
<h3 id="Anonymousy_Class"><a href="#Anonymousy_Class" class="headerlink" title="Anonymousy Class"></a>Anonymousy Class</h3><h3 id="Null_check__28Coalesce_Operator_29"><a href="#Null_check__28Coalesce_Operator_29" class="headerlink" title="Null check (Coalesce Operator)"></a>Null check (Coalesce Operator)</h3><ul>
<li>不用再寫很多 <code>isset()</code> 了</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = null;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="number">2</span>;</span><br><span class="line">echo <span class="variable">$a</span> ?? <span class="variable">$b</span>; // <span class="number">1</span></span><br><span class="line">echo <span class="variable">$c</span> ?? <span class="variable">$b</span>; // <span class="number">2</span></span><br><span class="line">echo <span class="variable">$a</span> ?? <span class="variable">$x</span> ?? <span class="variable">$c</span>; // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="Spaceship_Operator"><a href="#Spaceship_Operator" class="headerlink" title="Spaceship Operator"></a>Spaceship Operator</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|=|, k=k, <span class="tag">&lt;<span class="title">==</span>&gt;</span>, <span class="tag">&lt;<span class="title">=</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用在 cmp callback</p>
<h3 id="Exceptions_Fatals"><a href="#Exceptions_Fatals" class="headerlink" title="Exceptions Fatals"></a>Exceptions Fatals</h3><h3 id="Zero-cost_Assertions"><a href="#Zero-cost_Assertions" class="headerlink" title="Zero-cost Assertions"></a>Zero-cost Assertions</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; complete skip compile assertion</span><br><span class="line">zend.assertions = -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="Add__3Acall_28_29"><a href="#Add__3Acall_28_29" class="headerlink" title="Add :call()"></a>Add :call()</h3><h3 id="u628A_u5F88_u591A_u820A_features_deprecated"><a href="#u628A_u5F88_u591A_u820A_features_deprecated" class="headerlink" title="把很多舊 features deprecated"></a>把很多舊 features deprecated</h3><ul>
<li>ex: eval, ereg/ext</li>
<li>preg_replace callback</li>
</ul>
<h3 id="New_Reserved_Words"><a href="#New_Reserved_Words" class="headerlink" title="New Reserved Words"></a>New Reserved Words</h3><ul>
<li>true, false, string</li>
</ul>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul>
<li>64-bit integer support on Windows</li>
<li>Cleanup edge-case integer overflow/underflow</li>
</ul>
<h3 id="Uniform_variable_syntax"><a href="#Uniform_variable_syntax" class="headerlink" title="Uniform variable syntax"></a>Uniform variable syntax</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// left <span class="keyword">to</span> right parse</span><br><span class="line"><span class="variable">$this-</span>&gt;<span class="variable">$belongs</span>_<span class="keyword">to</span>[<span class="string">'col'</span>]   i.e. &#123;<span class="variable">$this-</span>&gt;<span class="variable">$belongs</span>_to&#125;[<span class="string">'col'</span>] <span class="keyword">in</span> PHP <span class="number">7</span></span><br><span class="line"><span class="variable">$this-</span>&gt;<span class="variable">$belongs</span>_<span class="keyword">to</span>[<span class="string">'col'</span>]   i.e. <span class="variable">$this-</span>&gt;&#123;<span class="variable">$belongs</span>_to&#125;[<span class="string">'col'</span>]&#125; <span class="keyword">in</span> PHP <span class="number">5</span></span><br><span class="line">// vs</span><br><span class="line"><span class="variable">$this-</span>&gt;&#123;<span class="variable">$belongs</span>_to[<span class="string">'col'</span>]&#125; // this is what <span class="keyword">to</span> write <span class="keyword">in</span> PHP <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h3 id="u5BE6_u969B_u6848_u4F8B"><a href="#u5BE6_u969B_u6848_u4F8B" class="headerlink" title="實際案例"></a>實際案例</h3><ul>
<li>讓你的 Wordpress 跑起來快三倍！</li>
<li>Array 的例子，memory usage 大量降低！</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>, <span class="number">100000</span>) <span class="variable">$a</span>[] = <span class="string">'abc'</span>;</span><br><span class="line">// show memory usage</span><br><span class="line">// PHP <span class="number">5</span>.x <span class="number">43</span>M</span><br><span class="line">// PHP <span class="number">7</span>   <span class="number">6</span>M</span><br></pre></td></tr></table></figure>
<h3 id="JIT__3F"><a href="#JIT__3F" class="headerlink" title="JIT ?"></a>JIT ?</h3><ul>
<li>No JIT in php 7 yet. We’re not play the JIT card yet.</li>
</ul>
<h3 id="Benchmarks"><a href="#Benchmarks" class="headerlink" title="Benchmarks"></a>Benchmarks</h3><ul>
<li>可以看 author 的 slides，看怎麼測出來的，環境設定是什麼</li>
<li>req/sec 幾乎是 PHP 5.x 兩倍, HHVM 1.2~1.5 倍</li>
<li>latency 幾乎只有 PHP 5.x 一半</li>
<li>WordPress 快三倍， HHVM 也有三倍，但比 PHP 7 快一點點，可以用一點 hack 哈</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">make</span> clean</span><br><span class="line">$ <span class="keyword">make</span> -j8 <span class="keyword">prof</span>-gen</span><br><span class="line">...</span><br><span class="line">$ sapi/cgi/php-cgi -T <span class="number">1000</span></span><br><span class="line">$ <span class="keyword">make</span> <span class="keyword">prof</span>-clean</span><br><span class="line">$ <span class="keyword">make</span> -j8 <span class="keyword">prof</span>-use</span><br></pre></td></tr></table></figure>
<ul>
<li><p>should build (compile) PHP in your way.</p>
</li>
<li><p>phpBB 也是 2.3 倍快 (req/sec)</p>
</li>
<li>MediaWiki HHVM 比較快</li>
<li>Opencart 大都是 access DB, 所以 php 5, 7, hhvm 差別不大， php 7 大約快 10%</li>
<li>WardrobeCMS 1.2.0 一樣，快兩倍，latency 幾乎一半</li>
<li>Geeklog 2.1.0</li>
<li>Magento 1.9.1.1 當然比 php 5.x，但 hhvm 還比 php 7 再快 10% 左右</li>
<li>Traq 3.5.2 有 code 要改</li>
<li>Cachet 2x</li>
<li>Moodle-2.9-dev 1.5x</li>
<li>ZenCart 1.5.4 40% faster than php 5.x</li>
</ul>
<h3 id="Help_Us_Test"><a href="#Help_Us_Test" class="headerlink" title="Help Us Test"></a>Help Us Test</h3><ul>
<li>release in a month</li>
<li>It’s really easy! compile it.</li>
<li>clone <a href="https://github.com/rlerdorf" target="_blank" rel="external">rlerdorf (gitHub)</a> / php7dev.git, vagrant up</li>
<li><p>Easy to switch PHP version</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newphp <span class="number">56</span></span><br><span class="line">newphp <span class="number">7</span> debug</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build any version</p>
</li>
</ul>
<h3 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h3><ul>
<li>Q: Are you still doing anything at all?</li>
<li>A: 16~18 hrs a day in year 199x~200x, 現在沒有在開發了，交接給年輕，但期望以後他的 code 一行也不剩，讓 project 繼續前進。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="PHP__u4E4B_u7236_Rasmus_Lerdorf"><a href="#PHP__u4E4B_u7236_Rasmus_Lerdorf" class="headerlink" title="PHP 之父 Rasmus Lerdorf"></a>PHP]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (5) - ORM 實戰效能 (sdPower)]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(5)%20-%20ORM%20%E5%AF%A6%E6%88%B0%E6%95%88%E8%83%BD%20(sdPower)/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(5) - ORM 實戰效能 (sdPower)/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T07:55:15.000Z</updated>
    <content type="html"><![CDATA[<p>info@sd.idv.tw</p>
<h2 id="PhalconPHP"><a href="#PhalconPHP" class="headerlink" title="PhalconPHP"></a>PhalconPHP</h2><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul>
<li>參雜 SQL 的 funciton 維護不易，資料表欄位難變動</li>
<li>Model 有分離 DB 和 Model 層，並有做一些些 Cache，六年前範例 Code，不過仍不好用</li>
<li>ORM 基本使用介紹，跟 Laravel eloquent 差不多。</li>
<li>Relations 幾乎跟 Laravel 一樣！？</li>
</ul>
<h2 id="ORM__u6E2C_u8A66_u554F_u984C"><a href="#ORM__u6E2C_u8A66_u554F_u984C" class="headerlink" title="ORM 測試問題"></a>ORM 測試問題</h2><ul>
<li>Ex: Shopping Cart, 購物清單放 session</li>
<li>寫測試，到底是測 Cart 還是測 session</li>
<li>建議：<ul>
<li>測 Controller</li>
<li>hit db (Mocking 也行)</li>
<li>用 migration 做 db 模擬測試</li>
<li>Codeception BDD</li>
</ul>
</li>
</ul>
<h2 id="ORM__u5FEB_u53D6_u6A5F_u5236"><a href="#ORM__u5FEB_u53D6_u6A5F_u5236" class="headerlink" title="ORM 快取機制"></a>ORM 快取機制</h2><ul>
<li>設定好 cache 就行了，設 lifetime 5 mins</li>
<li>可以利用繼承，還決定該 Model 物件要使用的 Cache 方式 (File, memory, DB … )</li>
<li>PHQL -&gt; 針對 SQL 做 Cache</li>
</ul>
<h2 id="ORM__u8CC7_u6599_u512A_u5316"><a href="#ORM__u8CC7_u6599_u512A_u5316" class="headerlink" title="ORM 資料優化"></a>ORM 資料優化</h2><ul>
<li>PHP 不是高速運算設計的語言</li>
<li>ex: 大量物件操作，操作 10000 筆資料，new 10000 個 instances -&gt; 不合理</li>
</ul>
<h2 id="ODM__28Object-Document_Model_29"><a href="#ODM__28Object-Document_Model_29" class="headerlink" title="ODM (Object-Document Model)"></a>ODM (Object-Document Model)</h2><ul>
<li>其實就是 Laravel Collections ex: Collections</li>
<li>還有一些參考連結 ActiveRecord -&gt; 和 ORM 不大一樣</li>
<li>Sharding, 特殊的: MySQL sharding 到 Redis</li>
</ul>
<blockquote>
<p>EXOSITE 的人，徵人中</p>
</blockquote>
<p>what!? EXOSITE</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>info@sd.idv.tw</p>
<h2 id="PhalconPHP"><a href="#PhalconPHP" class="headerlink" title="PhalconPHP"></a>PhalconPHP</h2><h2 id="MVC"><a hre]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (3) - iNDIEVOX CTO 林志傑]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(3)%20-%20iNDIEVOX%20CTO%20%E6%9E%97%E5%BF%97%E5%82%91/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(3) - iNDIEVOX CTO 林志傑/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T04:12:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u552E_u7968_u91D1_u984D_u6025_u901F_u6210_u9577"><a href="#u552E_u7968_u91D1_u984D_u6025_u901F_u6210_u9577" class="headerlink" title="售票金額急速成長"></a>售票金額急速成長</h2><ul>
<li>幾乎每年是前一年的 2 倍</li>
</ul>
<h2 id="u5F9E_u4E00_u500B_u7121_u6CD5_scale__u7684_u7AD9_u8B8A_u6210_u80FD_scale__u7684_u7D93_u9A57_u8AC7"><a href="#u5F9E_u4E00_u500B_u7121_u6CD5_scale__u7684_u7AD9_u8B8A_u6210_u80FD_scale__u7684_u7D93_u9A57_u8AC7" class="headerlink" title="從一個無法 scale 的站變成能 scale 的經驗談"></a>從一個無法 scale 的站變成能 scale 的經驗談</h2><ul>
<li>老闆家頂樓接 Case，「<code>蘇打粉之亂</code>」，接售票系統的 Case</li>
<li>只有一台 Server， Web, DB, Storage 全部在一起</li>
<li>沒有 Framework, MVC, ORM</li>
<li>到處 DB Connection</li>
</ul>
<h2 id="u7D93_u904E_u8607_u6253_u7C89_u4E4B_u4E82_u7684_u552E_u7968_u7D93_u9A57"><a href="#u7D93_u904E_u8607_u6253_u7C89_u4E4B_u4E82_u7684_u552E_u7968_u7D93_u9A57" class="headerlink" title="經過蘇打粉之亂的售票經驗"></a>經過蘇打粉之亂的售票經驗</h2><ul>
<li>加了兩台 server, Web, DB, 原本的就是 Storage Server</li>
<li>自行研發 Framework，使用 MVC 架構，ORM，參考 ROR</li>
<li>Singleton DB connection，介紹怎麼實作 singleton Db connection</li>
<li>撐了一陣子，還是有空間不夠掛站情況</li>
</ul>
<h2 id="u4F0D_u7C89_u689D_u4E4B_u4E82"><a href="#u4F0D_u7C89_u689D_u4E4B_u4E82" class="headerlink" title="伍粉條之亂"></a>伍粉條之亂</h2><ul>
<li>希望 Web, DB, Storage server 都可以一直擴充</li>
<li>理想上，前面有 load balancer (之後參考 slide 架構圖)</li>
<li>軟體上：支援 DB 讀寫分離！ Web App 可複製</li>
<li>一年買一台，對小公司來說只是夢想</li>
</ul>
<h2 id="u642C_u4E0A_AWS__282013__u5E74_29"><a href="#u642C_u4E0A_AWS__282013__u5E74_29" class="headerlink" title="搬上 AWS (2013 年)"></a>搬上 AWS (2013 年)</h2><ul>
<li>研究結果：說服老闆搬進 AWS</li>
<li><p>Storage Server : S3</p>
<ul>
<li>S3cmd 搬檔案到 S3 工具</li>
<li>Flysystem 提供統一介面操作檔案</li>
<li>所有原始檔案操作都要改，每天改到死。</li>
</ul>
</li>
<li><p>發信：用 SES Service</p>
<ul>
<li>Swift Mailer</li>
<li>一樣，全部 mail() 的 code 都要改</li>
</ul>
</li>
<li><p>Session 需要存到 ElastiCache / Radis</p>
<ul>
<li>寫一個 mediator(中介軟體) session 存到 File / Memcached / Redis</li>
<li>(上面這些 Laravel 都可以做到耶，酷！)</li>
</ul>
</li>
</ul>
<h2 id="u4F0D_u7C89_u689D_u4E4B_u4E82_u5F8C_u7684_u7CFB_u7D71_u67B6_u69CB_u4FEE_u6539"><a href="#u4F0D_u7C89_u689D_u4E4B_u4E82_u5F8C_u7684_u7CFB_u7D71_u67B6_u69CB_u4FEE_u6539" class="headerlink" title="伍粉條之亂後的系統架構修改"></a>伍粉條之亂後的系統架構修改</h2><ul>
<li>可以自動 scaling，設 CPU limit 超過 70% 時自動 scale</li>
<li>1T 的檔移到 S3, 資料庫同步等，大約 2個月時間</li>
</ul>
<h4 id="Scale_Up"><a href="#Scale_Up" class="headerlink" title="Scale Up"></a>Scale Up</h4><p>只是同一個 Server 能力變強</p>
<ul>
<li>EC2 -&gt; 用 AMI</li>
<li>RDS -&gt; Modify</li>
<li>ElastiCache 另開一個 Node</li>
</ul>
<h4 id="Scale_Out"><a href="#Scale_Out" class="headerlink" title="Scale Out"></a>Scale Out</h4><p>同樣 Server 能力，但增加 Server 數量。</p>
<ul>
<li>EC2 -&gt; AMI</li>
<li>RDS -&gt; Replication (需做 RW 分離)</li>
<li>ElastiCache 另開一個 Node</li>
</ul>
<h2 id="u5BE6_u6230_u7D50_u679C__28_u4F0D_u689D_u7C89_u4E4B_u4E82_29_-__u9084_u662F_u88AB_u653B_u7834_u4E86"><a href="#u5BE6_u6230_u7D50_u679C__28_u4F0D_u689D_u7C89_u4E4B_u4E82_29_-__u9084_u662F_u88AB_u653B_u7834_u4E86" class="headerlink" title="實戰結果 (伍條粉之亂) - 還是被攻破了"></a>實戰結果 (伍條粉之亂) - 還是被攻破了</h2><ul>
<li>EC2 auto scaling 趕不上搶票速度 -&gt; 改人工預估</li>
<li>EC2 掛了之後拖累 RDS</li>
<li>來不及讀寫分離</li>
</ul>
<h2 id="u5982_u4F55_u5BE6_u4F5C_u8B80_u5BEB_u5206_u96E2_u7684_Code"><a href="#u5982_u4F55_u5BE6_u4F5C_u8B80_u5BEB_u5206_u96E2_u7684_Code" class="headerlink" title="如何實作讀寫分離的 Code"></a>如何實作讀寫分離的 Code</h2><ul>
<li>需要有切換到 Master 的實作，強制讀最新的 records</li>
</ul>
<h2 id="Hebe__u6D17_u79AE__282013_Dec-_29"><a href="#Hebe__u6D17_u79AE__282013_Dec-_29" class="headerlink" title="Hebe 洗禮 (2013 Dec.)"></a>Hebe 洗禮 (2013 Dec.)</h2><h4 id="u5FEB_u53D6_u6A5F_u5236"><a href="#u5FEB_u53D6_u6A5F_u5236" class="headerlink" title="快取機制"></a>快取機制</h4><ul>
<li>Ex: 不會變動的，如歌曲、活動、專輯的資訊，一律永久快取</li>
<li>上述資料的更新，同時更新快取</li>
<li>會變動的，如列表、排行榜、新上架，快取 60 秒後自動更新</li>
<li><p>總之，可快取就快取！</p>
</li>
<li><p>快取 Code 示範</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">__construct</span>() &#123;</span><br><span class="line">    <span class="comment">// init cache</span></span><br><span class="line">    <span class="comment">// read cache</span></span><br><span class="line">    <span class="comment">// failed to read cache, then read from db</span></span><br><span class="line">    <span class="comment">// read from db, update cache, set 永久</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">save</span>() &#123;</span><br><span class="line">    <span class="comment">// update db</span></span><br><span class="line">    <span class="comment">// update cache, set 永久</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">getList</span>() &#123;</span><br><span class="line">    <span class="comment">// read cache</span></span><br><span class="line">    <span class="comment">// if failed, read db</span></span><br><span class="line">    <span class="comment">// upadte cache</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="u5BE6_u6230_u7D50_u679C_uFF1A_u9084_u662F_u639B_u4E86_uFF01_u4EC0_u9EBC_7E"><a href="#u5BE6_u6230_u7D50_u679C_uFF1A_u9084_u662F_u639B_u4E86_uFF01_u4EC0_u9EBC_7E" class="headerlink" title="實戰結果：還是掛了！什麼~"></a>實戰結果：還是掛了！什麼~</h4><ul>
<li>11650 人搶票，實際上更多</li>
<li>開 20台 EC2，用到上限</li>
<li>第三方金流承載量不夠</li>
<li>讀寫分離表現不如預期</li>
<li>改善方式：<ul>
<li>寫信給 Support 開更多的 EC2 instance</li>
<li>用排隊機制讓部份使用者進入購票流程</li>
<li>打掉讀寫分離架構，改用 Amazon DynamoDB 支援售票功能</li>
</ul>
</li>
</ul>
<h4 id="u4ED8_u8CBB_u6392_u968A_u6A5F_u5236"><a href="#u4ED8_u8CBB_u6392_u968A_u6A5F_u5236" class="headerlink" title="付費排隊機制"></a>付費排隊機制</h4><ul>
<li>主辦單位堅持訂票同時要付費</li>
<li>如 500訂單/sec，60 秒也可以完成 3萬張 訂單</li>
<li>Bakery Algo 來實作排隊機制</li>
<li>超過上限的 User 被導入 Static Page，使用者看不出來有可能買不到票。</li>
</ul>
<h2 id="Amazon_DynamoDB__u53EF_u64F4_u5C55_u8CC7_u6599_u5EAB"><a href="#Amazon_DynamoDB__u53EF_u64F4_u5C55_u8CC7_u6599_u5EAB" class="headerlink" title="Amazon DynamoDB 可擴展資料庫"></a>Amazon DynamoDB 可擴展資料庫</h2><ul>
<li>可調整 Throughput 甚至每秒 10000 訂單也可以設定</li>
<li>整體售票系統架構圖改善</li>
<li>從此再也沒有搶票掛站狀況</li>
</ul>
<h4 id="u4E0D_u8981_u81EA_u5E79_uFF0C_u73FE_u5728_Laravel__u5927_u90E8_u4EFD_u90FD_u53EF_u4EE5_u505A_u5230_uFF01"><a href="#u4E0D_u8981_u81EA_u5E79_uFF0C_u73FE_u5728_Laravel__u5927_u90E8_u4EFD_u90FD_u53EF_u4EE5_u505A_u5230_uFF01" class="headerlink" title="不要自幹，現在 Laravel 大部份都可以做到！"></a>不要自幹，現在 Laravel 大部份都可以做到！</h4><h2 id="u552E_u7968_u524D_u6E96_u5099"><a href="#u552E_u7968_u524D_u6E96_u5099" class="headerlink" title="售票前準備"></a>售票前準備</h2><ul>
<li>如何預估要開多少機器？</li>
<li>依經驗…</li>
<li>模擬測試 - multi thread</li>
<li>Amazon pre-warm<ul>
<li>ELB 的瓶頸 -&gt; 付錢給 AWS</li>
<li>要一個禮拜前 pre-warm</li>
</ul>
</li>
</ul>
<h2 id="u5F8C_u8A18"><a href="#u5F8C_u8A18" class="headerlink" title="後記"></a>後記</h2><h4 id="u53F0_u7063_u7684_u552E_u7968_u7CFB_u7D71"><a href="#u53F0_u7063_u7684_u552E_u7968_u7CFB_u7D71" class="headerlink" title="台灣的售票系統"></a>台灣的售票系統</h4><ul>
<li>展奕 - 年代、寬宏、華娛</li>
<li>華x - 年代、寬宏、華娛</li>
<li>xx - 年代、寬宏、華娛</li>
<li>賣票同好會 - 解決售票系統掛站問題</li>
</ul>
<h4 id="u7121_u6CD5_u6539_u8B8A_u7684_u73FE_u6CC1"><a href="#u7121_u6CD5_u6539_u8B8A_u7684_u73FE_u6CC1" class="headerlink" title="無法改變的現況"></a>無法改變的現況</h4><ul>
<li>ex: iBon 取票造成瓶頸</li>
<li>ex: 主辦單位對抽票的顧慮，台灣會說你們黑箱</li>
<li>ex: 電子票券不夠普及</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u552E_u7968_u91D1_u984D_u6025_u901F_u6210_u9577"><a href="#u552E_u7968_u91D1_u984D_u6025_u901F_u6210_u9577" class="headerlink" title]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (6) - 新創公司軟體架構 (阿川先生)]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(6)%20-%20%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B%20(%E9%98%BF%E5%B7%9D%E5%85%88%E7%94%9F)/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(6) - 新創公司軟體架構 (阿川先生)/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T06:38:21.000Z</updated>
    <content type="html"><![CDATA[<p>跟之前在 PHP 也有 Day 講的是類似的</p>
<ul>
<li>Package 直接符合 psr-4，之後可以直接發佈</li>
</ul>
<h2 id="u8EDF_u9AD4_u6E2C_u8A66"><a href="#u8EDF_u9AD4_u6E2C_u8A66" class="headerlink" title="軟體測試"></a>軟體測試</h2><ol>
<li>鏡射結構<ul>
<li>直接和 App 核心一樣，對應一個檔案一個測試檔</li>
<li>不細分 Unit Test / Integration Test / Accept Test</li>
<li>設計方便，開發速度快</li>
</ul>
</li>
</ol>
<p>以開發速度為最優先考量！</p>
<ul>
<li>延伸閱讀<ul>
<li><a href="http://blog.turn.tw/?page_id=2742" target="_blank" rel="external">http://blog.turn.tw/?page_id=2742</a></li>
<li><a href="http://github.com/howtomakeaturn/phpconf2015" target="_blank" rel="external">http://github.com/howtomakeaturn/phpconf2015</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>跟之前在 PHP 也有 Day 講的是類似的</p>
<ul>
<li>Package 直接符合 psr-4，之後可以直接發佈</li>
</ul>
<h2 id="u8EDF_u9AD4_u6E2C_u8A66"><a href="#u8EDF_u9AD4_u6E2C_u]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (7) - Docker 當專案漸趕當遷移不再那麼難 (若虛)]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(7)%20-%20Docker%20%E7%95%B6%E5%B0%88%E6%A1%88%E6%BC%B8%E8%B6%95%E7%95%B6%E9%81%B7%E7%A7%BB%E4%B8%8D%E5%86%8D%E9%82%A3%E9%BA%BC%E9%9B%A3%20(%E8%8B%A5%E8%99%9B)/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(7) - Docker 當專案漸趕當遷移不再那麼難 (若虛)/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T07:57:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u8B58_uFF1ADocker__u7C21_u4ECB"><a href="#u8B58_uFF1ADocker__u7C21_u4ECB" class="headerlink" title="識：Docker 簡介"></a>識：Docker 簡介</h2><ul>
<li>dotCloud -&gt; Docker</li>
<li>Fig -&gt; docker compose</li>
<li>docker -&gt; docker machine</li>
</ul>
<h2 id="u790E_uFF1ADocker__u57FA_u790E_u89C0_u5FF5"><a href="#u790E_uFF1ADocker__u57FA_u790E_u89C0_u5FF5" class="headerlink" title="礎：Docker 基礎觀念"></a>礎：Docker 基礎觀念</h2><ul>
<li>Docker vs VM</li>
<li>SunOS 可以建 Ubuntu Image</li>
<li>Container 是在 Image FS 之上</li>
<li>Container 裡有 Process 在 run</li>
<li>Image 可以一直 commit 上去，增加不同的修改，甚至可以共用</li>
<li>例如可以有 php 5.5 image / php 7 image 上面各架 apache / nginx / 等</li>
<li>可以 expose ports 和其他 container 做溝通，Ex: 可以保護 DB, 可替換 container</li>
<li>Volumes 把資料夾內容和 host 做同步, Ex: 兩個 container 共用同一個 host 資料夾內容</li>
<li>Containers 中的 folder 同步會被 Host 蓋掉</li>
</ul>
<h2 id="u67B6_uFF1A_u5B89_u88DD_Docker"><a href="#u67B6_uFF1A_u5B89_u88DD_Docker" class="headerlink" title="架：安裝 Docker"></a>架：安裝 Docker</h2><ul>
<li>今年更新的新的安裝方式，可以在 Windows/OSX 上裝 Docer，利用 VM 的方式</li>
</ul>
<h3 id="Docker_Toolbox"><a href="#Docker_Toolbox" class="headerlink" title="Docker Toolbox"></a>Docker Toolbox</h3><pre><code>- 看圖片範例是有 for OSX, Kitematic 所有操作都有 GUI
- Command Line 也行
</code></pre><h2 id="u904B_uFF1A_u904B_u884C"><a href="#u904B_uFF1A_u904B_u884C" class="headerlink" title="運：運行"></a>運：運行</h2><ul>
<li>docker build/pull/run</li>
<li>Dockerfile<ul>
<li>可以記錄變動</li>
<li>方便遷移，可以直接在新機器建立一樣的環境</li>
<li>可以用 <code>RUN</code> 跑 scripts，用 <code>ADD</code> 複製 host files</li>
<li>利用 &amp;&amp; 或 \ 把多個 run 或其他指令連在一起</li>
<li>利用 ENV 預設環境變數</li>
<li>寫 shell scirpt</li>
<li>ENTRYPOINT 設定進入點</li>
<li>用 COPY 把 init.sh copy 進去再用 RUN 來執行</li>
<li>VALUME 可以在 HOST 建 data folder，再用 ln -s 的方式</li>
</ul>
</li>
</ul>
<h1 id="u5668_uFF1ADocker_Mahcine_/_Docker_Composer"><a href="#u5668_uFF1ADocker_Mahcine_/_Docker_Composer" class="headerlink" title="器：Docker Mahcine / Docker Composer"></a>器：Docker Mahcine / Docker Composer</h1><h3 id="Docker_Machine"><a href="#Docker_Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h3><ul>
<li>直接在 Mac 上利用 VirtualBox 開 VM 跑 docker</li>
<li>docker-machine env …</li>
<li>docker-machine create –driver … ex: 連 AWS EC2, Google Cloud, Linode?,</li>
<li>可以在本機、已存在的機器，或各雲端供應商上運行</li>
<li>可以搭配 Docker Swarm 更快速建 Docker Cluster</li>
</ul>
<h3 id="Docker_Compose"><a href="#Docker_Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><ul>
<li>類似建一個 yaml，然後 docker-compose up 就可以了</li>
<li>up 要小心，資料先備份，Volume 會不見</li>
<li>docker-compose up -d/start/stop/rm</li>
<li><p>可以建 Multi Containers</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose.yml</span><br><span class="line">web:</span><br><span class="line">    build: ./</span><br><span class="line">    links:</span><br><span class="line">        -<span class="ruby"> mysql</span><br><span class="line"></span>    ports:</span><br><span class="line">        -<span class="ruby"> <span class="string">'9950:80'</span></span><br><span class="line"></span>mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">        -<span class="ruby"> <span class="constant">MYSQL_PASS</span>=password</span><br><span class="line"></span>        -<span class="ruby"> <span class="constant">MYSQL_DBNAME</span>=wordpress</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有 extends 功能，所以同樣設定在 yaml 裡不用重寫，可以區隔 staging/local/production env</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">    extends:</span><br><span class="line">        file: xxx.<span class="keyword">xml</span></span><br><span class="line">        <span class="title">service</span>: web</span><br><span class="line">    environment:</span><br><span class="line">        - <span class="variable">ENV=</span>development</span><br><span class="line">        - <span class="variable">DB=</span>sqlite3</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用環境變數取代 dockerfile 中的預設值</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">web</span>:</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">        - ./<span class="attribute">app</span>:/app</span><br><span class="line"><span class="attribute">db</span>:</span><br><span class="line">    <span class="attribute">volumes</span>:</span><br><span class="line">        - ./<span class="attribute">db</span>:/db</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用 restart 避免 docker container 下線</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    restart: <span class="constant">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>管理多個 container 時很好用，不用下多個 docker run</p>
</li>
<li>建議一個 container 一個 service</li>
</ul>
<h2 id="u4F8B_uFF1ALive_demo"><a href="#u4F8B_uFF1ALive_demo" class="headerlink" title="例：Live demo"></a>例：Live demo</h2><ul>
<li>以建 WordPress 為例，快速便捷用很多現成的，減少開發環境建置時間！</li>
<li>可以取代 Vagrant，方便耶！</li>
<li>Ex: 測試不同 php version</li>
</ul>
<h2 id="u554F_uFF1AQA"><a href="#u554F_uFF1AQA" class="headerlink" title="問：QA"></a>問：QA</h2><p>*</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8B58_uFF1ADocker__u7C21_u4ECB"><a href="#u8B58_uFF1ADocker__u7C21_u4ECB" class="headerlink" title="識：Docker 簡介"></a>識：Docker 簡介</h2]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 PHP Conf 筆記 (8) - High Performance Solution for PHP (@Laruence)]]></title>
    <link href="http://blog.dj1020.net/2015-PHP-Conf-%E7%AD%86%E8%A8%98(8)%20-%20High%20Performance%20Solution%20for%20PHP%20(@Laruence)/"/>
    <id>http://blog.dj1020.net/2015-PHP-Conf-筆記(8) - High Performance Solution for PHP (@Laruence)/</id>
    <published>2015-10-09T01:33:08.000Z</published>
    <updated>2015-10-09T09:07:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="About__u60E0_u5FC3_u8FB0"><a href="#About__u60E0_u5FC3_u8FB0" class="headerlink" title="About 惠心辰"></a>About 惠心辰</h2><ul>
<li>Ya*, Yaf, Yar, Yaconf, Yac, Taint</li>
<li>Maintainer of Opcache, Msgpack, PHP-Lua</li>
<li>Core Developer of PHP7 (NG branch)</li>
<li>微博總架構師</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><p>Weibo V5 (2012~2015)</p>
<ul>
<li>Nginx, PHP-5.4</li>
<li>300% performance improvement</li>
<li>60% Response time reduced</li>
<li>More than 1000 servers saved</li>
</ul>
</li>
<li><p>CBigpipe ??</p>
</li>
</ul>
<h2 id="Framework_-_Yaf"><a href="#Framework_-_Yaf" class="headerlink" title="Framework - Yaf"></a>Framework - Yaf</h2><ul>
<li>(2011) Use or not use framework was a problem</li>
<li>What PHP framework should do ?<ul>
<li>Route</li>
<li>Dispatch</li>
<li>Autoloading</li>
<li>View ? PHP 天生就是 template，Yaf 只有最簡單的</li>
<li>ORM ? Yaf 沒有</li>
</ul>
</li>
<li>簡單、夠用就好，不求「高」、「大」、「全」</li>
</ul>
<h3 id="Yaf_-_the_first_PHP_framework_in_extension"><a href="#Yaf_-_the_first_PHP_framework_in_extension" class="headerlink" title="Yaf - the first PHP framework in extension"></a>Yaf - the first PHP framework in extension</h3><ul>
<li>不用經過 compile 到 opcode 在 zend VM，最後進入 zend internal APIs</li>
<li>直接使用 zend internal APIs</li>
<li>包含 PhalconPHP 都被幹掉，但 Phalcon 也很快，第二名 (參考就好)</li>
<li>大陸百度、微博、新浪都在用 Yaf</li>
</ul>
<h2 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h2><ul>
<li>方便分工、解耦合、High Available、Scale out</li>
<li>(2013) PC 微博，代碼超過 15萬，70多人合作，但只有一個 repo。</li>
<li>不知道一個接口有沒有人做過，就自己寫了一個。</li>
<li>所以要 Service 化</li>
<li><p>但要用 HTTP 嗎？ -&gt; 用 RPC</p>
<ul>
<li>但 RPC 有性能問題</li>
<li>自己寫一個 RPC -&gt; Yar</li>
</ul>
</li>
<li><p>Throughput vs Lagency 有時候是一個 trade-off</p>
</li>
</ul>
<h2 id="Yar"><a href="#Yar" class="headerlink" title="Yar"></a>Yar</h2><ul>
<li>輕量 RPC framework in etension</li>
<li>支援 C, PHP, Java</li>
<li>Bigpipe 自欺欺人讓用戶感覺變快了 - 先給 DOM 結構，慢慢的再把 json 吐出來，把資料填進 dom 裡。但是是 queue 的概念，一個個 output 出來。</li>
<li>CBigpipe 可以 concurrent 處理 output。</li>
</ul>
<h3 id="Yar_for_C_framework"><a href="#Yar_for_C_framework" class="headerlink" title="Yar for C framework"></a>Yar for C framework</h3><ul>
<li>ex: 白名單、黑名單、Search</li>
<li>會變動又需要執行的很快的服務，改用 C 來寫核心</li>
</ul>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li><a href="http://github.com/laruence/yar" target="_blank" rel="external">http://github.com/laruence/yar</a></li>
<li><a href="http://github.com/laruence/yar-c" target="_blank" rel="external">http://github.com/laruence/yar-c</a></li>
</ul>
<h2 id="Yac"><a href="#Yac" class="headerlink" title="Yac"></a>Yac</h2><ul>
<li>用來取代 APC</li>
<li>市面沒有本機的 Cache 產品，只好自己寫</li>
<li>Cache<ul>
<li>Memcached</li>
<li>Redis</li>
</ul>
</li>
<li>但運行起來很複雜</li>
<li>基於共享 Memory 的 Cache 機制</li>
<li>如果加 lock 多核 CPU 都在等 Memory access</li>
<li>用 CRC 來確認拿回來的資料對不對！</li>
<li>Yac is not safe，不是百分百安全</li>
<li>less than 1/千萬 會得到一個 wrong result (故意給他錯)</li>
<li>Where is can be used (出了問題也不知道 哈)</li>
<li>錯誤率可容忍！比 APC 快 6 倍</li>
<li>特別適用不同用戶，不同進程之間</li>
<li>key 和 value 分開存，key 基本上不會出錯 (64bits, bytes? 字節)</li>
<li>衝突發生率很小</li>
<li>Not wildly used，也不推薦用</li>
<li>也可以用: APC, Memcached</li>
</ul>
<h2 id="Configuration_-_Yaconf"><a href="#Configuration_-_Yaconf" class="headerlink" title="Configuration - Yaconf"></a>Configuration - Yaconf</h2><ul>
<li>一堆 config 目錄，什麼都存</li>
<li>問題：<ul>
<li>每次請求都要 parse 一次</li>
<li>就算存了 opcache，還是要執行一次 detect env</li>
<li>配置和代碼一起上線 -&gt; 嚴重的安全性問題，你甚至可以在 github 上 hack 某人的 DB password</li>
<li>代碼和配置該分開！</li>
</ul>
</li>
<li>Yaconf 就是為了解決這些問題<ul>
<li>INI File</li>
<li>Persistent configurations container in extension</li>
<li>Supports multiply files, sections</li>
<li>Support constants, env varialbes in PHP</li>
<li>Loading once serve multiple requests</li>
</ul>
</li>
<li>在微博廣泛使用</li>
<li>PHP 7 適用，講者不想再 migrate 到 php 5</li>
<li>PHP 5 以下替代方案： Hidef</li>
</ul>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><ul>
<li>PHP 最大的三個安全問題<ul>
<li>XSS</li>
<li>RCE (Remote Code Execution)</li>
<li>SQL Injection</li>
</ul>
</li>
</ul>
<h3 id="Taint"><a href="#Taint" class="headerlink" title="Taint"></a>Taint</h3><ul>
<li>全部 mark 成「可疑數據」</li>
<li>敏感操作時，會 warning，ex: echo, print, file_put_contents …</li>
<li>Q: 何時會去掉 mark ?</li>
<li>Hack 界很有用！發覺漏洞</li>
<li>It’s not a cure, 會替換掉一些核心 coode</li>
<li>和 Xdebug 會衝突</li>
<li>替代： RIPS etc 靜態檢查，所以有些會查不到</li>
</ul>
<h2 id="Opcache"><a href="#Opcache" class="headerlink" title="Opcache"></a>Opcache</h2><ul>
<li>隨著 PHP 5.5 發佈，快！不建議再用 APC</li>
<li>也是一個 opcode optimizer<ul>
<li>Constant propagation</li>
<li>Dead coes removal</li>
<li>Literations compact</li>
<li>NOPS removal</li>
</ul>
</li>
<li>到處都在用</li>
<li>Always remember to enbale it，不能編到核心碼內。</li>
</ul>
<h2 id="PHP_7"><a href="#PHP_7" class="headerlink" title="PHP 7"></a>PHP 7</h2><ul>
<li>Yaf 17% faster</li>
<li>Yar 10% faster</li>
<li>Yac 20% faster</li>
<li>Yaconf (only for PHP 7)</li>
<li>Opcache<ul>
<li>file-based opcodes cache</li>
<li>hugepagefy text segment (新特性，PHP 爸爸沒提)</li>
<li>把核心碼 4K page 改成 2T page</li>
</ul>
</li>
</ul>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="About__u60E0_u5FC3_u8FB0"><a href="#About__u60E0_u5FC3_u8FB0" class="headerlink" title="About 惠心辰"></a>About 惠心辰</h2><ul>
<li>Ya*, Y]]>
    </summary>
    
      <category term="PHP Conf" scheme="http://blog.dj1020.net/tags/PHP-Conf/"/>
    
      <category term="筆記" scheme="http://blog.dj1020.net/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
